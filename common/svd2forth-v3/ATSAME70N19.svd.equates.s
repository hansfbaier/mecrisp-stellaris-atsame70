@ arm-none-eabi-as equates file for ATSAME70N19
@ SVD2GAS Equates Generator, Copyright Terry Porter 2017 "terry@tjporter.com.au" for arm-none-eabi-as 
@ Matthias Koch Complimentary Edition 2017
@ Takes a CMSIS-SVD file plus a hand edited config.xml file as input 
@ Licensed under the GPL, see http://www.gnu.org/licenses/


@=========================== ACC ===========================@
.equ ACC_BASE, 0x40044000 @ (Analog Comparator Controller) 
    .equ ACC_CR, ACC_BASE + 0x00 @ (Control Register) 
        .equ ACC_SWRST_Shift, 0   @ bitWidth 1 (Software Reset)  
 
    .equ ACC_MR, ACC_BASE + 0x04 @ (Mode Register) 
        .equ ACC_SELMINUS_Shift, 0   @ bitWidth 3 (Selection for Minus Comparator Input)  
        .equ ACC_SELPLUS_Shift, 4   @ bitWidth 3 (Selection For Plus Comparator Input)  
        .equ ACC_ACEN_Shift, 8   @ bitWidth 1 (Analog Comparator Enable)  
        .equ ACC_EDGETYP_Shift, 9   @ bitWidth 2 (Edge Type)  
        .equ ACC_INV_Shift, 12   @ bitWidth 1 (Invert Comparator Output)  
        .equ ACC_SELFS_Shift, 13   @ bitWidth 1 (Selection Of Fault Source)  
        .equ ACC_FE_Shift, 14   @ bitWidth 1 (Fault Enable)  
 
    .equ ACC_IER, ACC_BASE + 0x24 @ (Interrupt Enable Register) 
        .equ ACC_CE_Shift, 0   @ bitWidth 1 (Comparison Edge)  
 
    .equ ACC_IDR, ACC_BASE + 0x28 @ (Interrupt Disable Register) 
        .equ ACC_CE_Shift, 0   @ bitWidth 1 (Comparison Edge)  
 
    .equ ACC_IMR, ACC_BASE + 0x2C @ (Interrupt Mask Register) 
        .equ ACC_CE_Shift, 0   @ bitWidth 1 (Comparison Edge)  
 
    .equ ACC_ISR, ACC_BASE + 0x30 @ (Interrupt Status Register) 
        .equ ACC_CE_Shift, 0   @ bitWidth 1 (Comparison Edge cleared on read)  
        .equ ACC_SCO_Shift, 1   @ bitWidth 1 (Synchronized Comparator Output)  
        .equ ACC_MASK_Shift, 31   @ bitWidth 1 (Flag Mask)  
 
    .equ ACC_ACR, ACC_BASE + 0x94 @ (Analog Control Register) 
        .equ ACC_ISEL_Shift, 0   @ bitWidth 1 (Current Selection)  
        .equ ACC_HYST_Shift, 1   @ bitWidth 2 (Hysteresis Selection)  
 
    .equ ACC_WPMR, ACC_BASE + 0xE4 @ (Write Protection Mode Register) 
        .equ ACC_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ ACC_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ ACC_WPSR, ACC_BASE + 0xE8 @ (Write Protection Status Register) 
        .equ ACC_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
 

@=========================== AES ===========================@
.equ AES_BASE, 0x4006C000 @ (Advanced Encryption Standard) 
    .equ AES_CR, AES_BASE + 0x00 @ (Control Register) 
        .equ AES_START_Shift, 0   @ bitWidth 1 (Start Processing)  
        .equ AES_SWRST_Shift, 8   @ bitWidth 1 (Software Reset)  
 
    .equ AES_MR, AES_BASE + 0x04 @ (Mode Register) 
        .equ AES_CIPHER_Shift, 0   @ bitWidth 1 (Processing Mode)  
        .equ AES_GTAGEN_Shift, 1   @ bitWidth 1 (GCM Automatic Tag Generation Enable)  
        .equ AES_DUALBUFF_Shift, 3   @ bitWidth 1 (Dual Input Buffer)  
        .equ AES_PROCDLY_Shift, 4   @ bitWidth 4 (Processing Delay)  
        .equ AES_SMOD_Shift, 8   @ bitWidth 2 (Start Mode)  
        .equ AES_KEYSIZE_Shift, 10   @ bitWidth 2 (Key Size)  
        .equ AES_OPMOD_Shift, 12   @ bitWidth 3 (Operating Mode)  
        .equ AES_LOD_Shift, 15   @ bitWidth 1 (Last Output Data Mode)  
        .equ AES_CFBS_Shift, 16   @ bitWidth 3 (Cipher Feedback Data Size)  
        .equ AES_CKEY_Shift, 20   @ bitWidth 4 (Countermeasure Key)  
 
    .equ AES_IER, AES_BASE + 0x10 @ (Interrupt Enable Register) 
        .equ AES_DATRDY_Shift, 0   @ bitWidth 1 (Data Ready Interrupt Enable)  
        .equ AES_URAD_Shift, 8   @ bitWidth 1 (Unspecified Register Access Detection Interrupt Enable)  
        .equ AES_TAGRDY_Shift, 16   @ bitWidth 1 (GCM Tag Ready Interrupt Enable)  
 
    .equ AES_IDR, AES_BASE + 0x14 @ (Interrupt Disable Register) 
        .equ AES_DATRDY_Shift, 0   @ bitWidth 1 (Data Ready Interrupt Disable)  
        .equ AES_URAD_Shift, 8   @ bitWidth 1 (Unspecified Register Access Detection Interrupt Disable)  
        .equ AES_TAGRDY_Shift, 16   @ bitWidth 1 (GCM Tag Ready Interrupt Disable)  
 
    .equ AES_IMR, AES_BASE + 0x18 @ (Interrupt Mask Register) 
        .equ AES_DATRDY_Shift, 0   @ bitWidth 1 (Data Ready Interrupt Mask)  
        .equ AES_URAD_Shift, 8   @ bitWidth 1 (Unspecified Register Access Detection Interrupt Mask)  
        .equ AES_TAGRDY_Shift, 16   @ bitWidth 1 (GCM Tag Ready Interrupt Mask)  
 
    .equ AES_ISR, AES_BASE + 0x1C @ (Interrupt Status Register) 
        .equ AES_DATRDY_Shift, 0   @ bitWidth 1 (Data Ready cleared by setting bit START or bit SWRST in AES_CR or by reading AES_ODATARx)  
        .equ AES_URAD_Shift, 8   @ bitWidth 1 (Unspecified Register Access Detection Status cleared by writing SWRST in AES_CR)  
        .equ AES_URAT_Shift, 12   @ bitWidth 4 (Unspecified Register Access cleared by writing SWRST in AES_CR)  
        .equ AES_TAGRDY_Shift, 16   @ bitWidth 1 (GCM Tag Ready)  
 
    .equ AES_KEYWR[%s], AES_BASE + 0x20 @ (Key Word Register 0) 
        .equ AES_KEYW_Shift, 0   @ bitWidth 32 (Key Word)  
 
    .equ AES_IDATAR[%s], AES_BASE + 0x40 @ (Input Data Register 0) 
        .equ AES_IDATA_Shift, 0   @ bitWidth 32 (Input Data Word)  
 
    .equ AES_ODATAR[%s], AES_BASE + 0x50 @ (Output Data Register 0) 
        .equ AES_ODATA_Shift, 0   @ bitWidth 32 (Output Data)  
 
    .equ AES_IVR[%s], AES_BASE + 0x60 @ (Initialization Vector Register 0) 
        .equ AES_IV_Shift, 0   @ bitWidth 32 (Initialization Vector)  
 
    .equ AES_AADLENR, AES_BASE + 0x70 @ (Additional Authenticated Data Length Register) 
        .equ AES_AADLEN_Shift, 0   @ bitWidth 32 (Additional Authenticated Data Length)  
 
    .equ AES_CLENR, AES_BASE + 0x74 @ (Plaintext/Ciphertext Length Register) 
        .equ AES_CLEN_Shift, 0   @ bitWidth 32 (Plaintext/Ciphertext Length)  
 
    .equ AES_GHASHR[%s], AES_BASE + 0x78 @ (GCM Intermediate Hash Word Register 0) 
        .equ AES_GHASH_Shift, 0   @ bitWidth 32 (Intermediate GCM Hash Word x)  
 
    .equ AES_TAGR[%s], AES_BASE + 0x88 @ (GCM Authentication Tag Word Register 0) 
        .equ AES_TAG_Shift, 0   @ bitWidth 32 (GCM Authentication Tag x)  
 
    .equ AES_CTRR, AES_BASE + 0x98 @ (GCM Encryption Counter Value Register) 
        .equ AES_CTR_Shift, 0   @ bitWidth 32 (GCM Encryption Counter)  
 
    .equ AES_GCMHR[%s], AES_BASE + 0x9C @ (GCM H Word Register 0) 
        .equ AES_H_Shift, 0   @ bitWidth 32 (GCM H Word x)  
 

@=========================== AFEC0 ===========================@
.equ AFEC0_BASE, 0x4003C000 @ (Analog Front-End Controller) 
    .equ AFEC0_CR, AFEC0_BASE + 0x00 @ (AFEC Control Register) 
        .equ AFEC0_SWRST_Shift, 0   @ bitWidth 1 (Software Reset)  
        .equ AFEC0_START_Shift, 1   @ bitWidth 1 (Start Conversion)  
 
    .equ AFEC0_MR, AFEC0_BASE + 0x04 @ (AFEC Mode Register) 
        .equ AFEC0_TRGEN_Shift, 0   @ bitWidth 1 (Trigger Enable)  
        .equ AFEC0_TRGSEL_Shift, 1   @ bitWidth 3 (Trigger Selection)  
        .equ AFEC0_SLEEP_Shift, 5   @ bitWidth 1 (Sleep Mode)  
        .equ AFEC0_FWUP_Shift, 6   @ bitWidth 1 (Fast Wake-up)  
        .equ AFEC0_FREERUN_Shift, 7   @ bitWidth 1 (Free Run Mode)  
        .equ AFEC0_PRESCAL_Shift, 8   @ bitWidth 8 (Prescaler Rate Selection)  
        .equ AFEC0_STARTUP_Shift, 16   @ bitWidth 4 (Start-up Time)  
        .equ AFEC0_ONE_Shift, 23   @ bitWidth 1 (One)  
        .equ AFEC0_TRACKTIM_Shift, 24   @ bitWidth 4 (Tracking Time)  
        .equ AFEC0_TRANSFER_Shift, 28   @ bitWidth 2 (Transfer Period)  
        .equ AFEC0_USEQ_Shift, 31   @ bitWidth 1 (User Sequence Enable)  
 
    .equ AFEC0_EMR, AFEC0_BASE + 0x08 @ (AFEC Extended Mode Register) 
        .equ AFEC0_CMPMODE_Shift, 0   @ bitWidth 2 (Comparison Mode)  
        .equ AFEC0_CMPSEL_Shift, 3   @ bitWidth 5 (Comparison Selected Channel)  
        .equ AFEC0_CMPALL_Shift, 9   @ bitWidth 1 (Compare All Channels)  
        .equ AFEC0_CMPFILTER_Shift, 12   @ bitWidth 2 (Compare Event Filtering)  
        .equ AFEC0_RES_Shift, 16   @ bitWidth 3 (Resolution)  
        .equ AFEC0_TAG_Shift, 24   @ bitWidth 1 (TAG of the AFEC_LDCR)  
        .equ AFEC0_STM_Shift, 25   @ bitWidth 1 (Single Trigger Mode)  
        .equ AFEC0_SIGNMODE_Shift, 28   @ bitWidth 2 (Sign Mode)  
 
    .equ AFEC0_SEQ1R, AFEC0_BASE + 0x0C @ (AFEC Channel Sequence 1 Register) 
        .equ AFEC0_USCH0_Shift, 0   @ bitWidth 4 (User Sequence Number 0)  
        .equ AFEC0_USCH1_Shift, 4   @ bitWidth 4 (User Sequence Number 1)  
        .equ AFEC0_USCH2_Shift, 8   @ bitWidth 4 (User Sequence Number 2)  
        .equ AFEC0_USCH3_Shift, 12   @ bitWidth 4 (User Sequence Number 3)  
        .equ AFEC0_USCH4_Shift, 16   @ bitWidth 4 (User Sequence Number 4)  
        .equ AFEC0_USCH5_Shift, 20   @ bitWidth 4 (User Sequence Number 5)  
        .equ AFEC0_USCH6_Shift, 24   @ bitWidth 4 (User Sequence Number 6)  
        .equ AFEC0_USCH7_Shift, 28   @ bitWidth 4 (User Sequence Number 7)  
 
    .equ AFEC0_SEQ2R, AFEC0_BASE + 0x10 @ (AFEC Channel Sequence 2 Register) 
        .equ AFEC0_USCH8_Shift, 0   @ bitWidth 4 (User Sequence Number 8)  
        .equ AFEC0_USCH9_Shift, 4   @ bitWidth 4 (User Sequence Number 9)  
        .equ AFEC0_USCH10_Shift, 8   @ bitWidth 4 (User Sequence Number 10)  
        .equ AFEC0_USCH11_Shift, 12   @ bitWidth 4 (User Sequence Number 11)  
 
    .equ AFEC0_CHER, AFEC0_BASE + 0x14 @ (AFEC Channel Enable Register) 
        .equ AFEC0_CH0_Shift, 0   @ bitWidth 1 (Channel 0 Enable)  
        .equ AFEC0_CH1_Shift, 1   @ bitWidth 1 (Channel 1 Enable)  
        .equ AFEC0_CH2_Shift, 2   @ bitWidth 1 (Channel 2 Enable)  
        .equ AFEC0_CH3_Shift, 3   @ bitWidth 1 (Channel 3 Enable)  
        .equ AFEC0_CH4_Shift, 4   @ bitWidth 1 (Channel 4 Enable)  
        .equ AFEC0_CH5_Shift, 5   @ bitWidth 1 (Channel 5 Enable)  
        .equ AFEC0_CH6_Shift, 6   @ bitWidth 1 (Channel 6 Enable)  
        .equ AFEC0_CH7_Shift, 7   @ bitWidth 1 (Channel 7 Enable)  
        .equ AFEC0_CH8_Shift, 8   @ bitWidth 1 (Channel 8 Enable)  
        .equ AFEC0_CH9_Shift, 9   @ bitWidth 1 (Channel 9 Enable)  
        .equ AFEC0_CH10_Shift, 10   @ bitWidth 1 (Channel 10 Enable)  
        .equ AFEC0_CH11_Shift, 11   @ bitWidth 1 (Channel 11 Enable)  
 
    .equ AFEC0_CHDR, AFEC0_BASE + 0x18 @ (AFEC Channel Disable Register) 
        .equ AFEC0_CH0_Shift, 0   @ bitWidth 1 (Channel 0 Disable)  
        .equ AFEC0_CH1_Shift, 1   @ bitWidth 1 (Channel 1 Disable)  
        .equ AFEC0_CH2_Shift, 2   @ bitWidth 1 (Channel 2 Disable)  
        .equ AFEC0_CH3_Shift, 3   @ bitWidth 1 (Channel 3 Disable)  
        .equ AFEC0_CH4_Shift, 4   @ bitWidth 1 (Channel 4 Disable)  
        .equ AFEC0_CH5_Shift, 5   @ bitWidth 1 (Channel 5 Disable)  
        .equ AFEC0_CH6_Shift, 6   @ bitWidth 1 (Channel 6 Disable)  
        .equ AFEC0_CH7_Shift, 7   @ bitWidth 1 (Channel 7 Disable)  
        .equ AFEC0_CH8_Shift, 8   @ bitWidth 1 (Channel 8 Disable)  
        .equ AFEC0_CH9_Shift, 9   @ bitWidth 1 (Channel 9 Disable)  
        .equ AFEC0_CH10_Shift, 10   @ bitWidth 1 (Channel 10 Disable)  
        .equ AFEC0_CH11_Shift, 11   @ bitWidth 1 (Channel 11 Disable)  
 
    .equ AFEC0_CHSR, AFEC0_BASE + 0x1C @ (AFEC Channel Status Register) 
        .equ AFEC0_CH0_Shift, 0   @ bitWidth 1 (Channel 0 Status)  
        .equ AFEC0_CH1_Shift, 1   @ bitWidth 1 (Channel 1 Status)  
        .equ AFEC0_CH2_Shift, 2   @ bitWidth 1 (Channel 2 Status)  
        .equ AFEC0_CH3_Shift, 3   @ bitWidth 1 (Channel 3 Status)  
        .equ AFEC0_CH4_Shift, 4   @ bitWidth 1 (Channel 4 Status)  
        .equ AFEC0_CH5_Shift, 5   @ bitWidth 1 (Channel 5 Status)  
        .equ AFEC0_CH6_Shift, 6   @ bitWidth 1 (Channel 6 Status)  
        .equ AFEC0_CH7_Shift, 7   @ bitWidth 1 (Channel 7 Status)  
        .equ AFEC0_CH8_Shift, 8   @ bitWidth 1 (Channel 8 Status)  
        .equ AFEC0_CH9_Shift, 9   @ bitWidth 1 (Channel 9 Status)  
        .equ AFEC0_CH10_Shift, 10   @ bitWidth 1 (Channel 10 Status)  
        .equ AFEC0_CH11_Shift, 11   @ bitWidth 1 (Channel 11 Status)  
 
    .equ AFEC0_LCDR, AFEC0_BASE + 0x20 @ (AFEC Last Converted Data Register) 
        .equ AFEC0_LDATA_Shift, 0   @ bitWidth 16 (Last Data Converted)  
        .equ AFEC0_CHNB_Shift, 24   @ bitWidth 4 (Channel Number)  
 
    .equ AFEC0_IER, AFEC0_BASE + 0x24 @ (AFEC Interrupt Enable Register) 
        .equ AFEC0_EOC0_Shift, 0   @ bitWidth 1 (End of Conversion Interrupt Enable 0)  
        .equ AFEC0_EOC1_Shift, 1   @ bitWidth 1 (End of Conversion Interrupt Enable 1)  
        .equ AFEC0_EOC2_Shift, 2   @ bitWidth 1 (End of Conversion Interrupt Enable 2)  
        .equ AFEC0_EOC3_Shift, 3   @ bitWidth 1 (End of Conversion Interrupt Enable 3)  
        .equ AFEC0_EOC4_Shift, 4   @ bitWidth 1 (End of Conversion Interrupt Enable 4)  
        .equ AFEC0_EOC5_Shift, 5   @ bitWidth 1 (End of Conversion Interrupt Enable 5)  
        .equ AFEC0_EOC6_Shift, 6   @ bitWidth 1 (End of Conversion Interrupt Enable 6)  
        .equ AFEC0_EOC7_Shift, 7   @ bitWidth 1 (End of Conversion Interrupt Enable 7)  
        .equ AFEC0_EOC8_Shift, 8   @ bitWidth 1 (End of Conversion Interrupt Enable 8)  
        .equ AFEC0_EOC9_Shift, 9   @ bitWidth 1 (End of Conversion Interrupt Enable 9)  
        .equ AFEC0_EOC10_Shift, 10   @ bitWidth 1 (End of Conversion Interrupt Enable 10)  
        .equ AFEC0_EOC11_Shift, 11   @ bitWidth 1 (End of Conversion Interrupt Enable 11)  
        .equ AFEC0_DRDY_Shift, 24   @ bitWidth 1 (Data Ready Interrupt Enable)  
        .equ AFEC0_GOVRE_Shift, 25   @ bitWidth 1 (General Overrun Error Interrupt Enable)  
        .equ AFEC0_COMPE_Shift, 26   @ bitWidth 1 (Comparison Event Interrupt Enable)  
        .equ AFEC0_TEMPCHG_Shift, 30   @ bitWidth 1 (Temperature Change Interrupt Enable)  
 
    .equ AFEC0_IDR, AFEC0_BASE + 0x28 @ (AFEC Interrupt Disable Register) 
        .equ AFEC0_EOC0_Shift, 0   @ bitWidth 1 (End of Conversion Interrupt Disable 0)  
        .equ AFEC0_EOC1_Shift, 1   @ bitWidth 1 (End of Conversion Interrupt Disable 1)  
        .equ AFEC0_EOC2_Shift, 2   @ bitWidth 1 (End of Conversion Interrupt Disable 2)  
        .equ AFEC0_EOC3_Shift, 3   @ bitWidth 1 (End of Conversion Interrupt Disable 3)  
        .equ AFEC0_EOC4_Shift, 4   @ bitWidth 1 (End of Conversion Interrupt Disable 4)  
        .equ AFEC0_EOC5_Shift, 5   @ bitWidth 1 (End of Conversion Interrupt Disable 5)  
        .equ AFEC0_EOC6_Shift, 6   @ bitWidth 1 (End of Conversion Interrupt Disable 6)  
        .equ AFEC0_EOC7_Shift, 7   @ bitWidth 1 (End of Conversion Interrupt Disable 7)  
        .equ AFEC0_EOC8_Shift, 8   @ bitWidth 1 (End of Conversion Interrupt Disable 8)  
        .equ AFEC0_EOC9_Shift, 9   @ bitWidth 1 (End of Conversion Interrupt Disable 9)  
        .equ AFEC0_EOC10_Shift, 10   @ bitWidth 1 (End of Conversion Interrupt Disable 10)  
        .equ AFEC0_EOC11_Shift, 11   @ bitWidth 1 (End of Conversion Interrupt Disable 11)  
        .equ AFEC0_DRDY_Shift, 24   @ bitWidth 1 (Data Ready Interrupt Disable)  
        .equ AFEC0_GOVRE_Shift, 25   @ bitWidth 1 (General Overrun Error Interrupt Disable)  
        .equ AFEC0_COMPE_Shift, 26   @ bitWidth 1 (Comparison Event Interrupt Disable)  
        .equ AFEC0_TEMPCHG_Shift, 30   @ bitWidth 1 (Temperature Change Interrupt Disable)  
 
    .equ AFEC0_IMR, AFEC0_BASE + 0x2C @ (AFEC Interrupt Mask Register) 
        .equ AFEC0_EOC0_Shift, 0   @ bitWidth 1 (End of Conversion Interrupt Mask 0)  
        .equ AFEC0_EOC1_Shift, 1   @ bitWidth 1 (End of Conversion Interrupt Mask 1)  
        .equ AFEC0_EOC2_Shift, 2   @ bitWidth 1 (End of Conversion Interrupt Mask 2)  
        .equ AFEC0_EOC3_Shift, 3   @ bitWidth 1 (End of Conversion Interrupt Mask 3)  
        .equ AFEC0_EOC4_Shift, 4   @ bitWidth 1 (End of Conversion Interrupt Mask 4)  
        .equ AFEC0_EOC5_Shift, 5   @ bitWidth 1 (End of Conversion Interrupt Mask 5)  
        .equ AFEC0_EOC6_Shift, 6   @ bitWidth 1 (End of Conversion Interrupt Mask 6)  
        .equ AFEC0_EOC7_Shift, 7   @ bitWidth 1 (End of Conversion Interrupt Mask 7)  
        .equ AFEC0_EOC8_Shift, 8   @ bitWidth 1 (End of Conversion Interrupt Mask 8)  
        .equ AFEC0_EOC9_Shift, 9   @ bitWidth 1 (End of Conversion Interrupt Mask 9)  
        .equ AFEC0_EOC10_Shift, 10   @ bitWidth 1 (End of Conversion Interrupt Mask 10)  
        .equ AFEC0_EOC11_Shift, 11   @ bitWidth 1 (End of Conversion Interrupt Mask 11)  
        .equ AFEC0_DRDY_Shift, 24   @ bitWidth 1 (Data Ready Interrupt Mask)  
        .equ AFEC0_GOVRE_Shift, 25   @ bitWidth 1 (General Overrun Error Interrupt Mask)  
        .equ AFEC0_COMPE_Shift, 26   @ bitWidth 1 (Comparison Event Interrupt Mask)  
        .equ AFEC0_TEMPCHG_Shift, 30   @ bitWidth 1 (Temperature Change Interrupt Mask)  
 
    .equ AFEC0_ISR, AFEC0_BASE + 0x30 @ (AFEC Interrupt Status Register) 
        .equ AFEC0_EOC0_Shift, 0   @ bitWidth 1 (End of Conversion 0 cleared by reading AFEC_CDRx)  
        .equ AFEC0_EOC1_Shift, 1   @ bitWidth 1 (End of Conversion 1 cleared by reading AFEC_CDRx)  
        .equ AFEC0_EOC2_Shift, 2   @ bitWidth 1 (End of Conversion 2 cleared by reading AFEC_CDRx)  
        .equ AFEC0_EOC3_Shift, 3   @ bitWidth 1 (End of Conversion 3 cleared by reading AFEC_CDRx)  
        .equ AFEC0_EOC4_Shift, 4   @ bitWidth 1 (End of Conversion 4 cleared by reading AFEC_CDRx)  
        .equ AFEC0_EOC5_Shift, 5   @ bitWidth 1 (End of Conversion 5 cleared by reading AFEC_CDRx)  
        .equ AFEC0_EOC6_Shift, 6   @ bitWidth 1 (End of Conversion 6 cleared by reading AFEC_CDRx)  
        .equ AFEC0_EOC7_Shift, 7   @ bitWidth 1 (End of Conversion 7 cleared by reading AFEC_CDRx)  
        .equ AFEC0_EOC8_Shift, 8   @ bitWidth 1 (End of Conversion 8 cleared by reading AFEC_CDRx)  
        .equ AFEC0_EOC9_Shift, 9   @ bitWidth 1 (End of Conversion 9 cleared by reading AFEC_CDRx)  
        .equ AFEC0_EOC10_Shift, 10   @ bitWidth 1 (End of Conversion 10 cleared by reading AFEC_CDRx)  
        .equ AFEC0_EOC11_Shift, 11   @ bitWidth 1 (End of Conversion 11 cleared by reading AFEC_CDRx)  
        .equ AFEC0_DRDY_Shift, 24   @ bitWidth 1 (Data Ready cleared by reading AFEC_LCDR)  
        .equ AFEC0_GOVRE_Shift, 25   @ bitWidth 1 (General Overrun Error cleared by reading AFEC_ISR)  
        .equ AFEC0_COMPE_Shift, 26   @ bitWidth 1 (Comparison Error cleared by reading AFEC_ISR)  
        .equ AFEC0_TEMPCHG_Shift, 30   @ bitWidth 1 (Temperature Change cleared on read)  
 
    .equ AFEC0_OVER, AFEC0_BASE + 0x4C @ (AFEC Overrun Status Register) 
        .equ AFEC0_OVRE0_Shift, 0   @ bitWidth 1 (Overrun Error 0)  
        .equ AFEC0_OVRE1_Shift, 1   @ bitWidth 1 (Overrun Error 1)  
        .equ AFEC0_OVRE2_Shift, 2   @ bitWidth 1 (Overrun Error 2)  
        .equ AFEC0_OVRE3_Shift, 3   @ bitWidth 1 (Overrun Error 3)  
        .equ AFEC0_OVRE4_Shift, 4   @ bitWidth 1 (Overrun Error 4)  
        .equ AFEC0_OVRE5_Shift, 5   @ bitWidth 1 (Overrun Error 5)  
        .equ AFEC0_OVRE6_Shift, 6   @ bitWidth 1 (Overrun Error 6)  
        .equ AFEC0_OVRE7_Shift, 7   @ bitWidth 1 (Overrun Error 7)  
        .equ AFEC0_OVRE8_Shift, 8   @ bitWidth 1 (Overrun Error 8)  
        .equ AFEC0_OVRE9_Shift, 9   @ bitWidth 1 (Overrun Error 9)  
        .equ AFEC0_OVRE10_Shift, 10   @ bitWidth 1 (Overrun Error 10)  
        .equ AFEC0_OVRE11_Shift, 11   @ bitWidth 1 (Overrun Error 11)  
 
    .equ AFEC0_CWR, AFEC0_BASE + 0x50 @ (AFEC Compare Window Register) 
        .equ AFEC0_LOWTHRES_Shift, 0   @ bitWidth 16 (Low Threshold)  
        .equ AFEC0_HIGHTHRES_Shift, 16   @ bitWidth 16 (High Threshold)  
 
    .equ AFEC0_CGR, AFEC0_BASE + 0x54 @ (AFEC Channel Gain Register) 
        .equ AFEC0_GAIN0_Shift, 0   @ bitWidth 2 (Gain for Channel 0)  
        .equ AFEC0_GAIN1_Shift, 2   @ bitWidth 2 (Gain for Channel 1)  
        .equ AFEC0_GAIN2_Shift, 4   @ bitWidth 2 (Gain for Channel 2)  
        .equ AFEC0_GAIN3_Shift, 6   @ bitWidth 2 (Gain for Channel 3)  
        .equ AFEC0_GAIN4_Shift, 8   @ bitWidth 2 (Gain for Channel 4)  
        .equ AFEC0_GAIN5_Shift, 10   @ bitWidth 2 (Gain for Channel 5)  
        .equ AFEC0_GAIN6_Shift, 12   @ bitWidth 2 (Gain for Channel 6)  
        .equ AFEC0_GAIN7_Shift, 14   @ bitWidth 2 (Gain for Channel 7)  
        .equ AFEC0_GAIN8_Shift, 16   @ bitWidth 2 (Gain for Channel 8)  
        .equ AFEC0_GAIN9_Shift, 18   @ bitWidth 2 (Gain for Channel 9)  
        .equ AFEC0_GAIN10_Shift, 20   @ bitWidth 2 (Gain for Channel 10)  
        .equ AFEC0_GAIN11_Shift, 22   @ bitWidth 2 (Gain for Channel 11)  
 
    .equ AFEC0_DIFFR, AFEC0_BASE + 0x60 @ (AFEC Channel Differential Register) 
        .equ AFEC0_DIFF0_Shift, 0   @ bitWidth 1 (Differential inputs for channel 0)  
        .equ AFEC0_DIFF1_Shift, 1   @ bitWidth 1 (Differential inputs for channel 1)  
        .equ AFEC0_DIFF2_Shift, 2   @ bitWidth 1 (Differential inputs for channel 2)  
        .equ AFEC0_DIFF3_Shift, 3   @ bitWidth 1 (Differential inputs for channel 3)  
        .equ AFEC0_DIFF4_Shift, 4   @ bitWidth 1 (Differential inputs for channel 4)  
        .equ AFEC0_DIFF5_Shift, 5   @ bitWidth 1 (Differential inputs for channel 5)  
        .equ AFEC0_DIFF6_Shift, 6   @ bitWidth 1 (Differential inputs for channel 6)  
        .equ AFEC0_DIFF7_Shift, 7   @ bitWidth 1 (Differential inputs for channel 7)  
        .equ AFEC0_DIFF8_Shift, 8   @ bitWidth 1 (Differential inputs for channel 8)  
        .equ AFEC0_DIFF9_Shift, 9   @ bitWidth 1 (Differential inputs for channel 9)  
        .equ AFEC0_DIFF10_Shift, 10   @ bitWidth 1 (Differential inputs for channel 10)  
        .equ AFEC0_DIFF11_Shift, 11   @ bitWidth 1 (Differential inputs for channel 11)  
 
    .equ AFEC0_CSELR, AFEC0_BASE + 0x64 @ (AFEC Channel Selection Register) 
        .equ AFEC0_CSEL_Shift, 0   @ bitWidth 4 (Channel Selection)  
 
    .equ AFEC0_CDR, AFEC0_BASE + 0x68 @ (AFEC Channel Data Register) 
        .equ AFEC0_DATA_Shift, 0   @ bitWidth 16 (Converted Data)  
 
    .equ AFEC0_COCR, AFEC0_BASE + 0x6C @ (AFEC Channel Offset Compensation Register) 
        .equ AFEC0_AOFF_Shift, 0   @ bitWidth 10 (Analog Offset)  
 
    .equ AFEC0_TEMPMR, AFEC0_BASE + 0x70 @ (AFEC Temperature Sensor Mode Register) 
        .equ AFEC0_RTCT_Shift, 0   @ bitWidth 1 (Temperature Sensor RTC Trigger Mode)  
        .equ AFEC0_TEMPCMPMOD_Shift, 4   @ bitWidth 2 (Temperature Comparison Mode)  
 
    .equ AFEC0_TEMPCWR, AFEC0_BASE + 0x74 @ (AFEC Temperature Compare Window Register) 
        .equ AFEC0_TLOWTHRES_Shift, 0   @ bitWidth 16 (Temperature Low Threshold)  
        .equ AFEC0_THIGHTHRES_Shift, 16   @ bitWidth 16 (Temperature High Threshold)  
 
    .equ AFEC0_ACR, AFEC0_BASE + 0x94 @ (AFEC Analog Control Register) 
        .equ AFEC0_PGA0EN_Shift, 2   @ bitWidth 1 (PGA0 Enable)  
        .equ AFEC0_PGA1EN_Shift, 3   @ bitWidth 1 (PGA1 Enable)  
        .equ AFEC0_IBCTL_Shift, 8   @ bitWidth 2 (AFE Bias Current Control)  
 
    .equ AFEC0_SHMR, AFEC0_BASE + 0xA0 @ (AFEC Sample & Hold Mode Register) 
        .equ AFEC0_DUAL0_Shift, 0   @ bitWidth 1 (Dual Sample & Hold for channel 0)  
        .equ AFEC0_DUAL1_Shift, 1   @ bitWidth 1 (Dual Sample & Hold for channel 1)  
        .equ AFEC0_DUAL2_Shift, 2   @ bitWidth 1 (Dual Sample & Hold for channel 2)  
        .equ AFEC0_DUAL3_Shift, 3   @ bitWidth 1 (Dual Sample & Hold for channel 3)  
        .equ AFEC0_DUAL4_Shift, 4   @ bitWidth 1 (Dual Sample & Hold for channel 4)  
        .equ AFEC0_DUAL5_Shift, 5   @ bitWidth 1 (Dual Sample & Hold for channel 5)  
        .equ AFEC0_DUAL6_Shift, 6   @ bitWidth 1 (Dual Sample & Hold for channel 6)  
        .equ AFEC0_DUAL7_Shift, 7   @ bitWidth 1 (Dual Sample & Hold for channel 7)  
        .equ AFEC0_DUAL8_Shift, 8   @ bitWidth 1 (Dual Sample & Hold for channel 8)  
        .equ AFEC0_DUAL9_Shift, 9   @ bitWidth 1 (Dual Sample & Hold for channel 9)  
        .equ AFEC0_DUAL10_Shift, 10   @ bitWidth 1 (Dual Sample & Hold for channel 10)  
        .equ AFEC0_DUAL11_Shift, 11   @ bitWidth 1 (Dual Sample & Hold for channel 11)  
 
    .equ AFEC0_COSR, AFEC0_BASE + 0xD0 @ (AFEC Correction Select Register) 
        .equ AFEC0_CSEL_Shift, 0   @ bitWidth 1 (Sample & Hold unit Correction Select)  
 
    .equ AFEC0_CVR, AFEC0_BASE + 0xD4 @ (AFEC Correction Values Register) 
        .equ AFEC0_OFFSETCORR_Shift, 0   @ bitWidth 16 (Offset Correction)  
        .equ AFEC0_GAINCORR_Shift, 16   @ bitWidth 16 (Gain Correction)  
 
    .equ AFEC0_CECR, AFEC0_BASE + 0xD8 @ (AFEC Channel Error Correction Register) 
        .equ AFEC0_ECORR0_Shift, 0   @ bitWidth 1 (Error Correction Enable for channel 0)  
        .equ AFEC0_ECORR1_Shift, 1   @ bitWidth 1 (Error Correction Enable for channel 1)  
        .equ AFEC0_ECORR2_Shift, 2   @ bitWidth 1 (Error Correction Enable for channel 2)  
        .equ AFEC0_ECORR3_Shift, 3   @ bitWidth 1 (Error Correction Enable for channel 3)  
        .equ AFEC0_ECORR4_Shift, 4   @ bitWidth 1 (Error Correction Enable for channel 4)  
        .equ AFEC0_ECORR5_Shift, 5   @ bitWidth 1 (Error Correction Enable for channel 5)  
        .equ AFEC0_ECORR6_Shift, 6   @ bitWidth 1 (Error Correction Enable for channel 6)  
        .equ AFEC0_ECORR7_Shift, 7   @ bitWidth 1 (Error Correction Enable for channel 7)  
        .equ AFEC0_ECORR8_Shift, 8   @ bitWidth 1 (Error Correction Enable for channel 8)  
        .equ AFEC0_ECORR9_Shift, 9   @ bitWidth 1 (Error Correction Enable for channel 9)  
        .equ AFEC0_ECORR10_Shift, 10   @ bitWidth 1 (Error Correction Enable for channel 10)  
        .equ AFEC0_ECORR11_Shift, 11   @ bitWidth 1 (Error Correction Enable for channel 11)  
 
    .equ AFEC0_WPMR, AFEC0_BASE + 0xE4 @ (AFEC Write Protection Mode Register) 
        .equ AFEC0_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ AFEC0_WPKEY_Shift, 8   @ bitWidth 24 (Write Protect KEY)  
 
    .equ AFEC0_WPSR, AFEC0_BASE + 0xE8 @ (AFEC Write Protection Status Register) 
        .equ AFEC0_WPVS_Shift, 0   @ bitWidth 1 (Write Protect Violation Status)  
        .equ AFEC0_WPVSRC_Shift, 8   @ bitWidth 16 (Write Protect Violation Source)  
 

@=========================== AFEC1 ===========================@
.equ AFEC1_BASE, 0x40064000 @ (Analog Front-End Controller) 
    .equ AFEC1_CR, AFEC1_BASE + 0x00 @ (AFEC Control Register) 
        .equ AFEC1_SWRST_Shift, 0   @ bitWidth 1 (Software Reset)  
        .equ AFEC1_START_Shift, 1   @ bitWidth 1 (Start Conversion)  
 
    .equ AFEC1_MR, AFEC1_BASE + 0x04 @ (AFEC Mode Register) 
        .equ AFEC1_TRGEN_Shift, 0   @ bitWidth 1 (Trigger Enable)  
        .equ AFEC1_TRGSEL_Shift, 1   @ bitWidth 3 (Trigger Selection)  
        .equ AFEC1_SLEEP_Shift, 5   @ bitWidth 1 (Sleep Mode)  
        .equ AFEC1_FWUP_Shift, 6   @ bitWidth 1 (Fast Wake-up)  
        .equ AFEC1_FREERUN_Shift, 7   @ bitWidth 1 (Free Run Mode)  
        .equ AFEC1_PRESCAL_Shift, 8   @ bitWidth 8 (Prescaler Rate Selection)  
        .equ AFEC1_STARTUP_Shift, 16   @ bitWidth 4 (Start-up Time)  
        .equ AFEC1_ONE_Shift, 23   @ bitWidth 1 (One)  
        .equ AFEC1_TRACKTIM_Shift, 24   @ bitWidth 4 (Tracking Time)  
        .equ AFEC1_TRANSFER_Shift, 28   @ bitWidth 2 (Transfer Period)  
        .equ AFEC1_USEQ_Shift, 31   @ bitWidth 1 (User Sequence Enable)  
 
    .equ AFEC1_EMR, AFEC1_BASE + 0x08 @ (AFEC Extended Mode Register) 
        .equ AFEC1_CMPMODE_Shift, 0   @ bitWidth 2 (Comparison Mode)  
        .equ AFEC1_CMPSEL_Shift, 3   @ bitWidth 5 (Comparison Selected Channel)  
        .equ AFEC1_CMPALL_Shift, 9   @ bitWidth 1 (Compare All Channels)  
        .equ AFEC1_CMPFILTER_Shift, 12   @ bitWidth 2 (Compare Event Filtering)  
        .equ AFEC1_RES_Shift, 16   @ bitWidth 3 (Resolution)  
        .equ AFEC1_TAG_Shift, 24   @ bitWidth 1 (TAG of the AFEC_LDCR)  
        .equ AFEC1_STM_Shift, 25   @ bitWidth 1 (Single Trigger Mode)  
        .equ AFEC1_SIGNMODE_Shift, 28   @ bitWidth 2 (Sign Mode)  
 
    .equ AFEC1_SEQ1R, AFEC1_BASE + 0x0C @ (AFEC Channel Sequence 1 Register) 
        .equ AFEC1_USCH0_Shift, 0   @ bitWidth 4 (User Sequence Number 0)  
        .equ AFEC1_USCH1_Shift, 4   @ bitWidth 4 (User Sequence Number 1)  
        .equ AFEC1_USCH2_Shift, 8   @ bitWidth 4 (User Sequence Number 2)  
        .equ AFEC1_USCH3_Shift, 12   @ bitWidth 4 (User Sequence Number 3)  
        .equ AFEC1_USCH4_Shift, 16   @ bitWidth 4 (User Sequence Number 4)  
        .equ AFEC1_USCH5_Shift, 20   @ bitWidth 4 (User Sequence Number 5)  
        .equ AFEC1_USCH6_Shift, 24   @ bitWidth 4 (User Sequence Number 6)  
        .equ AFEC1_USCH7_Shift, 28   @ bitWidth 4 (User Sequence Number 7)  
 
    .equ AFEC1_SEQ2R, AFEC1_BASE + 0x10 @ (AFEC Channel Sequence 2 Register) 
        .equ AFEC1_USCH8_Shift, 0   @ bitWidth 4 (User Sequence Number 8)  
        .equ AFEC1_USCH9_Shift, 4   @ bitWidth 4 (User Sequence Number 9)  
        .equ AFEC1_USCH10_Shift, 8   @ bitWidth 4 (User Sequence Number 10)  
        .equ AFEC1_USCH11_Shift, 12   @ bitWidth 4 (User Sequence Number 11)  
 
    .equ AFEC1_CHER, AFEC1_BASE + 0x14 @ (AFEC Channel Enable Register) 
        .equ AFEC1_CH0_Shift, 0   @ bitWidth 1 (Channel 0 Enable)  
        .equ AFEC1_CH1_Shift, 1   @ bitWidth 1 (Channel 1 Enable)  
        .equ AFEC1_CH2_Shift, 2   @ bitWidth 1 (Channel 2 Enable)  
        .equ AFEC1_CH3_Shift, 3   @ bitWidth 1 (Channel 3 Enable)  
        .equ AFEC1_CH4_Shift, 4   @ bitWidth 1 (Channel 4 Enable)  
        .equ AFEC1_CH5_Shift, 5   @ bitWidth 1 (Channel 5 Enable)  
        .equ AFEC1_CH6_Shift, 6   @ bitWidth 1 (Channel 6 Enable)  
        .equ AFEC1_CH7_Shift, 7   @ bitWidth 1 (Channel 7 Enable)  
        .equ AFEC1_CH8_Shift, 8   @ bitWidth 1 (Channel 8 Enable)  
        .equ AFEC1_CH9_Shift, 9   @ bitWidth 1 (Channel 9 Enable)  
        .equ AFEC1_CH10_Shift, 10   @ bitWidth 1 (Channel 10 Enable)  
        .equ AFEC1_CH11_Shift, 11   @ bitWidth 1 (Channel 11 Enable)  
 
    .equ AFEC1_CHDR, AFEC1_BASE + 0x18 @ (AFEC Channel Disable Register) 
        .equ AFEC1_CH0_Shift, 0   @ bitWidth 1 (Channel 0 Disable)  
        .equ AFEC1_CH1_Shift, 1   @ bitWidth 1 (Channel 1 Disable)  
        .equ AFEC1_CH2_Shift, 2   @ bitWidth 1 (Channel 2 Disable)  
        .equ AFEC1_CH3_Shift, 3   @ bitWidth 1 (Channel 3 Disable)  
        .equ AFEC1_CH4_Shift, 4   @ bitWidth 1 (Channel 4 Disable)  
        .equ AFEC1_CH5_Shift, 5   @ bitWidth 1 (Channel 5 Disable)  
        .equ AFEC1_CH6_Shift, 6   @ bitWidth 1 (Channel 6 Disable)  
        .equ AFEC1_CH7_Shift, 7   @ bitWidth 1 (Channel 7 Disable)  
        .equ AFEC1_CH8_Shift, 8   @ bitWidth 1 (Channel 8 Disable)  
        .equ AFEC1_CH9_Shift, 9   @ bitWidth 1 (Channel 9 Disable)  
        .equ AFEC1_CH10_Shift, 10   @ bitWidth 1 (Channel 10 Disable)  
        .equ AFEC1_CH11_Shift, 11   @ bitWidth 1 (Channel 11 Disable)  
 
    .equ AFEC1_CHSR, AFEC1_BASE + 0x1C @ (AFEC Channel Status Register) 
        .equ AFEC1_CH0_Shift, 0   @ bitWidth 1 (Channel 0 Status)  
        .equ AFEC1_CH1_Shift, 1   @ bitWidth 1 (Channel 1 Status)  
        .equ AFEC1_CH2_Shift, 2   @ bitWidth 1 (Channel 2 Status)  
        .equ AFEC1_CH3_Shift, 3   @ bitWidth 1 (Channel 3 Status)  
        .equ AFEC1_CH4_Shift, 4   @ bitWidth 1 (Channel 4 Status)  
        .equ AFEC1_CH5_Shift, 5   @ bitWidth 1 (Channel 5 Status)  
        .equ AFEC1_CH6_Shift, 6   @ bitWidth 1 (Channel 6 Status)  
        .equ AFEC1_CH7_Shift, 7   @ bitWidth 1 (Channel 7 Status)  
        .equ AFEC1_CH8_Shift, 8   @ bitWidth 1 (Channel 8 Status)  
        .equ AFEC1_CH9_Shift, 9   @ bitWidth 1 (Channel 9 Status)  
        .equ AFEC1_CH10_Shift, 10   @ bitWidth 1 (Channel 10 Status)  
        .equ AFEC1_CH11_Shift, 11   @ bitWidth 1 (Channel 11 Status)  
 
    .equ AFEC1_LCDR, AFEC1_BASE + 0x20 @ (AFEC Last Converted Data Register) 
        .equ AFEC1_LDATA_Shift, 0   @ bitWidth 16 (Last Data Converted)  
        .equ AFEC1_CHNB_Shift, 24   @ bitWidth 4 (Channel Number)  
 
    .equ AFEC1_IER, AFEC1_BASE + 0x24 @ (AFEC Interrupt Enable Register) 
        .equ AFEC1_EOC0_Shift, 0   @ bitWidth 1 (End of Conversion Interrupt Enable 0)  
        .equ AFEC1_EOC1_Shift, 1   @ bitWidth 1 (End of Conversion Interrupt Enable 1)  
        .equ AFEC1_EOC2_Shift, 2   @ bitWidth 1 (End of Conversion Interrupt Enable 2)  
        .equ AFEC1_EOC3_Shift, 3   @ bitWidth 1 (End of Conversion Interrupt Enable 3)  
        .equ AFEC1_EOC4_Shift, 4   @ bitWidth 1 (End of Conversion Interrupt Enable 4)  
        .equ AFEC1_EOC5_Shift, 5   @ bitWidth 1 (End of Conversion Interrupt Enable 5)  
        .equ AFEC1_EOC6_Shift, 6   @ bitWidth 1 (End of Conversion Interrupt Enable 6)  
        .equ AFEC1_EOC7_Shift, 7   @ bitWidth 1 (End of Conversion Interrupt Enable 7)  
        .equ AFEC1_EOC8_Shift, 8   @ bitWidth 1 (End of Conversion Interrupt Enable 8)  
        .equ AFEC1_EOC9_Shift, 9   @ bitWidth 1 (End of Conversion Interrupt Enable 9)  
        .equ AFEC1_EOC10_Shift, 10   @ bitWidth 1 (End of Conversion Interrupt Enable 10)  
        .equ AFEC1_EOC11_Shift, 11   @ bitWidth 1 (End of Conversion Interrupt Enable 11)  
        .equ AFEC1_DRDY_Shift, 24   @ bitWidth 1 (Data Ready Interrupt Enable)  
        .equ AFEC1_GOVRE_Shift, 25   @ bitWidth 1 (General Overrun Error Interrupt Enable)  
        .equ AFEC1_COMPE_Shift, 26   @ bitWidth 1 (Comparison Event Interrupt Enable)  
        .equ AFEC1_TEMPCHG_Shift, 30   @ bitWidth 1 (Temperature Change Interrupt Enable)  
 
    .equ AFEC1_IDR, AFEC1_BASE + 0x28 @ (AFEC Interrupt Disable Register) 
        .equ AFEC1_EOC0_Shift, 0   @ bitWidth 1 (End of Conversion Interrupt Disable 0)  
        .equ AFEC1_EOC1_Shift, 1   @ bitWidth 1 (End of Conversion Interrupt Disable 1)  
        .equ AFEC1_EOC2_Shift, 2   @ bitWidth 1 (End of Conversion Interrupt Disable 2)  
        .equ AFEC1_EOC3_Shift, 3   @ bitWidth 1 (End of Conversion Interrupt Disable 3)  
        .equ AFEC1_EOC4_Shift, 4   @ bitWidth 1 (End of Conversion Interrupt Disable 4)  
        .equ AFEC1_EOC5_Shift, 5   @ bitWidth 1 (End of Conversion Interrupt Disable 5)  
        .equ AFEC1_EOC6_Shift, 6   @ bitWidth 1 (End of Conversion Interrupt Disable 6)  
        .equ AFEC1_EOC7_Shift, 7   @ bitWidth 1 (End of Conversion Interrupt Disable 7)  
        .equ AFEC1_EOC8_Shift, 8   @ bitWidth 1 (End of Conversion Interrupt Disable 8)  
        .equ AFEC1_EOC9_Shift, 9   @ bitWidth 1 (End of Conversion Interrupt Disable 9)  
        .equ AFEC1_EOC10_Shift, 10   @ bitWidth 1 (End of Conversion Interrupt Disable 10)  
        .equ AFEC1_EOC11_Shift, 11   @ bitWidth 1 (End of Conversion Interrupt Disable 11)  
        .equ AFEC1_DRDY_Shift, 24   @ bitWidth 1 (Data Ready Interrupt Disable)  
        .equ AFEC1_GOVRE_Shift, 25   @ bitWidth 1 (General Overrun Error Interrupt Disable)  
        .equ AFEC1_COMPE_Shift, 26   @ bitWidth 1 (Comparison Event Interrupt Disable)  
        .equ AFEC1_TEMPCHG_Shift, 30   @ bitWidth 1 (Temperature Change Interrupt Disable)  
 
    .equ AFEC1_IMR, AFEC1_BASE + 0x2C @ (AFEC Interrupt Mask Register) 
        .equ AFEC1_EOC0_Shift, 0   @ bitWidth 1 (End of Conversion Interrupt Mask 0)  
        .equ AFEC1_EOC1_Shift, 1   @ bitWidth 1 (End of Conversion Interrupt Mask 1)  
        .equ AFEC1_EOC2_Shift, 2   @ bitWidth 1 (End of Conversion Interrupt Mask 2)  
        .equ AFEC1_EOC3_Shift, 3   @ bitWidth 1 (End of Conversion Interrupt Mask 3)  
        .equ AFEC1_EOC4_Shift, 4   @ bitWidth 1 (End of Conversion Interrupt Mask 4)  
        .equ AFEC1_EOC5_Shift, 5   @ bitWidth 1 (End of Conversion Interrupt Mask 5)  
        .equ AFEC1_EOC6_Shift, 6   @ bitWidth 1 (End of Conversion Interrupt Mask 6)  
        .equ AFEC1_EOC7_Shift, 7   @ bitWidth 1 (End of Conversion Interrupt Mask 7)  
        .equ AFEC1_EOC8_Shift, 8   @ bitWidth 1 (End of Conversion Interrupt Mask 8)  
        .equ AFEC1_EOC9_Shift, 9   @ bitWidth 1 (End of Conversion Interrupt Mask 9)  
        .equ AFEC1_EOC10_Shift, 10   @ bitWidth 1 (End of Conversion Interrupt Mask 10)  
        .equ AFEC1_EOC11_Shift, 11   @ bitWidth 1 (End of Conversion Interrupt Mask 11)  
        .equ AFEC1_DRDY_Shift, 24   @ bitWidth 1 (Data Ready Interrupt Mask)  
        .equ AFEC1_GOVRE_Shift, 25   @ bitWidth 1 (General Overrun Error Interrupt Mask)  
        .equ AFEC1_COMPE_Shift, 26   @ bitWidth 1 (Comparison Event Interrupt Mask)  
        .equ AFEC1_TEMPCHG_Shift, 30   @ bitWidth 1 (Temperature Change Interrupt Mask)  
 
    .equ AFEC1_ISR, AFEC1_BASE + 0x30 @ (AFEC Interrupt Status Register) 
        .equ AFEC1_EOC0_Shift, 0   @ bitWidth 1 (End of Conversion 0 cleared by reading AFEC_CDRx)  
        .equ AFEC1_EOC1_Shift, 1   @ bitWidth 1 (End of Conversion 1 cleared by reading AFEC_CDRx)  
        .equ AFEC1_EOC2_Shift, 2   @ bitWidth 1 (End of Conversion 2 cleared by reading AFEC_CDRx)  
        .equ AFEC1_EOC3_Shift, 3   @ bitWidth 1 (End of Conversion 3 cleared by reading AFEC_CDRx)  
        .equ AFEC1_EOC4_Shift, 4   @ bitWidth 1 (End of Conversion 4 cleared by reading AFEC_CDRx)  
        .equ AFEC1_EOC5_Shift, 5   @ bitWidth 1 (End of Conversion 5 cleared by reading AFEC_CDRx)  
        .equ AFEC1_EOC6_Shift, 6   @ bitWidth 1 (End of Conversion 6 cleared by reading AFEC_CDRx)  
        .equ AFEC1_EOC7_Shift, 7   @ bitWidth 1 (End of Conversion 7 cleared by reading AFEC_CDRx)  
        .equ AFEC1_EOC8_Shift, 8   @ bitWidth 1 (End of Conversion 8 cleared by reading AFEC_CDRx)  
        .equ AFEC1_EOC9_Shift, 9   @ bitWidth 1 (End of Conversion 9 cleared by reading AFEC_CDRx)  
        .equ AFEC1_EOC10_Shift, 10   @ bitWidth 1 (End of Conversion 10 cleared by reading AFEC_CDRx)  
        .equ AFEC1_EOC11_Shift, 11   @ bitWidth 1 (End of Conversion 11 cleared by reading AFEC_CDRx)  
        .equ AFEC1_DRDY_Shift, 24   @ bitWidth 1 (Data Ready cleared by reading AFEC_LCDR)  
        .equ AFEC1_GOVRE_Shift, 25   @ bitWidth 1 (General Overrun Error cleared by reading AFEC_ISR)  
        .equ AFEC1_COMPE_Shift, 26   @ bitWidth 1 (Comparison Error cleared by reading AFEC_ISR)  
        .equ AFEC1_TEMPCHG_Shift, 30   @ bitWidth 1 (Temperature Change cleared on read)  
 
    .equ AFEC1_OVER, AFEC1_BASE + 0x4C @ (AFEC Overrun Status Register) 
        .equ AFEC1_OVRE0_Shift, 0   @ bitWidth 1 (Overrun Error 0)  
        .equ AFEC1_OVRE1_Shift, 1   @ bitWidth 1 (Overrun Error 1)  
        .equ AFEC1_OVRE2_Shift, 2   @ bitWidth 1 (Overrun Error 2)  
        .equ AFEC1_OVRE3_Shift, 3   @ bitWidth 1 (Overrun Error 3)  
        .equ AFEC1_OVRE4_Shift, 4   @ bitWidth 1 (Overrun Error 4)  
        .equ AFEC1_OVRE5_Shift, 5   @ bitWidth 1 (Overrun Error 5)  
        .equ AFEC1_OVRE6_Shift, 6   @ bitWidth 1 (Overrun Error 6)  
        .equ AFEC1_OVRE7_Shift, 7   @ bitWidth 1 (Overrun Error 7)  
        .equ AFEC1_OVRE8_Shift, 8   @ bitWidth 1 (Overrun Error 8)  
        .equ AFEC1_OVRE9_Shift, 9   @ bitWidth 1 (Overrun Error 9)  
        .equ AFEC1_OVRE10_Shift, 10   @ bitWidth 1 (Overrun Error 10)  
        .equ AFEC1_OVRE11_Shift, 11   @ bitWidth 1 (Overrun Error 11)  
 
    .equ AFEC1_CWR, AFEC1_BASE + 0x50 @ (AFEC Compare Window Register) 
        .equ AFEC1_LOWTHRES_Shift, 0   @ bitWidth 16 (Low Threshold)  
        .equ AFEC1_HIGHTHRES_Shift, 16   @ bitWidth 16 (High Threshold)  
 
    .equ AFEC1_CGR, AFEC1_BASE + 0x54 @ (AFEC Channel Gain Register) 
        .equ AFEC1_GAIN0_Shift, 0   @ bitWidth 2 (Gain for Channel 0)  
        .equ AFEC1_GAIN1_Shift, 2   @ bitWidth 2 (Gain for Channel 1)  
        .equ AFEC1_GAIN2_Shift, 4   @ bitWidth 2 (Gain for Channel 2)  
        .equ AFEC1_GAIN3_Shift, 6   @ bitWidth 2 (Gain for Channel 3)  
        .equ AFEC1_GAIN4_Shift, 8   @ bitWidth 2 (Gain for Channel 4)  
        .equ AFEC1_GAIN5_Shift, 10   @ bitWidth 2 (Gain for Channel 5)  
        .equ AFEC1_GAIN6_Shift, 12   @ bitWidth 2 (Gain for Channel 6)  
        .equ AFEC1_GAIN7_Shift, 14   @ bitWidth 2 (Gain for Channel 7)  
        .equ AFEC1_GAIN8_Shift, 16   @ bitWidth 2 (Gain for Channel 8)  
        .equ AFEC1_GAIN9_Shift, 18   @ bitWidth 2 (Gain for Channel 9)  
        .equ AFEC1_GAIN10_Shift, 20   @ bitWidth 2 (Gain for Channel 10)  
        .equ AFEC1_GAIN11_Shift, 22   @ bitWidth 2 (Gain for Channel 11)  
 
    .equ AFEC1_DIFFR, AFEC1_BASE + 0x60 @ (AFEC Channel Differential Register) 
        .equ AFEC1_DIFF0_Shift, 0   @ bitWidth 1 (Differential inputs for channel 0)  
        .equ AFEC1_DIFF1_Shift, 1   @ bitWidth 1 (Differential inputs for channel 1)  
        .equ AFEC1_DIFF2_Shift, 2   @ bitWidth 1 (Differential inputs for channel 2)  
        .equ AFEC1_DIFF3_Shift, 3   @ bitWidth 1 (Differential inputs for channel 3)  
        .equ AFEC1_DIFF4_Shift, 4   @ bitWidth 1 (Differential inputs for channel 4)  
        .equ AFEC1_DIFF5_Shift, 5   @ bitWidth 1 (Differential inputs for channel 5)  
        .equ AFEC1_DIFF6_Shift, 6   @ bitWidth 1 (Differential inputs for channel 6)  
        .equ AFEC1_DIFF7_Shift, 7   @ bitWidth 1 (Differential inputs for channel 7)  
        .equ AFEC1_DIFF8_Shift, 8   @ bitWidth 1 (Differential inputs for channel 8)  
        .equ AFEC1_DIFF9_Shift, 9   @ bitWidth 1 (Differential inputs for channel 9)  
        .equ AFEC1_DIFF10_Shift, 10   @ bitWidth 1 (Differential inputs for channel 10)  
        .equ AFEC1_DIFF11_Shift, 11   @ bitWidth 1 (Differential inputs for channel 11)  
 
    .equ AFEC1_CSELR, AFEC1_BASE + 0x64 @ (AFEC Channel Selection Register) 
        .equ AFEC1_CSEL_Shift, 0   @ bitWidth 4 (Channel Selection)  
 
    .equ AFEC1_CDR, AFEC1_BASE + 0x68 @ (AFEC Channel Data Register) 
        .equ AFEC1_DATA_Shift, 0   @ bitWidth 16 (Converted Data)  
 
    .equ AFEC1_COCR, AFEC1_BASE + 0x6C @ (AFEC Channel Offset Compensation Register) 
        .equ AFEC1_AOFF_Shift, 0   @ bitWidth 10 (Analog Offset)  
 
    .equ AFEC1_TEMPMR, AFEC1_BASE + 0x70 @ (AFEC Temperature Sensor Mode Register) 
        .equ AFEC1_RTCT_Shift, 0   @ bitWidth 1 (Temperature Sensor RTC Trigger Mode)  
        .equ AFEC1_TEMPCMPMOD_Shift, 4   @ bitWidth 2 (Temperature Comparison Mode)  
 
    .equ AFEC1_TEMPCWR, AFEC1_BASE + 0x74 @ (AFEC Temperature Compare Window Register) 
        .equ AFEC1_TLOWTHRES_Shift, 0   @ bitWidth 16 (Temperature Low Threshold)  
        .equ AFEC1_THIGHTHRES_Shift, 16   @ bitWidth 16 (Temperature High Threshold)  
 
    .equ AFEC1_ACR, AFEC1_BASE + 0x94 @ (AFEC Analog Control Register) 
        .equ AFEC1_PGA0EN_Shift, 2   @ bitWidth 1 (PGA0 Enable)  
        .equ AFEC1_PGA1EN_Shift, 3   @ bitWidth 1 (PGA1 Enable)  
        .equ AFEC1_IBCTL_Shift, 8   @ bitWidth 2 (AFE Bias Current Control)  
 
    .equ AFEC1_SHMR, AFEC1_BASE + 0xA0 @ (AFEC Sample & Hold Mode Register) 
        .equ AFEC1_DUAL0_Shift, 0   @ bitWidth 1 (Dual Sample & Hold for channel 0)  
        .equ AFEC1_DUAL1_Shift, 1   @ bitWidth 1 (Dual Sample & Hold for channel 1)  
        .equ AFEC1_DUAL2_Shift, 2   @ bitWidth 1 (Dual Sample & Hold for channel 2)  
        .equ AFEC1_DUAL3_Shift, 3   @ bitWidth 1 (Dual Sample & Hold for channel 3)  
        .equ AFEC1_DUAL4_Shift, 4   @ bitWidth 1 (Dual Sample & Hold for channel 4)  
        .equ AFEC1_DUAL5_Shift, 5   @ bitWidth 1 (Dual Sample & Hold for channel 5)  
        .equ AFEC1_DUAL6_Shift, 6   @ bitWidth 1 (Dual Sample & Hold for channel 6)  
        .equ AFEC1_DUAL7_Shift, 7   @ bitWidth 1 (Dual Sample & Hold for channel 7)  
        .equ AFEC1_DUAL8_Shift, 8   @ bitWidth 1 (Dual Sample & Hold for channel 8)  
        .equ AFEC1_DUAL9_Shift, 9   @ bitWidth 1 (Dual Sample & Hold for channel 9)  
        .equ AFEC1_DUAL10_Shift, 10   @ bitWidth 1 (Dual Sample & Hold for channel 10)  
        .equ AFEC1_DUAL11_Shift, 11   @ bitWidth 1 (Dual Sample & Hold for channel 11)  
 
    .equ AFEC1_COSR, AFEC1_BASE + 0xD0 @ (AFEC Correction Select Register) 
        .equ AFEC1_CSEL_Shift, 0   @ bitWidth 1 (Sample & Hold unit Correction Select)  
 
    .equ AFEC1_CVR, AFEC1_BASE + 0xD4 @ (AFEC Correction Values Register) 
        .equ AFEC1_OFFSETCORR_Shift, 0   @ bitWidth 16 (Offset Correction)  
        .equ AFEC1_GAINCORR_Shift, 16   @ bitWidth 16 (Gain Correction)  
 
    .equ AFEC1_CECR, AFEC1_BASE + 0xD8 @ (AFEC Channel Error Correction Register) 
        .equ AFEC1_ECORR0_Shift, 0   @ bitWidth 1 (Error Correction Enable for channel 0)  
        .equ AFEC1_ECORR1_Shift, 1   @ bitWidth 1 (Error Correction Enable for channel 1)  
        .equ AFEC1_ECORR2_Shift, 2   @ bitWidth 1 (Error Correction Enable for channel 2)  
        .equ AFEC1_ECORR3_Shift, 3   @ bitWidth 1 (Error Correction Enable for channel 3)  
        .equ AFEC1_ECORR4_Shift, 4   @ bitWidth 1 (Error Correction Enable for channel 4)  
        .equ AFEC1_ECORR5_Shift, 5   @ bitWidth 1 (Error Correction Enable for channel 5)  
        .equ AFEC1_ECORR6_Shift, 6   @ bitWidth 1 (Error Correction Enable for channel 6)  
        .equ AFEC1_ECORR7_Shift, 7   @ bitWidth 1 (Error Correction Enable for channel 7)  
        .equ AFEC1_ECORR8_Shift, 8   @ bitWidth 1 (Error Correction Enable for channel 8)  
        .equ AFEC1_ECORR9_Shift, 9   @ bitWidth 1 (Error Correction Enable for channel 9)  
        .equ AFEC1_ECORR10_Shift, 10   @ bitWidth 1 (Error Correction Enable for channel 10)  
        .equ AFEC1_ECORR11_Shift, 11   @ bitWidth 1 (Error Correction Enable for channel 11)  
 
    .equ AFEC1_WPMR, AFEC1_BASE + 0xE4 @ (AFEC Write Protection Mode Register) 
        .equ AFEC1_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ AFEC1_WPKEY_Shift, 8   @ bitWidth 24 (Write Protect KEY)  
 
    .equ AFEC1_WPSR, AFEC1_BASE + 0xE8 @ (AFEC Write Protection Status Register) 
        .equ AFEC1_WPVS_Shift, 0   @ bitWidth 1 (Write Protect Violation Status)  
        .equ AFEC1_WPVSRC_Shift, 8   @ bitWidth 16 (Write Protect Violation Source)  
 

@=========================== CHIPID ===========================@
.equ CHIPID_BASE, 0x400E0940 @ (Chip Identifier) 
    .equ CHIPID_CIDR, CHIPID_BASE + 0x0 @ (Chip ID Register) 
        .equ CHIPID_VERSION_Shift, 0   @ bitWidth 5 (Version of the Device)  
        .equ CHIPID_EPROC_Shift, 5   @ bitWidth 3 (Embedded Processor)  
        .equ CHIPID_NVPSIZ_Shift, 8   @ bitWidth 4 (Nonvolatile Program Memory Size)  
        .equ CHIPID_NVPSIZ2_Shift, 12   @ bitWidth 4 (Second Nonvolatile Program Memory Size)  
        .equ CHIPID_SRAMSIZ_Shift, 16   @ bitWidth 4 (Internal SRAM Size)  
        .equ CHIPID_ARCH_Shift, 20   @ bitWidth 8 (Architecture Identifier)  
        .equ CHIPID_NVPTYP_Shift, 28   @ bitWidth 3 (Nonvolatile Program Memory Type)  
        .equ CHIPID_EXT_Shift, 31   @ bitWidth 1 (Extension Flag)  
 
    .equ CHIPID_EXID, CHIPID_BASE + 0x4 @ (Chip ID Extension Register) 
        .equ CHIPID_EXID_Shift, 0   @ bitWidth 32 (Chip ID Extension)  
 

@=========================== DACC ===========================@
.equ DACC_BASE, 0x40040000 @ (Digital-to-Analog Converter Controller) 
    .equ DACC_CR, DACC_BASE + 0x00 @ (Control Register) 
        .equ DACC_SWRST_Shift, 0   @ bitWidth 1 (Software Reset)  
 
    .equ DACC_MR, DACC_BASE + 0x04 @ (Mode Register) 
        .equ DACC_MAXS0_Shift, 0   @ bitWidth 1 (Max Speed Mode for Channel 0)  
        .equ DACC_MAXS1_Shift, 1   @ bitWidth 1 (Max Speed Mode for Channel 1)  
        .equ DACC_WORD_Shift, 4   @ bitWidth 1 (Word Transfer Mode)  
        .equ DACC_ZERO_Shift, 5   @ bitWidth 1 (Must always be written to 0.)  
        .equ DACC_DIFF_Shift, 23   @ bitWidth 1 (Differential Mode)  
        .equ DACC_PRESCALER_Shift, 24   @ bitWidth 4 (Peripheral Clock to DAC Clock Ratio)  
 
    .equ DACC_TRIGR, DACC_BASE + 0x08 @ (Trigger Register) 
        .equ DACC_TRGEN0_Shift, 0   @ bitWidth 1 (Trigger Enable of Channel 0)  
        .equ DACC_TRGEN1_Shift, 1   @ bitWidth 1 (Trigger Enable of Channel 1)  
        .equ DACC_TRGSEL0_Shift, 4   @ bitWidth 3 (Trigger Selection of Channel 0)  
        .equ DACC_TRGSEL1_Shift, 8   @ bitWidth 3 (Trigger Selection of Channel 1)  
        .equ DACC_OSR0_Shift, 16   @ bitWidth 3 (Over Sampling Ratio of Channel 0)  
        .equ DACC_OSR1_Shift, 20   @ bitWidth 3 (Over Sampling Ratio of Channel 1)  
 
    .equ DACC_CHER, DACC_BASE + 0x10 @ (Channel Enable Register) 
        .equ DACC_CH0_Shift, 0   @ bitWidth 1 (Channel 0 Enable)  
        .equ DACC_CH1_Shift, 1   @ bitWidth 1 (Channel 1 Enable)  
 
    .equ DACC_CHDR, DACC_BASE + 0x14 @ (Channel Disable Register) 
        .equ DACC_CH0_Shift, 0   @ bitWidth 1 (Channel 0 Disable)  
        .equ DACC_CH1_Shift, 1   @ bitWidth 1 (Channel 1 Disable)  
 
    .equ DACC_CHSR, DACC_BASE + 0x18 @ (Channel Status Register) 
        .equ DACC_CH0_Shift, 0   @ bitWidth 1 (Channel 0 Status)  
        .equ DACC_CH1_Shift, 1   @ bitWidth 1 (Channel 1 Status)  
        .equ DACC_DACRDY0_Shift, 8   @ bitWidth 1 (DAC Ready Flag)  
        .equ DACC_DACRDY1_Shift, 9   @ bitWidth 1 (DAC Ready Flag)  
 
    .equ DACC_CDR[%s], DACC_BASE + 0x1C @ (Conversion Data Register 0) 
        .equ DACC_DATA0_Shift, 0   @ bitWidth 16 (Data to Convert for channel 0)  
        .equ DACC_DATA1_Shift, 16   @ bitWidth 16 (Data to Convert for channel 1)  
 
    .equ DACC_IER, DACC_BASE + 0x24 @ (Interrupt Enable Register) 
        .equ DACC_TXRDY0_Shift, 0   @ bitWidth 1 (Transmit Ready Interrupt Enable of channel 0)  
        .equ DACC_TXRDY1_Shift, 1   @ bitWidth 1 (Transmit Ready Interrupt Enable of channel 1)  
        .equ DACC_EOC0_Shift, 4   @ bitWidth 1 (End of Conversion Interrupt Enable of channel 0)  
        .equ DACC_EOC1_Shift, 5   @ bitWidth 1 (End of Conversion Interrupt Enable of channel 1)  
 
    .equ DACC_IDR, DACC_BASE + 0x28 @ (Interrupt Disable Register) 
        .equ DACC_TXRDY0_Shift, 0   @ bitWidth 1 (Transmit Ready Interrupt Disable of channel 0)  
        .equ DACC_TXRDY1_Shift, 1   @ bitWidth 1 (Transmit Ready Interrupt Disable of channel 1)  
        .equ DACC_EOC0_Shift, 4   @ bitWidth 1 (End of Conversion Interrupt Disable of channel 0)  
        .equ DACC_EOC1_Shift, 5   @ bitWidth 1 (End of Conversion Interrupt Disable of channel 1)  
 
    .equ DACC_IMR, DACC_BASE + 0x2C @ (Interrupt Mask Register) 
        .equ DACC_TXRDY0_Shift, 0   @ bitWidth 1 (Transmit Ready Interrupt Mask of channel 0)  
        .equ DACC_TXRDY1_Shift, 1   @ bitWidth 1 (Transmit Ready Interrupt Mask of channel 1)  
        .equ DACC_EOC0_Shift, 4   @ bitWidth 1 (End of Conversion Interrupt Mask of channel 0)  
        .equ DACC_EOC1_Shift, 5   @ bitWidth 1 (End of Conversion Interrupt Mask of channel 1)  
 
    .equ DACC_ISR, DACC_BASE + 0x30 @ (Interrupt Status Register) 
        .equ DACC_TXRDY0_Shift, 0   @ bitWidth 1 (Transmit Ready Interrupt Flag of channel 0)  
        .equ DACC_TXRDY1_Shift, 1   @ bitWidth 1 (Transmit Ready Interrupt Flag of channel 1)  
        .equ DACC_EOC0_Shift, 4   @ bitWidth 1 (End of Conversion Interrupt Flag of channel 0)  
        .equ DACC_EOC1_Shift, 5   @ bitWidth 1 (End of Conversion Interrupt Flag of channel 1)  
 
    .equ DACC_ACR, DACC_BASE + 0x94 @ (Analog Current Register) 
        .equ DACC_IBCTLCH0_Shift, 0   @ bitWidth 2 (Analog Output Current Control)  
        .equ DACC_IBCTLCH1_Shift, 2   @ bitWidth 2 (Analog Output Current Control)  
 
    .equ DACC_WPMR, DACC_BASE + 0xE4 @ (Write Protection Mode Register) 
        .equ DACC_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ DACC_WPKEY_Shift, 8   @ bitWidth 24 (Write Protect Key)  
 
    .equ DACC_WPSR, DACC_BASE + 0xE8 @ (Write Protection Status Register) 
        .equ DACC_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ DACC_WPVSRC_Shift, 8   @ bitWidth 8 (Write Protection Violation Source)  
 

@=========================== EFC ===========================@
.equ EFC_BASE, 0x400E0C00 @ (Embedded Flash Controller) 
    .equ EFC_EEFC_FMR, EFC_BASE + 0x00 @ (EEFC Flash Mode Register) 
        .equ EFC_FRDY_Shift, 0   @ bitWidth 1 (Flash Ready Interrupt Enable)  
        .equ EFC_FWS_Shift, 8   @ bitWidth 4 (Flash Wait State)  
        .equ EFC_SCOD_Shift, 16   @ bitWidth 1 (Sequential Code Optimization Disable)  
        .equ EFC_CLOE_Shift, 26   @ bitWidth 1 (Code Loop Optimization Enable)  
 
    .equ EFC_EEFC_FCR, EFC_BASE + 0x04 @ (EEFC Flash Command Register) 
        .equ EFC_FCMD_Shift, 0   @ bitWidth 8 (Flash Command)  
        .equ EFC_FARG_Shift, 8   @ bitWidth 16 (Flash Command Argument)  
        .equ EFC_FKEY_Shift, 24   @ bitWidth 8 (Flash Writing Protection Key)  
 
    .equ EFC_EEFC_FSR, EFC_BASE + 0x08 @ (EEFC Flash Status Register) 
        .equ EFC_FRDY_Shift, 0   @ bitWidth 1 (Flash Ready Status cleared when Flash is busy)  
        .equ EFC_FCMDE_Shift, 1   @ bitWidth 1 (Flash Command Error Status cleared on read or by writing EEFC_FCR)  
        .equ EFC_FLOCKE_Shift, 2   @ bitWidth 1 (Flash Lock Error Status cleared on read)  
        .equ EFC_FLERR_Shift, 3   @ bitWidth 1 (Flash Error Status cleared when a programming operation starts)  
        .equ EFC_UECCELSB_Shift, 16   @ bitWidth 1 (Unique ECC Error on LSB Part of the Memory Flash Data Bus cleared on read)  
        .equ EFC_MECCELSB_Shift, 17   @ bitWidth 1 (Multiple ECC Error on LSB Part of the Memory Flash Data Bus cleared on read)  
        .equ EFC_UECCEMSB_Shift, 18   @ bitWidth 1 (Unique ECC Error on MSB Part of the Memory Flash Data Bus cleared on read)  
        .equ EFC_MECCEMSB_Shift, 19   @ bitWidth 1 (Multiple ECC Error on MSB Part of the Memory Flash Data Bus cleared on read)  
 
    .equ EFC_EEFC_FRR, EFC_BASE + 0x0C @ (EEFC Flash Result Register) 
        .equ EFC_FVALUE_Shift, 0   @ bitWidth 32 (Flash Result Value)  
 
    .equ EFC_EEFC_WPMR, EFC_BASE + 0xE4 @ (Write Protection Mode Register) 
        .equ EFC_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ EFC_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 

@=========================== GMAC ===========================@
.equ GMAC_BASE, 0x40050000 @ (Gigabit Ethernet MAC) 
    .equ GMAC_NCR, GMAC_BASE + 0x000 @ (Network Control Register) 
        .equ GMAC_LBL_Shift, 1   @ bitWidth 1 (Loop Back Local)  
        .equ GMAC_RXEN_Shift, 2   @ bitWidth 1 (Receive Enable)  
        .equ GMAC_TXEN_Shift, 3   @ bitWidth 1 (Transmit Enable)  
        .equ GMAC_MPE_Shift, 4   @ bitWidth 1 (Management Port Enable)  
        .equ GMAC_CLRSTAT_Shift, 5   @ bitWidth 1 (Clear Statistics Registers)  
        .equ GMAC_INCSTAT_Shift, 6   @ bitWidth 1 (Increment Statistics Registers)  
        .equ GMAC_WESTAT_Shift, 7   @ bitWidth 1 (Write Enable for Statistics Registers)  
        .equ GMAC_BP_Shift, 8   @ bitWidth 1 (Back pressure)  
        .equ GMAC_TSTART_Shift, 9   @ bitWidth 1 (Start Transmission)  
        .equ GMAC_THALT_Shift, 10   @ bitWidth 1 (Transmit Halt)  
        .equ GMAC_TXPF_Shift, 11   @ bitWidth 1 (Transmit Pause Frame)  
        .equ GMAC_TXZQPF_Shift, 12   @ bitWidth 1 (Transmit Zero Quantum Pause Frame)  
        .equ GMAC_SRTSM_Shift, 15   @ bitWidth 1 (Store Receive Time Stamp to Memory)  
        .equ GMAC_ENPBPR_Shift, 16   @ bitWidth 1 (Enable PFC Priority-based Pause Reception)  
        .equ GMAC_TXPBPF_Shift, 17   @ bitWidth 1 (Transmit PFC Priority-based Pause Frame)  
        .equ GMAC_FNP_Shift, 18   @ bitWidth 1 (Flush Next Packet)  
 
    .equ GMAC_NCFGR, GMAC_BASE + 0x004 @ (Network Configuration Register) 
        .equ GMAC_SPD_Shift, 0   @ bitWidth 1 (Speed)  
        .equ GMAC_FD_Shift, 1   @ bitWidth 1 (Full Duplex)  
        .equ GMAC_DNVLAN_Shift, 2   @ bitWidth 1 (Discard Non-VLAN FRAMES)  
        .equ GMAC_JFRAME_Shift, 3   @ bitWidth 1 (Jumbo Frame Size)  
        .equ GMAC_CAF_Shift, 4   @ bitWidth 1 (Copy All Frames)  
        .equ GMAC_NBC_Shift, 5   @ bitWidth 1 (No Broadcast)  
        .equ GMAC_MTIHEN_Shift, 6   @ bitWidth 1 (Multicast Hash Enable)  
        .equ GMAC_UNIHEN_Shift, 7   @ bitWidth 1 (Unicast Hash Enable)  
        .equ GMAC_MAXFS_Shift, 8   @ bitWidth 1 (1536 Maximum Frame Size)  
        .equ GMAC_RTY_Shift, 12   @ bitWidth 1 (Retry Test)  
        .equ GMAC_PEN_Shift, 13   @ bitWidth 1 (Pause Enable)  
        .equ GMAC_RXBUFO_Shift, 14   @ bitWidth 2 (Receive Buffer Offset)  
        .equ GMAC_LFERD_Shift, 16   @ bitWidth 1 (Length Field Error Frame Discard)  
        .equ GMAC_RFCS_Shift, 17   @ bitWidth 1 (Remove FCS)  
        .equ GMAC_CLK_Shift, 18   @ bitWidth 3 (MDC CLock Division)  
        .equ GMAC_DBW_Shift, 21   @ bitWidth 2 (Data Bus Width)  
        .equ GMAC_DCPF_Shift, 23   @ bitWidth 1 (Disable Copy of Pause Frames)  
        .equ GMAC_RXCOEN_Shift, 24   @ bitWidth 1 (Receive Checksum Offload Enable)  
        .equ GMAC_EFRHD_Shift, 25   @ bitWidth 1 (Enable Frames Received in Half Duplex)  
        .equ GMAC_IRXFCS_Shift, 26   @ bitWidth 1 (Ignore RX FCS)  
        .equ GMAC_IPGSEN_Shift, 28   @ bitWidth 1 (IP Stretch Enable)  
        .equ GMAC_RXBP_Shift, 29   @ bitWidth 1 (Receive Bad Preamble)  
        .equ GMAC_IRXER_Shift, 30   @ bitWidth 1 (Ignore IPG GRXER)  
 
    .equ GMAC_NSR, GMAC_BASE + 0x008 @ (Network Status Register) 
        .equ GMAC_MDIO_Shift, 1   @ bitWidth 1 (MDIO Input Status)  
        .equ GMAC_IDLE_Shift, 2   @ bitWidth 1 (PHY Management Logic Idle)  
 
    .equ GMAC_UR, GMAC_BASE + 0x00C @ (User Register) 
        .equ GMAC_RMII_Shift, 0   @ bitWidth 1 (Reduced MII Mode)  
 
    .equ GMAC_DCFGR, GMAC_BASE + 0x010 @ (DMA Configuration Register) 
        .equ GMAC_FBLDO_Shift, 0   @ bitWidth 5 (Fixed Burst Length for DMA Data Operations:)  
        .equ GMAC_ESMA_Shift, 6   @ bitWidth 1 (Endian Swap Mode Enable for Management Descriptor Accesses)  
        .equ GMAC_ESPA_Shift, 7   @ bitWidth 1 (Endian Swap Mode Enable for Packet Data Accesses)  
        .equ GMAC_RXBMS_Shift, 8   @ bitWidth 2 (Receiver Packet Buffer Memory Size Select)  
        .equ GMAC_TXPBMS_Shift, 10   @ bitWidth 1 (Transmitter Packet Buffer Memory Size Select)  
        .equ GMAC_TXCOEN_Shift, 11   @ bitWidth 1 (Transmitter Checksum Generation Offload Enable)  
        .equ GMAC_DRBS_Shift, 16   @ bitWidth 8 (DMA Receive Buffer Size)  
        .equ GMAC_DDRP_Shift, 24   @ bitWidth 1 (DMA Discard Receive Packets)  
 
    .equ GMAC_TSR, GMAC_BASE + 0x014 @ (Transmit Status Register) 
        .equ GMAC_UBR_Shift, 0   @ bitWidth 1 (Used Bit Read)  
        .equ GMAC_COL_Shift, 1   @ bitWidth 1 (Collision Occurred)  
        .equ GMAC_RLE_Shift, 2   @ bitWidth 1 (Retry Limit Exceeded)  
        .equ GMAC_TXGO_Shift, 3   @ bitWidth 1 (Transmit Go)  
        .equ GMAC_TFC_Shift, 4   @ bitWidth 1 (Transmit Frame Corruption Due to AHB Error)  
        .equ GMAC_TXCOMP_Shift, 5   @ bitWidth 1 (Transmit Complete)  
        .equ GMAC_HRESP_Shift, 8   @ bitWidth 1 (HRESP Not OK)  
 
    .equ GMAC_RBQB, GMAC_BASE + 0x018 @ (Receive Buffer Queue Base Address Register) 
        .equ GMAC_ADDR_Shift, 2   @ bitWidth 30 (Receive Buffer Queue Base Address)  
 
    .equ GMAC_TBQB, GMAC_BASE + 0x01C @ (Transmit Buffer Queue Base Address Register) 
        .equ GMAC_ADDR_Shift, 2   @ bitWidth 30 (Transmit Buffer Queue Base Address)  
 
    .equ GMAC_RSR, GMAC_BASE + 0x020 @ (Receive Status Register) 
        .equ GMAC_BNA_Shift, 0   @ bitWidth 1 (Buffer Not Available)  
        .equ GMAC_REC_Shift, 1   @ bitWidth 1 (Frame Received)  
        .equ GMAC_RXOVR_Shift, 2   @ bitWidth 1 (Receive Overrun)  
        .equ GMAC_HNO_Shift, 3   @ bitWidth 1 (HRESP Not OK)  
 
    .equ GMAC_ISR, GMAC_BASE + 0x024 @ (Interrupt Status Register) 
        .equ GMAC_MFS_Shift, 0   @ bitWidth 1 (Management Frame Sent)  
        .equ GMAC_RCOMP_Shift, 1   @ bitWidth 1 (Receive Complete)  
        .equ GMAC_RXUBR_Shift, 2   @ bitWidth 1 (RX Used Bit Read)  
        .equ GMAC_TXUBR_Shift, 3   @ bitWidth 1 (TX Used Bit Read)  
        .equ GMAC_TUR_Shift, 4   @ bitWidth 1 (Transmit Underrun)  
        .equ GMAC_RLEX_Shift, 5   @ bitWidth 1 (Retry Limit Exceeded)  
        .equ GMAC_TFC_Shift, 6   @ bitWidth 1 (Transmit Frame Corruption Due to AHB Error)  
        .equ GMAC_TCOMP_Shift, 7   @ bitWidth 1 (Transmit Complete)  
        .equ GMAC_ROVR_Shift, 10   @ bitWidth 1 (Receive Overrun)  
        .equ GMAC_HRESP_Shift, 11   @ bitWidth 1 (HRESP Not OK)  
        .equ GMAC_PFNZ_Shift, 12   @ bitWidth 1 (Pause Frame with Non-zero Pause Quantum Received)  
        .equ GMAC_PTZ_Shift, 13   @ bitWidth 1 (Pause Time Zero)  
        .equ GMAC_PFTR_Shift, 14   @ bitWidth 1 (Pause Frame Transmitted)  
        .equ GMAC_DRQFR_Shift, 18   @ bitWidth 1 (PTP Delay Request Frame Received)  
        .equ GMAC_SFR_Shift, 19   @ bitWidth 1 (PTP Sync Frame Received)  
        .equ GMAC_DRQFT_Shift, 20   @ bitWidth 1 (PTP Delay Request Frame Transmitted)  
        .equ GMAC_SFT_Shift, 21   @ bitWidth 1 (PTP Sync Frame Transmitted)  
        .equ GMAC_PDRQFR_Shift, 22   @ bitWidth 1 (PDelay Request Frame Received)  
        .equ GMAC_PDRSFR_Shift, 23   @ bitWidth 1 (PDelay Response Frame Received)  
        .equ GMAC_PDRQFT_Shift, 24   @ bitWidth 1 (PDelay Request Frame Transmitted)  
        .equ GMAC_PDRSFT_Shift, 25   @ bitWidth 1 (PDelay Response Frame Transmitted)  
        .equ GMAC_SRI_Shift, 26   @ bitWidth 1 (TSU Seconds Register Increment)  
        .equ GMAC_WOL_Shift, 28   @ bitWidth 1 (Wake On LAN)  
 
    .equ GMAC_IER, GMAC_BASE + 0x028 @ (Interrupt Enable Register) 
        .equ GMAC_MFS_Shift, 0   @ bitWidth 1 (Management Frame Sent)  
        .equ GMAC_RCOMP_Shift, 1   @ bitWidth 1 (Receive Complete)  
        .equ GMAC_RXUBR_Shift, 2   @ bitWidth 1 (RX Used Bit Read)  
        .equ GMAC_TXUBR_Shift, 3   @ bitWidth 1 (TX Used Bit Read)  
        .equ GMAC_TUR_Shift, 4   @ bitWidth 1 (Transmit Underrun)  
        .equ GMAC_RLEX_Shift, 5   @ bitWidth 1 (Retry Limit Exceeded or Late Collision)  
        .equ GMAC_TFC_Shift, 6   @ bitWidth 1 (Transmit Frame Corruption Due to AHB Error)  
        .equ GMAC_TCOMP_Shift, 7   @ bitWidth 1 (Transmit Complete)  
        .equ GMAC_ROVR_Shift, 10   @ bitWidth 1 (Receive Overrun)  
        .equ GMAC_HRESP_Shift, 11   @ bitWidth 1 (HRESP Not OK)  
        .equ GMAC_PFNZ_Shift, 12   @ bitWidth 1 (Pause Frame with Non-zero Pause Quantum Received)  
        .equ GMAC_PTZ_Shift, 13   @ bitWidth 1 (Pause Time Zero)  
        .equ GMAC_PFTR_Shift, 14   @ bitWidth 1 (Pause Frame Transmitted)  
        .equ GMAC_EXINT_Shift, 15   @ bitWidth 1 (External Interrupt)  
        .equ GMAC_DRQFR_Shift, 18   @ bitWidth 1 (PTP Delay Request Frame Received)  
        .equ GMAC_SFR_Shift, 19   @ bitWidth 1 (PTP Sync Frame Received)  
        .equ GMAC_DRQFT_Shift, 20   @ bitWidth 1 (PTP Delay Request Frame Transmitted)  
        .equ GMAC_SFT_Shift, 21   @ bitWidth 1 (PTP Sync Frame Transmitted)  
        .equ GMAC_PDRQFR_Shift, 22   @ bitWidth 1 (PDelay Request Frame Received)  
        .equ GMAC_PDRSFR_Shift, 23   @ bitWidth 1 (PDelay Response Frame Received)  
        .equ GMAC_PDRQFT_Shift, 24   @ bitWidth 1 (PDelay Request Frame Transmitted)  
        .equ GMAC_PDRSFT_Shift, 25   @ bitWidth 1 (PDelay Response Frame Transmitted)  
        .equ GMAC_SRI_Shift, 26   @ bitWidth 1 (TSU Seconds Register Increment)  
        .equ GMAC_WOL_Shift, 28   @ bitWidth 1 (Wake On LAN)  
 
    .equ GMAC_IDR, GMAC_BASE + 0x02C @ (Interrupt Disable Register) 
        .equ GMAC_MFS_Shift, 0   @ bitWidth 1 (Management Frame Sent)  
        .equ GMAC_RCOMP_Shift, 1   @ bitWidth 1 (Receive Complete)  
        .equ GMAC_RXUBR_Shift, 2   @ bitWidth 1 (RX Used Bit Read)  
        .equ GMAC_TXUBR_Shift, 3   @ bitWidth 1 (TX Used Bit Read)  
        .equ GMAC_TUR_Shift, 4   @ bitWidth 1 (Transmit Underrun)  
        .equ GMAC_RLEX_Shift, 5   @ bitWidth 1 (Retry Limit Exceeded or Late Collision)  
        .equ GMAC_TFC_Shift, 6   @ bitWidth 1 (Transmit Frame Corruption Due to AHB Error)  
        .equ GMAC_TCOMP_Shift, 7   @ bitWidth 1 (Transmit Complete)  
        .equ GMAC_ROVR_Shift, 10   @ bitWidth 1 (Receive Overrun)  
        .equ GMAC_HRESP_Shift, 11   @ bitWidth 1 (HRESP Not OK)  
        .equ GMAC_PFNZ_Shift, 12   @ bitWidth 1 (Pause Frame with Non-zero Pause Quantum Received)  
        .equ GMAC_PTZ_Shift, 13   @ bitWidth 1 (Pause Time Zero)  
        .equ GMAC_PFTR_Shift, 14   @ bitWidth 1 (Pause Frame Transmitted)  
        .equ GMAC_EXINT_Shift, 15   @ bitWidth 1 (External Interrupt)  
        .equ GMAC_DRQFR_Shift, 18   @ bitWidth 1 (PTP Delay Request Frame Received)  
        .equ GMAC_SFR_Shift, 19   @ bitWidth 1 (PTP Sync Frame Received)  
        .equ GMAC_DRQFT_Shift, 20   @ bitWidth 1 (PTP Delay Request Frame Transmitted)  
        .equ GMAC_SFT_Shift, 21   @ bitWidth 1 (PTP Sync Frame Transmitted)  
        .equ GMAC_PDRQFR_Shift, 22   @ bitWidth 1 (PDelay Request Frame Received)  
        .equ GMAC_PDRSFR_Shift, 23   @ bitWidth 1 (PDelay Response Frame Received)  
        .equ GMAC_PDRQFT_Shift, 24   @ bitWidth 1 (PDelay Request Frame Transmitted)  
        .equ GMAC_PDRSFT_Shift, 25   @ bitWidth 1 (PDelay Response Frame Transmitted)  
        .equ GMAC_SRI_Shift, 26   @ bitWidth 1 (TSU Seconds Register Increment)  
        .equ GMAC_WOL_Shift, 28   @ bitWidth 1 (Wake On LAN)  
 
    .equ GMAC_IMR, GMAC_BASE + 0x030 @ (Interrupt Mask Register) 
        .equ GMAC_MFS_Shift, 0   @ bitWidth 1 (Management Frame Sent)  
        .equ GMAC_RCOMP_Shift, 1   @ bitWidth 1 (Receive Complete)  
        .equ GMAC_RXUBR_Shift, 2   @ bitWidth 1 (RX Used Bit Read)  
        .equ GMAC_TXUBR_Shift, 3   @ bitWidth 1 (TX Used Bit Read)  
        .equ GMAC_TUR_Shift, 4   @ bitWidth 1 (Transmit Underrun)  
        .equ GMAC_RLEX_Shift, 5   @ bitWidth 1 (Retry Limit Exceeded)  
        .equ GMAC_TFC_Shift, 6   @ bitWidth 1 (Transmit Frame Corruption Due to AHB Error)  
        .equ GMAC_TCOMP_Shift, 7   @ bitWidth 1 (Transmit Complete)  
        .equ GMAC_ROVR_Shift, 10   @ bitWidth 1 (Receive Overrun)  
        .equ GMAC_HRESP_Shift, 11   @ bitWidth 1 (HRESP Not OK)  
        .equ GMAC_PFNZ_Shift, 12   @ bitWidth 1 (Pause Frame with Non-zero Pause Quantum Received)  
        .equ GMAC_PTZ_Shift, 13   @ bitWidth 1 (Pause Time Zero)  
        .equ GMAC_PFTR_Shift, 14   @ bitWidth 1 (Pause Frame Transmitted)  
        .equ GMAC_EXINT_Shift, 15   @ bitWidth 1 (External Interrupt)  
        .equ GMAC_DRQFR_Shift, 18   @ bitWidth 1 (PTP Delay Request Frame Received)  
        .equ GMAC_SFR_Shift, 19   @ bitWidth 1 (PTP Sync Frame Received)  
        .equ GMAC_DRQFT_Shift, 20   @ bitWidth 1 (PTP Delay Request Frame Transmitted)  
        .equ GMAC_SFT_Shift, 21   @ bitWidth 1 (PTP Sync Frame Transmitted)  
        .equ GMAC_PDRQFR_Shift, 22   @ bitWidth 1 (PDelay Request Frame Received)  
        .equ GMAC_PDRSFR_Shift, 23   @ bitWidth 1 (PDelay Response Frame Received)  
        .equ GMAC_PDRQFT_Shift, 24   @ bitWidth 1 (PDelay Request Frame Transmitted)  
        .equ GMAC_PDRSFT_Shift, 25   @ bitWidth 1 (PDelay Response Frame Transmitted)  
        .equ GMAC_SRI_Shift, 26   @ bitWidth 1 (TSU Seconds Register Increment)  
        .equ GMAC_WOL_Shift, 28   @ bitWidth 1 (Wake On LAN)  
 
    .equ GMAC_MAN, GMAC_BASE + 0x034 @ (PHY Maintenance Register) 
        .equ GMAC_DATA_Shift, 0   @ bitWidth 16 (PHY Data)  
        .equ GMAC_WTN_Shift, 16   @ bitWidth 2 (Write Ten)  
        .equ GMAC_REGA_Shift, 18   @ bitWidth 5 (Register Address)  
        .equ GMAC_PHYA_Shift, 23   @ bitWidth 5 (PHY Address)  
        .equ GMAC_OP_Shift, 28   @ bitWidth 2 (Operation)  
        .equ GMAC_CLTTO_Shift, 30   @ bitWidth 1 (Clause 22 Operation)  
        .equ GMAC_WZO_Shift, 31   @ bitWidth 1 (Write ZERO)  
 
    .equ GMAC_RPQ, GMAC_BASE + 0x038 @ (Received Pause Quantum Register) 
        .equ GMAC_RPQ_Shift, 0   @ bitWidth 16 (Received Pause Quantum)  
 
    .equ GMAC_TPQ, GMAC_BASE + 0x03C @ (Transmit Pause Quantum Register) 
        .equ GMAC_TPQ_Shift, 0   @ bitWidth 16 (Transmit Pause Quantum)  
 
    .equ GMAC_TPSF, GMAC_BASE + 0x040 @ (TX Partial Store and Forward Register) 
        .equ GMAC_TPB1ADR_Shift, 0   @ bitWidth 12 (Transmit Partial Store and Forward Address)  
        .equ GMAC_ENTXP_Shift, 31   @ bitWidth 1 (Enable TX Partial Store and Forward Operation)  
 
    .equ GMAC_RPSF, GMAC_BASE + 0x044 @ (RX Partial Store and Forward Register) 
        .equ GMAC_RPB1ADR_Shift, 0   @ bitWidth 12 (Receive Partial Store and Forward Address)  
        .equ GMAC_ENRXP_Shift, 31   @ bitWidth 1 (Enable RX Partial Store and Forward Operation)  
 
    .equ GMAC_RJFML, GMAC_BASE + 0x048 @ (RX Jumbo Frame Max Length Register) 
        .equ GMAC_FML_Shift, 0   @ bitWidth 14 (Frame Max Length)  
 
    .equ GMAC_HRB, GMAC_BASE + 0x080 @ (Hash Register Bottom) 
        .equ GMAC_ADDR_Shift, 0   @ bitWidth 32 (Hash Address)  
 
    .equ GMAC_HRT, GMAC_BASE + 0x084 @ (Hash Register Top) 
        .equ GMAC_ADDR_Shift, 0   @ bitWidth 32 (Hash Address)  
 
    .equ GMAC_TIDM1, GMAC_BASE + 0x0A8 @ (Type ID Match 1 Register) 
        .equ GMAC_TID_Shift, 0   @ bitWidth 16 (Type ID Match 1)  
        .equ GMAC_ENID1_Shift, 31   @ bitWidth 1 (Enable Copying of TID Matched Frames)  
 
    .equ GMAC_TIDM2, GMAC_BASE + 0x0AC @ (Type ID Match 2 Register) 
        .equ GMAC_TID_Shift, 0   @ bitWidth 16 (Type ID Match 2)  
        .equ GMAC_ENID2_Shift, 31   @ bitWidth 1 (Enable Copying of TID Matched Frames)  
 
    .equ GMAC_TIDM3, GMAC_BASE + 0x0B0 @ (Type ID Match 3 Register) 
        .equ GMAC_TID_Shift, 0   @ bitWidth 16 (Type ID Match 3)  
        .equ GMAC_ENID3_Shift, 31   @ bitWidth 1 (Enable Copying of TID Matched Frames)  
 
    .equ GMAC_TIDM4, GMAC_BASE + 0x0B4 @ (Type ID Match 4 Register) 
        .equ GMAC_TID_Shift, 0   @ bitWidth 16 (Type ID Match 4)  
        .equ GMAC_ENID4_Shift, 31   @ bitWidth 1 (Enable Copying of TID Matched Frames)  
 
    .equ GMAC_WOL, GMAC_BASE + 0x0B8 @ (Wake on LAN Register) 
        .equ GMAC_IP_Shift, 0   @ bitWidth 16 (ARP Request IP Address)  
        .equ GMAC_MAG_Shift, 16   @ bitWidth 1 (Magic Packet Event Enable)  
        .equ GMAC_ARP_Shift, 17   @ bitWidth 1 (ARP Request IP Address)  
        .equ GMAC_SA1_Shift, 18   @ bitWidth 1 (Specific Address Register 1 Event Enable)  
        .equ GMAC_MTI_Shift, 19   @ bitWidth 1 (Multicast Hash Event Enable)  
 
    .equ GMAC_IPGS, GMAC_BASE + 0x0BC @ (IPG Stretch Register) 
        .equ GMAC_FL_Shift, 0   @ bitWidth 16 (Frame Length)  
 
    .equ GMAC_SVLAN, GMAC_BASE + 0x0C0 @ (Stacked VLAN Register) 
        .equ GMAC_VLAN_TYPE_Shift, 0   @ bitWidth 16 (User Defined VLAN_TYPE Field)  
        .equ GMAC_ESVLAN_Shift, 31   @ bitWidth 1 (Enable Stacked VLAN Processing Mode)  
 
    .equ GMAC_TPFCP, GMAC_BASE + 0x0C4 @ (Transmit PFC Pause Register) 
        .equ GMAC_PEV_Shift, 0   @ bitWidth 8 (Priority Enable Vector)  
        .equ GMAC_PQ_Shift, 8   @ bitWidth 8 (Pause Quantum)  
 
    .equ GMAC_SAMB1, GMAC_BASE + 0x0C8 @ (Specific Address 1 Mask Bottom Register) 
        .equ GMAC_ADDR_Shift, 0   @ bitWidth 32 (Specific Address 1 Mask)  
 
    .equ GMAC_SAMT1, GMAC_BASE + 0x0CC @ (Specific Address 1 Mask Top Register) 
        .equ GMAC_ADDR_Shift, 0   @ bitWidth 16 (Specific Address 1 Mask)  
 
    .equ GMAC_NSC, GMAC_BASE + 0x0DC @ (1588 Timer Nanosecond Comparison Register) 
        .equ GMAC_NANOSEC_Shift, 0   @ bitWidth 22 (1588 Timer Nanosecond Comparison Value)  
 
    .equ GMAC_SCL, GMAC_BASE + 0x0E0 @ (1588 Timer Second Comparison Low Register) 
        .equ GMAC_SEC_Shift, 0   @ bitWidth 32 (1588 Timer Second Comparison Value)  
 
    .equ GMAC_SCH, GMAC_BASE + 0x0E4 @ (1588 Timer Second Comparison High Register) 
        .equ GMAC_SEC_Shift, 0   @ bitWidth 16 (1588 Timer Second Comparison Value)  
 
    .equ GMAC_EFTSH, GMAC_BASE + 0x0E8 @ (PTP Event Frame Transmitted Seconds High Register) 
        .equ GMAC_RUD_Shift, 0   @ bitWidth 16 (Register Update)  
 
    .equ GMAC_EFRSH, GMAC_BASE + 0x0EC @ (PTP Event Frame Received Seconds High Register) 
        .equ GMAC_RUD_Shift, 0   @ bitWidth 16 (Register Update)  
 
    .equ GMAC_PEFTSH, GMAC_BASE + 0x0F0 @ (PTP Peer Event Frame Transmitted Seconds High Register) 
        .equ GMAC_RUD_Shift, 0   @ bitWidth 16 (Register Update)  
 
    .equ GMAC_PEFRSH, GMAC_BASE + 0x0F4 @ (PTP Peer Event Frame Received Seconds High Register) 
        .equ GMAC_RUD_Shift, 0   @ bitWidth 16 (Register Update)  
 
    .equ GMAC_OTLO, GMAC_BASE + 0x100 @ (Octets Transmitted Low Register) 
        .equ GMAC_TXO_Shift, 0   @ bitWidth 32 (Transmitted Octets)  
 
    .equ GMAC_OTHI, GMAC_BASE + 0x104 @ (Octets Transmitted High Register) 
        .equ GMAC_TXO_Shift, 0   @ bitWidth 16 (Transmitted Octets)  
 
    .equ GMAC_FT, GMAC_BASE + 0x108 @ (Frames Transmitted Register) 
        .equ GMAC_FTX_Shift, 0   @ bitWidth 32 (Frames Transmitted without Error)  
 
    .equ GMAC_BCFT, GMAC_BASE + 0x10C @ (Broadcast Frames Transmitted Register) 
        .equ GMAC_BFTX_Shift, 0   @ bitWidth 32 (Broadcast Frames Transmitted without Error)  
 
    .equ GMAC_MFT, GMAC_BASE + 0x110 @ (Multicast Frames Transmitted Register) 
        .equ GMAC_MFTX_Shift, 0   @ bitWidth 32 (Multicast Frames Transmitted without Error)  
 
    .equ GMAC_PFT, GMAC_BASE + 0x114 @ (Pause Frames Transmitted Register) 
        .equ GMAC_PFTX_Shift, 0   @ bitWidth 16 (Pause Frames Transmitted Register)  
 
    .equ GMAC_BFT64, GMAC_BASE + 0x118 @ (64 Byte Frames Transmitted Register) 
        .equ GMAC_NFTX_Shift, 0   @ bitWidth 32 (64 Byte Frames Transmitted without Error)  
 
    .equ GMAC_TBFT127, GMAC_BASE + 0x11C @ (65 to 127 Byte Frames Transmitted Register) 
        .equ GMAC_NFTX_Shift, 0   @ bitWidth 32 (65 to 127 Byte Frames Transmitted without Error)  
 
    .equ GMAC_TBFT255, GMAC_BASE + 0x120 @ (128 to 255 Byte Frames Transmitted Register) 
        .equ GMAC_NFTX_Shift, 0   @ bitWidth 32 (128 to 255 Byte Frames Transmitted without Error)  
 
    .equ GMAC_TBFT511, GMAC_BASE + 0x124 @ (256 to 511 Byte Frames Transmitted Register) 
        .equ GMAC_NFTX_Shift, 0   @ bitWidth 32 (256 to 511 Byte Frames Transmitted without Error)  
 
    .equ GMAC_TBFT1023, GMAC_BASE + 0x128 @ (512 to 1023 Byte Frames Transmitted Register) 
        .equ GMAC_NFTX_Shift, 0   @ bitWidth 32 (512 to 1023 Byte Frames Transmitted without Error)  
 
    .equ GMAC_TBFT1518, GMAC_BASE + 0x12C @ (1024 to 1518 Byte Frames Transmitted Register) 
        .equ GMAC_NFTX_Shift, 0   @ bitWidth 32 (1024 to 1518 Byte Frames Transmitted without Error)  
 
    .equ GMAC_GTBFT1518, GMAC_BASE + 0x130 @ (Greater Than 1518 Byte Frames Transmitted Register) 
        .equ GMAC_NFTX_Shift, 0   @ bitWidth 32 (Greater than 1518 Byte Frames Transmitted without Error)  
 
    .equ GMAC_TUR, GMAC_BASE + 0x134 @ (Transmit Underruns Register) 
        .equ GMAC_TXUNR_Shift, 0   @ bitWidth 10 (Transmit Underruns)  
 
    .equ GMAC_SCF, GMAC_BASE + 0x138 @ (Single Collision Frames Register) 
        .equ GMAC_SCOL_Shift, 0   @ bitWidth 18 (Single Collision)  
 
    .equ GMAC_MCF, GMAC_BASE + 0x13C @ (Multiple Collision Frames Register) 
        .equ GMAC_MCOL_Shift, 0   @ bitWidth 18 (Multiple Collision)  
 
    .equ GMAC_EC, GMAC_BASE + 0x140 @ (Excessive Collisions Register) 
        .equ GMAC_XCOL_Shift, 0   @ bitWidth 10 (Excessive Collisions)  
 
    .equ GMAC_LC, GMAC_BASE + 0x144 @ (Late Collisions Register) 
        .equ GMAC_LCOL_Shift, 0   @ bitWidth 10 (Late Collisions)  
 
    .equ GMAC_DTF, GMAC_BASE + 0x148 @ (Deferred Transmission Frames Register) 
        .equ GMAC_DEFT_Shift, 0   @ bitWidth 18 (Deferred Transmission)  
 
    .equ GMAC_CSE, GMAC_BASE + 0x14C @ (Carrier Sense Errors Register) 
        .equ GMAC_CSR_Shift, 0   @ bitWidth 10 (Carrier Sense Error)  
 
    .equ GMAC_ORLO, GMAC_BASE + 0x150 @ (Octets Received Low Received Register) 
        .equ GMAC_RXO_Shift, 0   @ bitWidth 32 (Received Octets)  
 
    .equ GMAC_ORHI, GMAC_BASE + 0x154 @ (Octets Received High Received Register) 
        .equ GMAC_RXO_Shift, 0   @ bitWidth 16 (Received Octets)  
 
    .equ GMAC_FR, GMAC_BASE + 0x158 @ (Frames Received Register) 
        .equ GMAC_FRX_Shift, 0   @ bitWidth 32 (Frames Received without Error)  
 
    .equ GMAC_BCFR, GMAC_BASE + 0x15C @ (Broadcast Frames Received Register) 
        .equ GMAC_BFRX_Shift, 0   @ bitWidth 32 (Broadcast Frames Received without Error)  
 
    .equ GMAC_MFR, GMAC_BASE + 0x160 @ (Multicast Frames Received Register) 
        .equ GMAC_MFRX_Shift, 0   @ bitWidth 32 (Multicast Frames Received without Error)  
 
    .equ GMAC_PFR, GMAC_BASE + 0x164 @ (Pause Frames Received Register) 
        .equ GMAC_PFRX_Shift, 0   @ bitWidth 16 (Pause Frames Received Register)  
 
    .equ GMAC_BFR64, GMAC_BASE + 0x168 @ (64 Byte Frames Received Register) 
        .equ GMAC_NFRX_Shift, 0   @ bitWidth 32 (64 Byte Frames Received without Error)  
 
    .equ GMAC_TBFR127, GMAC_BASE + 0x16C @ (65 to 127 Byte Frames Received Register) 
        .equ GMAC_NFRX_Shift, 0   @ bitWidth 32 (65 to 127 Byte Frames Received without Error)  
 
    .equ GMAC_TBFR255, GMAC_BASE + 0x170 @ (128 to 255 Byte Frames Received Register) 
        .equ GMAC_NFRX_Shift, 0   @ bitWidth 32 (128 to 255 Byte Frames Received without Error)  
 
    .equ GMAC_TBFR511, GMAC_BASE + 0x174 @ (256 to 511 Byte Frames Received Register) 
        .equ GMAC_NFRX_Shift, 0   @ bitWidth 32 (256 to 511 Byte Frames Received without Error)  
 
    .equ GMAC_TBFR1023, GMAC_BASE + 0x178 @ (512 to 1023 Byte Frames Received Register) 
        .equ GMAC_NFRX_Shift, 0   @ bitWidth 32 (512 to 1023 Byte Frames Received without Error)  
 
    .equ GMAC_TBFR1518, GMAC_BASE + 0x17C @ (1024 to 1518 Byte Frames Received Register) 
        .equ GMAC_NFRX_Shift, 0   @ bitWidth 32 (1024 to 1518 Byte Frames Received without Error)  
 
    .equ GMAC_TMXBFR, GMAC_BASE + 0x180 @ (1519 to Maximum Byte Frames Received Register) 
        .equ GMAC_NFRX_Shift, 0   @ bitWidth 32 (1519 to Maximum Byte Frames Received without Error)  
 
    .equ GMAC_UFR, GMAC_BASE + 0x184 @ (Undersize Frames Received Register) 
        .equ GMAC_UFRX_Shift, 0   @ bitWidth 10 (Undersize Frames Received)  
 
    .equ GMAC_OFR, GMAC_BASE + 0x188 @ (Oversize Frames Received Register) 
        .equ GMAC_OFRX_Shift, 0   @ bitWidth 10 (Oversized Frames Received)  
 
    .equ GMAC_JR, GMAC_BASE + 0x18C @ (Jabbers Received Register) 
        .equ GMAC_JRX_Shift, 0   @ bitWidth 10 (Jabbers Received)  
 
    .equ GMAC_FCSE, GMAC_BASE + 0x190 @ (Frame Check Sequence Errors Register) 
        .equ GMAC_FCKR_Shift, 0   @ bitWidth 10 (Frame Check Sequence Errors)  
 
    .equ GMAC_LFFE, GMAC_BASE + 0x194 @ (Length Field Frame Errors Register) 
        .equ GMAC_LFER_Shift, 0   @ bitWidth 10 (Length Field Frame Errors)  
 
    .equ GMAC_RSE, GMAC_BASE + 0x198 @ (Receive Symbol Errors Register) 
        .equ GMAC_RXSE_Shift, 0   @ bitWidth 10 (Receive Symbol Errors)  
 
    .equ GMAC_AE, GMAC_BASE + 0x19C @ (Alignment Errors Register) 
        .equ GMAC_AER_Shift, 0   @ bitWidth 10 (Alignment Errors)  
 
    .equ GMAC_RRE, GMAC_BASE + 0x1A0 @ (Receive Resource Errors Register) 
        .equ GMAC_RXRER_Shift, 0   @ bitWidth 18 (Receive Resource Errors)  
 
    .equ GMAC_ROE, GMAC_BASE + 0x1A4 @ (Receive Overrun Register) 
        .equ GMAC_RXOVR_Shift, 0   @ bitWidth 10 (Receive Overruns)  
 
    .equ GMAC_IHCE, GMAC_BASE + 0x1A8 @ (IP Header Checksum Errors Register) 
        .equ GMAC_HCKER_Shift, 0   @ bitWidth 8 (IP Header Checksum Errors)  
 
    .equ GMAC_TCE, GMAC_BASE + 0x1AC @ (TCP Checksum Errors Register) 
        .equ GMAC_TCKER_Shift, 0   @ bitWidth 8 (TCP Checksum Errors)  
 
    .equ GMAC_UCE, GMAC_BASE + 0x1B0 @ (UDP Checksum Errors Register) 
        .equ GMAC_UCKER_Shift, 0   @ bitWidth 8 (UDP Checksum Errors)  
 
    .equ GMAC_TISUBN, GMAC_BASE + 0x1BC @ (1588 Timer Increment Sub-nanoseconds Register) 
        .equ GMAC_LSBTIR_Shift, 0   @ bitWidth 16 (Lower Significant Bits of Timer Increment Register)  
 
    .equ GMAC_TSH, GMAC_BASE + 0x1C0 @ (1588 Timer Seconds High Register) 
        .equ GMAC_TCS_Shift, 0   @ bitWidth 16 (Timer Count in Seconds)  
 
    .equ GMAC_TSL, GMAC_BASE + 0x1D0 @ (1588 Timer Seconds Low Register) 
        .equ GMAC_TCS_Shift, 0   @ bitWidth 32 (Timer Count in Seconds)  
 
    .equ GMAC_TN, GMAC_BASE + 0x1D4 @ (1588 Timer Nanoseconds Register) 
        .equ GMAC_TNS_Shift, 0   @ bitWidth 30 (Timer Count in Nanoseconds)  
 
    .equ GMAC_TA, GMAC_BASE + 0x1D8 @ (1588 Timer Adjust Register) 
        .equ GMAC_ITDT_Shift, 0   @ bitWidth 30 (Increment/Decrement)  
        .equ GMAC_ADJ_Shift, 31   @ bitWidth 1 (Adjust 1588 Timer)  
 
    .equ GMAC_TI, GMAC_BASE + 0x1DC @ (1588 Timer Increment Register) 
        .equ GMAC_CNS_Shift, 0   @ bitWidth 8 (Count Nanoseconds)  
        .equ GMAC_ACNS_Shift, 8   @ bitWidth 8 (Alternative Count Nanoseconds)  
        .equ GMAC_NIT_Shift, 16   @ bitWidth 8 (Number of Increments)  
 
    .equ GMAC_EFTSL, GMAC_BASE + 0x1E0 @ (PTP Event Frame Transmitted Seconds Low Register) 
        .equ GMAC_RUD_Shift, 0   @ bitWidth 32 (Register Update)  
 
    .equ GMAC_EFTN, GMAC_BASE + 0x1E4 @ (PTP Event Frame Transmitted Nanoseconds Register) 
        .equ GMAC_RUD_Shift, 0   @ bitWidth 30 (Register Update)  
 
    .equ GMAC_EFRSL, GMAC_BASE + 0x1E8 @ (PTP Event Frame Received Seconds Low Register) 
        .equ GMAC_RUD_Shift, 0   @ bitWidth 32 (Register Update)  
 
    .equ GMAC_EFRN, GMAC_BASE + 0x1EC @ (PTP Event Frame Received Nanoseconds Register) 
        .equ GMAC_RUD_Shift, 0   @ bitWidth 30 (Register Update)  
 
    .equ GMAC_PEFTSL, GMAC_BASE + 0x1F0 @ (PTP Peer Event Frame Transmitted Seconds Low Register) 
        .equ GMAC_RUD_Shift, 0   @ bitWidth 32 (Register Update)  
 
    .equ GMAC_PEFTN, GMAC_BASE + 0x1F4 @ (PTP Peer Event Frame Transmitted Nanoseconds Register) 
        .equ GMAC_RUD_Shift, 0   @ bitWidth 30 (Register Update)  
 
    .equ GMAC_PEFRSL, GMAC_BASE + 0x1F8 @ (PTP Peer Event Frame Received Seconds Low Register) 
        .equ GMAC_RUD_Shift, 0   @ bitWidth 32 (Register Update)  
 
    .equ GMAC_PEFRN, GMAC_BASE + 0x1FC @ (PTP Peer Event Frame Received Nanoseconds Register) 
        .equ GMAC_RUD_Shift, 0   @ bitWidth 30 (Register Update)  
 
    .equ GMAC_ISRPQ[%s], GMAC_BASE + 0x3FC @ (Interrupt Status Register Priority Queue index = 1 0) 
        .equ GMAC_RCOMP_Shift, 1   @ bitWidth 1 (Receive Complete)  
        .equ GMAC_RXUBR_Shift, 2   @ bitWidth 1 (RX Used Bit Read)  
        .equ GMAC_RLEX_Shift, 5   @ bitWidth 1 (Retry Limit Exceeded or Late Collision)  
        .equ GMAC_TFC_Shift, 6   @ bitWidth 1 (Transmit Frame Corruption Due to AHB Error)  
        .equ GMAC_TCOMP_Shift, 7   @ bitWidth 1 (Transmit Complete)  
        .equ GMAC_ROVR_Shift, 10   @ bitWidth 1 (Receive Overrun)  
        .equ GMAC_HRESP_Shift, 11   @ bitWidth 1 (HRESP Not OK)  
 
    .equ GMAC_TBQBAPQ[%s], GMAC_BASE + 0x43C @ (Transmit Buffer Queue Base Address Register Priority Queue index = 1 0) 
        .equ GMAC_TXBQBA_Shift, 2   @ bitWidth 30 (Transmit Buffer Queue Base Address)  
 
    .equ GMAC_RBQBAPQ[%s], GMAC_BASE + 0x47C @ (Receive Buffer Queue Base Address Register Priority Queue index = 1 0) 
        .equ GMAC_RXBQBA_Shift, 2   @ bitWidth 30 (Receive Buffer Queue Base Address)  
 
    .equ GMAC_RBSRPQ[%s], GMAC_BASE + 0x49C @ (Receive Buffer Size Register Priority Queue index = 1 0) 
        .equ GMAC_RBS_Shift, 0   @ bitWidth 16 (Receive Buffer Size)  
 
    .equ GMAC_CBSCR, GMAC_BASE + 0x4BC @ (Credit-Based Shaping Control Register) 
        .equ GMAC_QBE_Shift, 0   @ bitWidth 1 (Queue B CBS Enable)  
        .equ GMAC_QAE_Shift, 1   @ bitWidth 1 (Queue A CBS Enable)  
 
    .equ GMAC_CBSISQA, GMAC_BASE + 0x4C0 @ (Credit-Based Shaping IdleSlope Register for Queue A) 
        .equ GMAC_IS_Shift, 0   @ bitWidth 32 (IdleSlope)  
 
    .equ GMAC_CBSISQB, GMAC_BASE + 0x4C4 @ (Credit-Based Shaping IdleSlope Register for Queue B) 
        .equ GMAC_IS_Shift, 0   @ bitWidth 32 (IdleSlope)  
 
    .equ GMAC_ST1RPQ[%s], GMAC_BASE + 0x500 @ (Screening Type 1 Register Priority Queue index = 0 0) 
        .equ GMAC_QNB_Shift, 0   @ bitWidth 3 (Queue Number 0-2)  
        .equ GMAC_DSTCM_Shift, 4   @ bitWidth 8 (Differentiated Services or Traffic Class Match)  
        .equ GMAC_UDPM_Shift, 12   @ bitWidth 16 (UDP Port Match)  
        .equ GMAC_DSTCE_Shift, 28   @ bitWidth 1 (Differentiated Services or Traffic Class Match Enable)  
        .equ GMAC_UDPE_Shift, 29   @ bitWidth 1 (UDP Port Match Enable)  
 
    .equ GMAC_ST2RPQ[%s], GMAC_BASE + 0x540 @ (Screening Type 2 Register Priority Queue index = 0 0) 
        .equ GMAC_QNB_Shift, 0   @ bitWidth 3 (Queue Number 0-2)  
        .equ GMAC_VLANP_Shift, 4   @ bitWidth 3 (VLAN Priority)  
        .equ GMAC_VLANE_Shift, 8   @ bitWidth 1 (VLAN Enable)  
        .equ GMAC_I2ETH_Shift, 9   @ bitWidth 3 (Index of Screening Type 2 EtherType register x)  
        .equ GMAC_ETHE_Shift, 12   @ bitWidth 1 (EtherType Enable)  
        .equ GMAC_COMPA_Shift, 13   @ bitWidth 5 (Index of Screening Type 2 Compare Word 0/Word 1 register x)  
        .equ GMAC_COMPAE_Shift, 18   @ bitWidth 1 (Compare A Enable)  
        .equ GMAC_COMPB_Shift, 19   @ bitWidth 5 (Index of Screening Type 2 Compare Word 0/Word 1 register x)  
        .equ GMAC_COMPBE_Shift, 24   @ bitWidth 1 (Compare B Enable)  
        .equ GMAC_COMPC_Shift, 25   @ bitWidth 5 (Index of Screening Type 2 Compare Word 0/Word 1 register x)  
        .equ GMAC_COMPCE_Shift, 30   @ bitWidth 1 (Compare C Enable)  
 
    .equ GMAC_IERPQ[%s], GMAC_BASE + 0x5FC @ (Interrupt Enable Register Priority Queue index = 1 0) 
        .equ GMAC_RCOMP_Shift, 1   @ bitWidth 1 (Receive Complete)  
        .equ GMAC_RXUBR_Shift, 2   @ bitWidth 1 (RX Used Bit Read)  
        .equ GMAC_RLEX_Shift, 5   @ bitWidth 1 (Retry Limit Exceeded or Late Collision)  
        .equ GMAC_TFC_Shift, 6   @ bitWidth 1 (Transmit Frame Corruption Due to AHB Error)  
        .equ GMAC_TCOMP_Shift, 7   @ bitWidth 1 (Transmit Complete)  
        .equ GMAC_ROVR_Shift, 10   @ bitWidth 1 (Receive Overrun)  
        .equ GMAC_HRESP_Shift, 11   @ bitWidth 1 (HRESP Not OK)  
 
    .equ GMAC_IDRPQ[%s], GMAC_BASE + 0x61C @ (Interrupt Disable Register Priority Queue index = 1 0) 
        .equ GMAC_RCOMP_Shift, 1   @ bitWidth 1 (Receive Complete)  
        .equ GMAC_RXUBR_Shift, 2   @ bitWidth 1 (RX Used Bit Read)  
        .equ GMAC_RLEX_Shift, 5   @ bitWidth 1 (Retry Limit Exceeded or Late Collision)  
        .equ GMAC_TFC_Shift, 6   @ bitWidth 1 (Transmit Frame Corruption Due to AHB Error)  
        .equ GMAC_TCOMP_Shift, 7   @ bitWidth 1 (Transmit Complete)  
        .equ GMAC_ROVR_Shift, 10   @ bitWidth 1 (Receive Overrun)  
        .equ GMAC_HRESP_Shift, 11   @ bitWidth 1 (HRESP Not OK)  
 
    .equ GMAC_IMRPQ[%s], GMAC_BASE + 0x63C @ (Interrupt Mask Register Priority Queue index = 1 0) 
        .equ GMAC_RCOMP_Shift, 1   @ bitWidth 1 (Receive Complete)  
        .equ GMAC_RXUBR_Shift, 2   @ bitWidth 1 (RX Used Bit Read)  
        .equ GMAC_RLEX_Shift, 5   @ bitWidth 1 (Retry Limit Exceeded or Late Collision)  
        .equ GMAC_AHB_Shift, 6   @ bitWidth 1 (AHB Error)  
        .equ GMAC_TCOMP_Shift, 7   @ bitWidth 1 (Transmit Complete)  
        .equ GMAC_ROVR_Shift, 10   @ bitWidth 1 (Receive Overrun)  
        .equ GMAC_HRESP_Shift, 11   @ bitWidth 1 (HRESP Not OK)  
 
    .equ GMAC_ST2ER[%s], GMAC_BASE + 0x6E0 @ (Screening Type 2 Ethertype Register index = 0 0) 
        .equ GMAC_COMPVAL_Shift, 0   @ bitWidth 16 (Ethertype Compare Value)  
 
    .equ GMAC_ST2CW00, GMAC_BASE + 0x700 @ (Screening Type 2 Compare Word 0 Register index = 0) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW10, GMAC_BASE + 0x704 @ (Screening Type 2 Compare Word 1 Register index = 0) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW01, GMAC_BASE + 0x708 @ (Screening Type 2 Compare Word 0 Register index = 1) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW11, GMAC_BASE + 0x70C @ (Screening Type 2 Compare Word 1 Register index = 1) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW02, GMAC_BASE + 0x710 @ (Screening Type 2 Compare Word 0 Register index = 2) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW12, GMAC_BASE + 0x714 @ (Screening Type 2 Compare Word 1 Register index = 2) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW03, GMAC_BASE + 0x718 @ (Screening Type 2 Compare Word 0 Register index = 3) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW13, GMAC_BASE + 0x71C @ (Screening Type 2 Compare Word 1 Register index = 3) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW04, GMAC_BASE + 0x720 @ (Screening Type 2 Compare Word 0 Register index = 4) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW14, GMAC_BASE + 0x724 @ (Screening Type 2 Compare Word 1 Register index = 4) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW05, GMAC_BASE + 0x728 @ (Screening Type 2 Compare Word 0 Register index = 5) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW15, GMAC_BASE + 0x72C @ (Screening Type 2 Compare Word 1 Register index = 5) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW06, GMAC_BASE + 0x730 @ (Screening Type 2 Compare Word 0 Register index = 6) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW16, GMAC_BASE + 0x734 @ (Screening Type 2 Compare Word 1 Register index = 6) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW07, GMAC_BASE + 0x738 @ (Screening Type 2 Compare Word 0 Register index = 7) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW17, GMAC_BASE + 0x73C @ (Screening Type 2 Compare Word 1 Register index = 7) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW08, GMAC_BASE + 0x740 @ (Screening Type 2 Compare Word 0 Register index = 8) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW18, GMAC_BASE + 0x744 @ (Screening Type 2 Compare Word 1 Register index = 8) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW09, GMAC_BASE + 0x748 @ (Screening Type 2 Compare Word 0 Register index = 9) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW19, GMAC_BASE + 0x74C @ (Screening Type 2 Compare Word 1 Register index = 9) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW010, GMAC_BASE + 0x750 @ (Screening Type 2 Compare Word 0 Register index = 10) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW110, GMAC_BASE + 0x754 @ (Screening Type 2 Compare Word 1 Register index = 10) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW011, GMAC_BASE + 0x758 @ (Screening Type 2 Compare Word 0 Register index = 11) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW111, GMAC_BASE + 0x75C @ (Screening Type 2 Compare Word 1 Register index = 11) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW012, GMAC_BASE + 0x760 @ (Screening Type 2 Compare Word 0 Register index = 12) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW112, GMAC_BASE + 0x764 @ (Screening Type 2 Compare Word 1 Register index = 12) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW013, GMAC_BASE + 0x768 @ (Screening Type 2 Compare Word 0 Register index = 13) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW113, GMAC_BASE + 0x76C @ (Screening Type 2 Compare Word 1 Register index = 13) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW014, GMAC_BASE + 0x770 @ (Screening Type 2 Compare Word 0 Register index = 14) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW114, GMAC_BASE + 0x774 @ (Screening Type 2 Compare Word 1 Register index = 14) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW015, GMAC_BASE + 0x778 @ (Screening Type 2 Compare Word 0 Register index = 15) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW115, GMAC_BASE + 0x77C @ (Screening Type 2 Compare Word 1 Register index = 15) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW016, GMAC_BASE + 0x780 @ (Screening Type 2 Compare Word 0 Register index = 16) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW116, GMAC_BASE + 0x784 @ (Screening Type 2 Compare Word 1 Register index = 16) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW017, GMAC_BASE + 0x788 @ (Screening Type 2 Compare Word 0 Register index = 17) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW117, GMAC_BASE + 0x78C @ (Screening Type 2 Compare Word 1 Register index = 17) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW018, GMAC_BASE + 0x790 @ (Screening Type 2 Compare Word 0 Register index = 18) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW118, GMAC_BASE + 0x794 @ (Screening Type 2 Compare Word 1 Register index = 18) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW019, GMAC_BASE + 0x798 @ (Screening Type 2 Compare Word 0 Register index = 19) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW119, GMAC_BASE + 0x79C @ (Screening Type 2 Compare Word 1 Register index = 19) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW020, GMAC_BASE + 0x7A0 @ (Screening Type 2 Compare Word 0 Register index = 20) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW120, GMAC_BASE + 0x7A4 @ (Screening Type 2 Compare Word 1 Register index = 20) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW021, GMAC_BASE + 0x7A8 @ (Screening Type 2 Compare Word 0 Register index = 21) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW121, GMAC_BASE + 0x7AC @ (Screening Type 2 Compare Word 1 Register index = 21) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW022, GMAC_BASE + 0x7B0 @ (Screening Type 2 Compare Word 0 Register index = 22) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW122, GMAC_BASE + 0x7B4 @ (Screening Type 2 Compare Word 1 Register index = 22) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 
    .equ GMAC_ST2CW023, GMAC_BASE + 0x7B8 @ (Screening Type 2 Compare Word 0 Register index = 23) 
        .equ GMAC_MASKVAL_Shift, 0   @ bitWidth 16 (Mask Value)  
        .equ GMAC_COMPVAL_Shift, 16   @ bitWidth 16 (Compare Value)  
 
    .equ GMAC_ST2CW123, GMAC_BASE + 0x7BC @ (Screening Type 2 Compare Word 1 Register index = 23) 
        .equ GMAC_OFFSVAL_Shift, 0   @ bitWidth 7 (Offset Value in Bytes)  
        .equ GMAC_OFFSSTRT_Shift, 7   @ bitWidth 2 (Ethernet Frame Offset Start)  
 

@=========================== GPBR ===========================@
.equ GPBR_BASE, 0x400E1890 @ (General Purpose Backup Registers) 
    .equ GPBR_SYS_GPBR[%s], GPBR_BASE + 0x0 @ (General Purpose Backup Register 0) 
        .equ GPBR_GPBR_VALUE_Shift, 0   @ bitWidth 32 (Value of GPBR x)  
 

@=========================== HSMCI ===========================@
.equ HSMCI_BASE, 0x40000000 @ (High Speed MultiMedia Card Interface) 
    .equ HSMCI_CR, HSMCI_BASE + 0x00 @ (Control Register) 
        .equ HSMCI_MCIEN_Shift, 0   @ bitWidth 1 (Multi-Media Interface Enable)  
        .equ HSMCI_MCIDIS_Shift, 1   @ bitWidth 1 (Multi-Media Interface Disable)  
        .equ HSMCI_PWSEN_Shift, 2   @ bitWidth 1 (Power Save Mode Enable)  
        .equ HSMCI_PWSDIS_Shift, 3   @ bitWidth 1 (Power Save Mode Disable)  
        .equ HSMCI_SWRST_Shift, 7   @ bitWidth 1 (Software Reset)  
 
    .equ HSMCI_MR, HSMCI_BASE + 0x04 @ (Mode Register) 
        .equ HSMCI_CLKDIV_Shift, 0   @ bitWidth 8 (Clock Divider)  
        .equ HSMCI_PWSDIV_Shift, 8   @ bitWidth 3 (Power Saving Divider)  
        .equ HSMCI_RDPROOF_Shift, 11   @ bitWidth 1 (Read Proof Enable)  
        .equ HSMCI_WRPROOF_Shift, 12   @ bitWidth 1 (Write Proof Enable)  
        .equ HSMCI_FBYTE_Shift, 13   @ bitWidth 1 (Force Byte Transfer)  
        .equ HSMCI_PADV_Shift, 14   @ bitWidth 1 (Padding Value)  
        .equ HSMCI_CLKODD_Shift, 16   @ bitWidth 1 (Clock divider is odd)  
 
    .equ HSMCI_DTOR, HSMCI_BASE + 0x08 @ (Data Timeout Register) 
        .equ HSMCI_DTOCYC_Shift, 0   @ bitWidth 4 (Data Timeout Cycle Number)  
        .equ HSMCI_DTOMUL_Shift, 4   @ bitWidth 3 (Data Timeout Multiplier)  
 
    .equ HSMCI_SDCR, HSMCI_BASE + 0x0C @ (SD/SDIO Card Register) 
        .equ HSMCI_SDCSEL_Shift, 0   @ bitWidth 2 (SDCard/SDIO Slot)  
        .equ HSMCI_SDCBUS_Shift, 6   @ bitWidth 2 (SDCard/SDIO Bus Width)  
 
    .equ HSMCI_ARGR, HSMCI_BASE + 0x10 @ (Argument Register) 
        .equ HSMCI_ARG_Shift, 0   @ bitWidth 32 (Command Argument)  
 
    .equ HSMCI_CMDR, HSMCI_BASE + 0x14 @ (Command Register) 
        .equ HSMCI_CMDNB_Shift, 0   @ bitWidth 6 (Command Number)  
        .equ HSMCI_RSPTYP_Shift, 6   @ bitWidth 2 (Response Type)  
        .equ HSMCI_SPCMD_Shift, 8   @ bitWidth 3 (Special Command)  
        .equ HSMCI_OPDCMD_Shift, 11   @ bitWidth 1 (Open Drain Command)  
        .equ HSMCI_MAXLAT_Shift, 12   @ bitWidth 1 (Max Latency for Command to Response)  
        .equ HSMCI_TRCMD_Shift, 16   @ bitWidth 2 (Transfer Command)  
        .equ HSMCI_TRDIR_Shift, 18   @ bitWidth 1 (Transfer Direction)  
        .equ HSMCI_TRTYP_Shift, 19   @ bitWidth 3 (Transfer Type)  
        .equ HSMCI_IOSPCMD_Shift, 24   @ bitWidth 2 (SDIO Special Command)  
        .equ HSMCI_ATACS_Shift, 26   @ bitWidth 1 (ATA with Command Completion Signal)  
        .equ HSMCI_BOOT_ACK_Shift, 27   @ bitWidth 1 (Boot Operation Acknowledge)  
 
    .equ HSMCI_BLKR, HSMCI_BASE + 0x18 @ (Block Register) 
        .equ HSMCI_BCNT_Shift, 0   @ bitWidth 16 (MMC/SDIO Block Count - SDIO Byte Count)  
        .equ HSMCI_BLKLEN_Shift, 16   @ bitWidth 16 (Data Block Length)  
 
    .equ HSMCI_CSTOR, HSMCI_BASE + 0x1C @ (Completion Signal Timeout Register) 
        .equ HSMCI_CSTOCYC_Shift, 0   @ bitWidth 4 (Completion Signal Timeout Cycle Number)  
        .equ HSMCI_CSTOMUL_Shift, 4   @ bitWidth 3 (Completion Signal Timeout Multiplier)  
 
    .equ HSMCI_RSPR[%s], HSMCI_BASE + 0x20 @ (Response Register 0) 
        .equ HSMCI_RSP_Shift, 0   @ bitWidth 32 (Response)  
 
    .equ HSMCI_RDR, HSMCI_BASE + 0x30 @ (Receive Data Register) 
        .equ HSMCI_DATA_Shift, 0   @ bitWidth 32 (Data to Read)  
 
    .equ HSMCI_TDR, HSMCI_BASE + 0x34 @ (Transmit Data Register) 
        .equ HSMCI_DATA_Shift, 0   @ bitWidth 32 (Data to Write)  
 
    .equ HSMCI_SR, HSMCI_BASE + 0x40 @ (Status Register) 
        .equ HSMCI_CMDRDY_Shift, 0   @ bitWidth 1 (Command Ready cleared by writing in HSMCI_CMDR)  
        .equ HSMCI_RXRDY_Shift, 1   @ bitWidth 1 (Receiver Ready cleared by reading HSMCI_RDR)  
        .equ HSMCI_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Ready cleared by writing in HSMCI_TDR)  
        .equ HSMCI_BLKE_Shift, 3   @ bitWidth 1 (Data Block Ended cleared on read)  
        .equ HSMCI_DTIP_Shift, 4   @ bitWidth 1 (Data Transfer in Progress cleared at the end of CRC16 calculation)  
        .equ HSMCI_NOTBUSY_Shift, 5   @ bitWidth 1 (HSMCI Not Busy)  
        .equ HSMCI_SDIOIRQA_Shift, 8   @ bitWidth 1 (SDIO Interrupt for Slot A cleared on read)  
        .equ HSMCI_SDIOWAIT_Shift, 12   @ bitWidth 1 (SDIO Read Wait Operation Status)  
        .equ HSMCI_CSRCV_Shift, 13   @ bitWidth 1 (CE-ATA Completion Signal Received cleared on read)  
        .equ HSMCI_RINDE_Shift, 16   @ bitWidth 1 (Response Index Error cleared by writing in HSMCI_CMDR)  
        .equ HSMCI_RDIRE_Shift, 17   @ bitWidth 1 (Response Direction Error cleared by writing in HSMCI_CMDR)  
        .equ HSMCI_RCRCE_Shift, 18   @ bitWidth 1 (Response CRC Error cleared by writing in HSMCI_CMDR)  
        .equ HSMCI_RENDE_Shift, 19   @ bitWidth 1 (Response End Bit Error cleared by writing in HSMCI_CMDR)  
        .equ HSMCI_RTOE_Shift, 20   @ bitWidth 1 (Response Time-out Error cleared by writing in HSMCI_CMDR)  
        .equ HSMCI_DCRCE_Shift, 21   @ bitWidth 1 (Data CRC Error cleared on read)  
        .equ HSMCI_DTOE_Shift, 22   @ bitWidth 1 (Data Time-out Error cleared on read)  
        .equ HSMCI_CSTOE_Shift, 23   @ bitWidth 1 (Completion Signal Time-out Error cleared on read)  
        .equ HSMCI_BLKOVRE_Shift, 24   @ bitWidth 1 (DMA Block Overrun Error cleared on read)  
        .equ HSMCI_FIFOEMPTY_Shift, 26   @ bitWidth 1 (FIFO empty flag)  
        .equ HSMCI_XFRDONE_Shift, 27   @ bitWidth 1 (Transfer Done flag)  
        .equ HSMCI_ACKRCV_Shift, 28   @ bitWidth 1 (Boot Operation Acknowledge Received cleared on read)  
        .equ HSMCI_ACKRCVE_Shift, 29   @ bitWidth 1 (Boot Operation Acknowledge Error cleared on read)  
        .equ HSMCI_OVRE_Shift, 30   @ bitWidth 1 (Overrun if FERRCTRL = 1, cleared by writing in HSMCI_CMDR or cleared on read if FERRCTRL = 0)  
        .equ HSMCI_UNRE_Shift, 31   @ bitWidth 1 (Underrun if FERRCTRL = 1, cleared by writing in HSMCI_CMDR or cleared on read if FERRCTRL = 0)  
 
    .equ HSMCI_IER, HSMCI_BASE + 0x44 @ (Interrupt Enable Register) 
        .equ HSMCI_CMDRDY_Shift, 0   @ bitWidth 1 (Command Ready Interrupt Enable)  
        .equ HSMCI_RXRDY_Shift, 1   @ bitWidth 1 (Receiver Ready Interrupt Enable)  
        .equ HSMCI_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Ready Interrupt Enable)  
        .equ HSMCI_BLKE_Shift, 3   @ bitWidth 1 (Data Block Ended Interrupt Enable)  
        .equ HSMCI_DTIP_Shift, 4   @ bitWidth 1 (Data Transfer in Progress Interrupt Enable)  
        .equ HSMCI_NOTBUSY_Shift, 5   @ bitWidth 1 (Data Not Busy Interrupt Enable)  
        .equ HSMCI_SDIOIRQA_Shift, 8   @ bitWidth 1 (SDIO Interrupt for Slot A Interrupt Enable)  
        .equ HSMCI_SDIOWAIT_Shift, 12   @ bitWidth 1 (SDIO Read Wait Operation Status Interrupt Enable)  
        .equ HSMCI_CSRCV_Shift, 13   @ bitWidth 1 (Completion Signal Received Interrupt Enable)  
        .equ HSMCI_RINDE_Shift, 16   @ bitWidth 1 (Response Index Error Interrupt Enable)  
        .equ HSMCI_RDIRE_Shift, 17   @ bitWidth 1 (Response Direction Error Interrupt Enable)  
        .equ HSMCI_RCRCE_Shift, 18   @ bitWidth 1 (Response CRC Error Interrupt Enable)  
        .equ HSMCI_RENDE_Shift, 19   @ bitWidth 1 (Response End Bit Error Interrupt Enable)  
        .equ HSMCI_RTOE_Shift, 20   @ bitWidth 1 (Response Time-out Error Interrupt Enable)  
        .equ HSMCI_DCRCE_Shift, 21   @ bitWidth 1 (Data CRC Error Interrupt Enable)  
        .equ HSMCI_DTOE_Shift, 22   @ bitWidth 1 (Data Time-out Error Interrupt Enable)  
        .equ HSMCI_CSTOE_Shift, 23   @ bitWidth 1 (Completion Signal Timeout Error Interrupt Enable)  
        .equ HSMCI_BLKOVRE_Shift, 24   @ bitWidth 1 (DMA Block Overrun Error Interrupt Enable)  
        .equ HSMCI_FIFOEMPTY_Shift, 26   @ bitWidth 1 (FIFO empty Interrupt enable)  
        .equ HSMCI_XFRDONE_Shift, 27   @ bitWidth 1 (Transfer Done Interrupt enable)  
        .equ HSMCI_ACKRCV_Shift, 28   @ bitWidth 1 (Boot Acknowledge Interrupt Enable)  
        .equ HSMCI_ACKRCVE_Shift, 29   @ bitWidth 1 (Boot Acknowledge Error Interrupt Enable)  
        .equ HSMCI_OVRE_Shift, 30   @ bitWidth 1 (Overrun Interrupt Enable)  
        .equ HSMCI_UNRE_Shift, 31   @ bitWidth 1 (Underrun Interrupt Enable)  
 
    .equ HSMCI_IDR, HSMCI_BASE + 0x48 @ (Interrupt Disable Register) 
        .equ HSMCI_CMDRDY_Shift, 0   @ bitWidth 1 (Command Ready Interrupt Disable)  
        .equ HSMCI_RXRDY_Shift, 1   @ bitWidth 1 (Receiver Ready Interrupt Disable)  
        .equ HSMCI_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Ready Interrupt Disable)  
        .equ HSMCI_BLKE_Shift, 3   @ bitWidth 1 (Data Block Ended Interrupt Disable)  
        .equ HSMCI_DTIP_Shift, 4   @ bitWidth 1 (Data Transfer in Progress Interrupt Disable)  
        .equ HSMCI_NOTBUSY_Shift, 5   @ bitWidth 1 (Data Not Busy Interrupt Disable)  
        .equ HSMCI_SDIOIRQA_Shift, 8   @ bitWidth 1 (SDIO Interrupt for Slot A Interrupt Disable)  
        .equ HSMCI_SDIOWAIT_Shift, 12   @ bitWidth 1 (SDIO Read Wait Operation Status Interrupt Disable)  
        .equ HSMCI_CSRCV_Shift, 13   @ bitWidth 1 (Completion Signal received interrupt Disable)  
        .equ HSMCI_RINDE_Shift, 16   @ bitWidth 1 (Response Index Error Interrupt Disable)  
        .equ HSMCI_RDIRE_Shift, 17   @ bitWidth 1 (Response Direction Error Interrupt Disable)  
        .equ HSMCI_RCRCE_Shift, 18   @ bitWidth 1 (Response CRC Error Interrupt Disable)  
        .equ HSMCI_RENDE_Shift, 19   @ bitWidth 1 (Response End Bit Error Interrupt Disable)  
        .equ HSMCI_RTOE_Shift, 20   @ bitWidth 1 (Response Time-out Error Interrupt Disable)  
        .equ HSMCI_DCRCE_Shift, 21   @ bitWidth 1 (Data CRC Error Interrupt Disable)  
        .equ HSMCI_DTOE_Shift, 22   @ bitWidth 1 (Data Time-out Error Interrupt Disable)  
        .equ HSMCI_CSTOE_Shift, 23   @ bitWidth 1 (Completion Signal Time out Error Interrupt Disable)  
        .equ HSMCI_BLKOVRE_Shift, 24   @ bitWidth 1 (DMA Block Overrun Error Interrupt Disable)  
        .equ HSMCI_FIFOEMPTY_Shift, 26   @ bitWidth 1 (FIFO empty Interrupt Disable)  
        .equ HSMCI_XFRDONE_Shift, 27   @ bitWidth 1 (Transfer Done Interrupt Disable)  
        .equ HSMCI_ACKRCV_Shift, 28   @ bitWidth 1 (Boot Acknowledge Interrupt Disable)  
        .equ HSMCI_ACKRCVE_Shift, 29   @ bitWidth 1 (Boot Acknowledge Error Interrupt Disable)  
        .equ HSMCI_OVRE_Shift, 30   @ bitWidth 1 (Overrun Interrupt Disable)  
        .equ HSMCI_UNRE_Shift, 31   @ bitWidth 1 (Underrun Interrupt Disable)  
 
    .equ HSMCI_IMR, HSMCI_BASE + 0x4C @ (Interrupt Mask Register) 
        .equ HSMCI_CMDRDY_Shift, 0   @ bitWidth 1 (Command Ready Interrupt Mask)  
        .equ HSMCI_RXRDY_Shift, 1   @ bitWidth 1 (Receiver Ready Interrupt Mask)  
        .equ HSMCI_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Ready Interrupt Mask)  
        .equ HSMCI_BLKE_Shift, 3   @ bitWidth 1 (Data Block Ended Interrupt Mask)  
        .equ HSMCI_DTIP_Shift, 4   @ bitWidth 1 (Data Transfer in Progress Interrupt Mask)  
        .equ HSMCI_NOTBUSY_Shift, 5   @ bitWidth 1 (Data Not Busy Interrupt Mask)  
        .equ HSMCI_SDIOIRQA_Shift, 8   @ bitWidth 1 (SDIO Interrupt for Slot A Interrupt Mask)  
        .equ HSMCI_SDIOWAIT_Shift, 12   @ bitWidth 1 (SDIO Read Wait Operation Status Interrupt Mask)  
        .equ HSMCI_CSRCV_Shift, 13   @ bitWidth 1 (Completion Signal Received Interrupt Mask)  
        .equ HSMCI_RINDE_Shift, 16   @ bitWidth 1 (Response Index Error Interrupt Mask)  
        .equ HSMCI_RDIRE_Shift, 17   @ bitWidth 1 (Response Direction Error Interrupt Mask)  
        .equ HSMCI_RCRCE_Shift, 18   @ bitWidth 1 (Response CRC Error Interrupt Mask)  
        .equ HSMCI_RENDE_Shift, 19   @ bitWidth 1 (Response End Bit Error Interrupt Mask)  
        .equ HSMCI_RTOE_Shift, 20   @ bitWidth 1 (Response Time-out Error Interrupt Mask)  
        .equ HSMCI_DCRCE_Shift, 21   @ bitWidth 1 (Data CRC Error Interrupt Mask)  
        .equ HSMCI_DTOE_Shift, 22   @ bitWidth 1 (Data Time-out Error Interrupt Mask)  
        .equ HSMCI_CSTOE_Shift, 23   @ bitWidth 1 (Completion Signal Time-out Error Interrupt Mask)  
        .equ HSMCI_BLKOVRE_Shift, 24   @ bitWidth 1 (DMA Block Overrun Error Interrupt Mask)  
        .equ HSMCI_FIFOEMPTY_Shift, 26   @ bitWidth 1 (FIFO Empty Interrupt Mask)  
        .equ HSMCI_XFRDONE_Shift, 27   @ bitWidth 1 (Transfer Done Interrupt Mask)  
        .equ HSMCI_ACKRCV_Shift, 28   @ bitWidth 1 (Boot Operation Acknowledge Received Interrupt Mask)  
        .equ HSMCI_ACKRCVE_Shift, 29   @ bitWidth 1 (Boot Operation Acknowledge Error Interrupt Mask)  
        .equ HSMCI_OVRE_Shift, 30   @ bitWidth 1 (Overrun Interrupt Mask)  
        .equ HSMCI_UNRE_Shift, 31   @ bitWidth 1 (Underrun Interrupt Mask)  
 
    .equ HSMCI_DMA, HSMCI_BASE + 0x50 @ (DMA Configuration Register) 
        .equ HSMCI_CHKSIZE_Shift, 4   @ bitWidth 3 (DMA Channel Read and Write Chunk Size)  
        .equ HSMCI_DMAEN_Shift, 8   @ bitWidth 1 (DMA Hardware Handshaking Enable)  
 
    .equ HSMCI_CFG, HSMCI_BASE + 0x54 @ (Configuration Register) 
        .equ HSMCI_FIFOMODE_Shift, 0   @ bitWidth 1 (HSMCI Internal FIFO control mode)  
        .equ HSMCI_FERRCTRL_Shift, 4   @ bitWidth 1 (Flow Error flag reset control mode)  
        .equ HSMCI_HSMODE_Shift, 8   @ bitWidth 1 (High Speed Mode)  
        .equ HSMCI_LSYNC_Shift, 12   @ bitWidth 1 (Synchronize on the last block)  
 
    .equ HSMCI_WPMR, HSMCI_BASE + 0xE4 @ (Write Protection Mode Register) 
        .equ HSMCI_WPEN_Shift, 0   @ bitWidth 1 (Write Protect Enable)  
        .equ HSMCI_WPKEY_Shift, 8   @ bitWidth 24 (Write Protect Key)  
 
    .equ HSMCI_WPSR, HSMCI_BASE + 0xE8 @ (Write Protection Status Register) 
        .equ HSMCI_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ HSMCI_WPVSRC_Shift, 8   @ bitWidth 16 (Write Protection Violation Source)  
 
    .equ HSMCI_FIFO[%s], HSMCI_BASE + 0x200 @ (FIFO Memory Aperture0 0) 
        .equ HSMCI_DATA_Shift, 0   @ bitWidth 32 (Data to Read or Data to Write)  
 

@=========================== ICM ===========================@
.equ ICM_BASE, 0x40048000 @ (Integrity Check Monitor) 
    .equ ICM_CFG, ICM_BASE + 0x00 @ (Configuration Register) 
        .equ ICM_WBDIS_Shift, 0   @ bitWidth 1 (Write Back Disable)  
        .equ ICM_EOMDIS_Shift, 1   @ bitWidth 1 (End of Monitoring Disable)  
        .equ ICM_SLBDIS_Shift, 2   @ bitWidth 1 (Secondary List Branching Disable)  
        .equ ICM_BBC_Shift, 4   @ bitWidth 4 (Bus Burden Control)  
        .equ ICM_ASCD_Shift, 8   @ bitWidth 1 (Automatic Switch To Compare Digest)  
        .equ ICM_DUALBUFF_Shift, 9   @ bitWidth 1 (Dual Input Buffer)  
        .equ ICM_UIHASH_Shift, 12   @ bitWidth 1 (User Initial Hash Value)  
        .equ ICM_UALGO_Shift, 13   @ bitWidth 3 (User SHA Algorithm)  
 
    .equ ICM_CTRL, ICM_BASE + 0x04 @ (Control Register) 
        .equ ICM_ENABLE_Shift, 0   @ bitWidth 1 (ICM Enable)  
        .equ ICM_DISABLE_Shift, 1   @ bitWidth 1 (ICM Disable Register)  
        .equ ICM_SWRST_Shift, 2   @ bitWidth 1 (Software Reset)  
        .equ ICM_REHASH_Shift, 4   @ bitWidth 4 (Recompute Internal Hash)  
        .equ ICM_RMDIS_Shift, 8   @ bitWidth 4 (Region Monitoring Disable)  
        .equ ICM_RMEN_Shift, 12   @ bitWidth 4 (Region Monitoring Enable)  
 
    .equ ICM_SR, ICM_BASE + 0x08 @ (Status Register) 
        .equ ICM_ENABLE_Shift, 0   @ bitWidth 1 (ICM Controller Enable Register)  
        .equ ICM_RAWRMDIS_Shift, 8   @ bitWidth 4 (Region Monitoring Disabled Raw Status)  
        .equ ICM_RMDIS_Shift, 12   @ bitWidth 4 (Region Monitoring Disabled Status)  
 
    .equ ICM_IER, ICM_BASE + 0x10 @ (Interrupt Enable Register) 
        .equ ICM_RHC_Shift, 0   @ bitWidth 4 (Region Hash Completed Interrupt Enable)  
        .equ ICM_RDM_Shift, 4   @ bitWidth 4 (Region Digest Mismatch Interrupt Enable)  
        .equ ICM_RBE_Shift, 8   @ bitWidth 4 (Region Bus Error Interrupt Enable)  
        .equ ICM_RWC_Shift, 12   @ bitWidth 4 (Region Wrap Condition detected Interrupt Enable)  
        .equ ICM_REC_Shift, 16   @ bitWidth 4 (Region End bit Condition Detected Interrupt Enable)  
        .equ ICM_RSU_Shift, 20   @ bitWidth 4 (Region Status Updated Interrupt Disable)  
        .equ ICM_URAD_Shift, 24   @ bitWidth 1 (Undefined Register Access Detection Interrupt Enable)  
 
    .equ ICM_IDR, ICM_BASE + 0x14 @ (Interrupt Disable Register) 
        .equ ICM_RHC_Shift, 0   @ bitWidth 4 (Region Hash Completed Interrupt Disable)  
        .equ ICM_RDM_Shift, 4   @ bitWidth 4 (Region Digest Mismatch Interrupt Disable)  
        .equ ICM_RBE_Shift, 8   @ bitWidth 4 (Region Bus Error Interrupt Disable)  
        .equ ICM_RWC_Shift, 12   @ bitWidth 4 (Region Wrap Condition Detected Interrupt Disable)  
        .equ ICM_REC_Shift, 16   @ bitWidth 4 (Region End bit Condition detected Interrupt Disable)  
        .equ ICM_RSU_Shift, 20   @ bitWidth 4 (Region Status Updated Interrupt Disable)  
        .equ ICM_URAD_Shift, 24   @ bitWidth 1 (Undefined Register Access Detection Interrupt Disable)  
 
    .equ ICM_IMR, ICM_BASE + 0x18 @ (Interrupt Mask Register) 
        .equ ICM_RHC_Shift, 0   @ bitWidth 4 (Region Hash Completed Interrupt Mask)  
        .equ ICM_RDM_Shift, 4   @ bitWidth 4 (Region Digest Mismatch Interrupt Mask)  
        .equ ICM_RBE_Shift, 8   @ bitWidth 4 (Region Bus Error Interrupt Mask)  
        .equ ICM_RWC_Shift, 12   @ bitWidth 4 (Region Wrap Condition Detected Interrupt Mask)  
        .equ ICM_REC_Shift, 16   @ bitWidth 4 (Region End bit Condition Detected Interrupt Mask)  
        .equ ICM_RSU_Shift, 20   @ bitWidth 4 (Region Status Updated Interrupt Mask)  
        .equ ICM_URAD_Shift, 24   @ bitWidth 1 (Undefined Register Access Detection Interrupt Mask)  
 
    .equ ICM_ISR, ICM_BASE + 0x1C @ (Interrupt Status Register) 
        .equ ICM_RHC_Shift, 0   @ bitWidth 4 (Region Hash Completed)  
        .equ ICM_RDM_Shift, 4   @ bitWidth 4 (Region Digest Mismatch)  
        .equ ICM_RBE_Shift, 8   @ bitWidth 4 (Region Bus Error)  
        .equ ICM_RWC_Shift, 12   @ bitWidth 4 (Region Wrap Condition Detected)  
        .equ ICM_REC_Shift, 16   @ bitWidth 4 (Region End bit Condition Detected)  
        .equ ICM_RSU_Shift, 20   @ bitWidth 4 (Region Status Updated Detected)  
        .equ ICM_URAD_Shift, 24   @ bitWidth 1 (Undefined Register Access Detection Status)  
 
    .equ ICM_UASR, ICM_BASE + 0x20 @ (Undefined Access Status Register) 
        .equ ICM_URAT_Shift, 0   @ bitWidth 3 (Undefined Register Access Trace)  
 
    .equ ICM_DSCR, ICM_BASE + 0x30 @ (Region Descriptor Area Start Address Register) 
        .equ ICM_DASA_Shift, 6   @ bitWidth 26 (Descriptor Area Start Address)  
 
    .equ ICM_HASH, ICM_BASE + 0x34 @ (Region Hash Area Start Address Register) 
        .equ ICM_HASA_Shift, 7   @ bitWidth 25 (Hash Area Start Address)  
 
    .equ ICM_UIHVAL[%s], ICM_BASE + 0x38 @ (User Initial Hash Value 0 Register 0) 
        .equ ICM_VAL_Shift, 0   @ bitWidth 32 (Initial Hash Value)  
 

@=========================== ISI ===========================@
.equ ISI_BASE, 0x4004C000 @ (Image Sensor Interface) 
    .equ ISI_CFG1, ISI_BASE + 0x00 @ (ISI Configuration 1 Register) 
        .equ ISI_HSYNC_POL_Shift, 2   @ bitWidth 1 (Horizontal Synchronization Polarity)  
        .equ ISI_VSYNC_POL_Shift, 3   @ bitWidth 1 (Vertical Synchronization Polarity)  
        .equ ISI_PIXCLK_POL_Shift, 4   @ bitWidth 1 (Pixel Clock Polarity)  
        .equ ISI_GRAYLE_Shift, 5   @ bitWidth 1 (Grayscale Little Endian)  
        .equ ISI_EMB_SYNC_Shift, 6   @ bitWidth 1 (Embedded Synchronization)  
        .equ ISI_CRC_SYNC_Shift, 7   @ bitWidth 1 (Embedded Synchronization Correction)  
        .equ ISI_FRATE_Shift, 8   @ bitWidth 3 (Frame Rate [0..7])  
        .equ ISI_DISCR_Shift, 11   @ bitWidth 1 (Disable Codec Request)  
        .equ ISI_FULL_Shift, 12   @ bitWidth 1 (Full Mode is Allowed)  
        .equ ISI_THMASK_Shift, 13   @ bitWidth 2 (Threshold Mask)  
        .equ ISI_SLD_Shift, 16   @ bitWidth 8 (Start of Line Delay)  
        .equ ISI_SFD_Shift, 24   @ bitWidth 8 (Start of Frame Delay)  
 
    .equ ISI_CFG2, ISI_BASE + 0x04 @ (ISI Configuration 2 Register) 
        .equ ISI_IM_VSIZE_Shift, 0   @ bitWidth 11 (Vertical Size of the Image Sensor [0..2047])  
        .equ ISI_GS_MODE_Shift, 11   @ bitWidth 1 (Grayscale Pixel Format Mode)  
        .equ ISI_RGB_MODE_Shift, 12   @ bitWidth 1 (RGB Input Mode)  
        .equ ISI_GRAYSCALE_Shift, 13   @ bitWidth 1 (Grayscale Mode Format Enable)  
        .equ ISI_RGB_SWAP_Shift, 14   @ bitWidth 1 (RGB Format Swap Mode)  
        .equ ISI_COL_SPACE_Shift, 15   @ bitWidth 1 (Color Space for the Image Data)  
        .equ ISI_IM_HSIZE_Shift, 16   @ bitWidth 11 (Horizontal Size of the Image Sensor [0..2047])  
        .equ ISI_YCC_SWAP_Shift, 28   @ bitWidth 2 (YCrCb Format Swap Mode)  
        .equ ISI_RGB_CFG_Shift, 30   @ bitWidth 2 (RGB Pixel Mapping Configuration)  
 
    .equ ISI_PSIZE, ISI_BASE + 0x08 @ (ISI Preview Size Register) 
        .equ ISI_PREV_VSIZE_Shift, 0   @ bitWidth 10 (Vertical Size for the Preview Path)  
        .equ ISI_PREV_HSIZE_Shift, 16   @ bitWidth 10 (Horizontal Size for the Preview Path)  
 
    .equ ISI_PDECF, ISI_BASE + 0x0C @ (ISI Preview Decimation Factor Register) 
        .equ ISI_DEC_FACTOR_Shift, 0   @ bitWidth 8 (Decimation Factor)  
 
    .equ ISI_Y2R_SET0, ISI_BASE + 0x10 @ (ISI Color Space Conversion YCrCb To RGB Set 0 Register) 
        .equ ISI_C0_Shift, 0   @ bitWidth 8 (Color Space Conversion Matrix Coefficient C0)  
        .equ ISI_C1_Shift, 8   @ bitWidth 8 (Color Space Conversion Matrix Coefficient C1)  
        .equ ISI_C2_Shift, 16   @ bitWidth 8 (Color Space Conversion Matrix Coefficient C2)  
        .equ ISI_C3_Shift, 24   @ bitWidth 8 (Color Space Conversion Matrix Coefficient C3)  
 
    .equ ISI_Y2R_SET1, ISI_BASE + 0x14 @ (ISI Color Space Conversion YCrCb To RGB Set 1 Register) 
        .equ ISI_C4_Shift, 0   @ bitWidth 9 (Color Space Conversion Matrix Coefficient C4)  
        .equ ISI_Yoff_Shift, 12   @ bitWidth 1 (Color Space Conversion Luminance Default Offset)  
        .equ ISI_Croff_Shift, 13   @ bitWidth 1 (Color Space Conversion Red Chrominance Default Offset)  
        .equ ISI_Cboff_Shift, 14   @ bitWidth 1 (Color Space Conversion Blue Chrominance Default Offset)  
 
    .equ ISI_R2Y_SET0, ISI_BASE + 0x18 @ (ISI Color Space Conversion RGB To YCrCb Set 0 Register) 
        .equ ISI_C0_Shift, 0   @ bitWidth 7 (Color Space Conversion Matrix Coefficient C0)  
        .equ ISI_C1_Shift, 8   @ bitWidth 7 (Color Space Conversion Matrix Coefficient C1)  
        .equ ISI_C2_Shift, 16   @ bitWidth 7 (Color Space Conversion Matrix Coefficient C2)  
        .equ ISI_Roff_Shift, 24   @ bitWidth 1 (Color Space Conversion Red Component Offset)  
 
    .equ ISI_R2Y_SET1, ISI_BASE + 0x1C @ (ISI Color Space Conversion RGB To YCrCb Set 1 Register) 
        .equ ISI_C3_Shift, 0   @ bitWidth 7 (Color Space Conversion Matrix Coefficient C3)  
        .equ ISI_C4_Shift, 8   @ bitWidth 7 (Color Space Conversion Matrix Coefficient C4)  
        .equ ISI_C5_Shift, 16   @ bitWidth 7 (Color Space Conversion Matrix Coefficient C5)  
        .equ ISI_Goff_Shift, 24   @ bitWidth 1 (Color Space Conversion Green Component Offset)  
 
    .equ ISI_R2Y_SET2, ISI_BASE + 0x20 @ (ISI Color Space Conversion RGB To YCrCb Set 2 Register) 
        .equ ISI_C6_Shift, 0   @ bitWidth 7 (Color Space Conversion Matrix Coefficient C6)  
        .equ ISI_C7_Shift, 8   @ bitWidth 7 (Color Space Conversion Matrix Coefficient C7)  
        .equ ISI_C8_Shift, 16   @ bitWidth 7 (Color Space Conversion Matrix Coefficient C8)  
        .equ ISI_Boff_Shift, 24   @ bitWidth 1 (Color Space Conversion Blue Component Offset)  
 
    .equ ISI_CR, ISI_BASE + 0x24 @ (ISI Control Register) 
        .equ ISI_ISI_EN_Shift, 0   @ bitWidth 1 (ISI Module Enable Request)  
        .equ ISI_ISI_DIS_Shift, 1   @ bitWidth 1 (ISI Module Disable Request)  
        .equ ISI_ISI_SRST_Shift, 2   @ bitWidth 1 (ISI Software Reset Request)  
        .equ ISI_ISI_CDC_Shift, 8   @ bitWidth 1 (ISI Codec Request)  
 
    .equ ISI_SR, ISI_BASE + 0x28 @ (ISI Status Register) 
        .equ ISI_ENABLE_Shift, 0   @ bitWidth 1 (Module Enable)  
        .equ ISI_DIS_DONE_Shift, 1   @ bitWidth 1 (Module Disable Request has Terminated cleared on read)  
        .equ ISI_SRST_Shift, 2   @ bitWidth 1 (Module Software Reset Request has Terminated cleared on read)  
        .equ ISI_CDC_PND_Shift, 8   @ bitWidth 1 (Pending Codec Request)  
        .equ ISI_VSYNC_Shift, 10   @ bitWidth 1 (Vertical Synchronization cleared on read)  
        .equ ISI_PXFR_DONE_Shift, 16   @ bitWidth 1 (Preview DMA Transfer has Terminated cleared on read)  
        .equ ISI_CXFR_DONE_Shift, 17   @ bitWidth 1 (Codec DMA Transfer has Terminated cleared on read)  
        .equ ISI_SIP_Shift, 19   @ bitWidth 1 (Synchronization in Progress)  
        .equ ISI_P_OVR_Shift, 24   @ bitWidth 1 (Preview Datapath Overflow cleared on read)  
        .equ ISI_C_OVR_Shift, 25   @ bitWidth 1 (Codec Datapath Overflow cleared on read)  
        .equ ISI_CRC_ERR_Shift, 26   @ bitWidth 1 (CRC Synchronization Error cleared on read)  
        .equ ISI_FR_OVR_Shift, 27   @ bitWidth 1 (Frame Rate Overrun cleared on read)  
 
    .equ ISI_IER, ISI_BASE + 0x2C @ (ISI Interrupt Enable Register) 
        .equ ISI_DIS_DONE_Shift, 1   @ bitWidth 1 (Disable Done Interrupt Enable)  
        .equ ISI_SRST_Shift, 2   @ bitWidth 1 (Software Reset Interrupt Enable)  
        .equ ISI_VSYNC_Shift, 10   @ bitWidth 1 (Vertical Synchronization Interrupt Enable)  
        .equ ISI_PXFR_DONE_Shift, 16   @ bitWidth 1 (Preview DMA Transfer Done Interrupt Enable)  
        .equ ISI_CXFR_DONE_Shift, 17   @ bitWidth 1 (Codec DMA Transfer Done Interrupt Enable)  
        .equ ISI_P_OVR_Shift, 24   @ bitWidth 1 (Preview Datapath Overflow Interrupt Enable)  
        .equ ISI_C_OVR_Shift, 25   @ bitWidth 1 (Codec Datapath Overflow Interrupt Enable)  
        .equ ISI_CRC_ERR_Shift, 26   @ bitWidth 1 (Embedded Synchronization CRC Error Interrupt Enable)  
        .equ ISI_FR_OVR_Shift, 27   @ bitWidth 1 (Frame Rate Overflow Interrupt Enable)  
 
    .equ ISI_IDR, ISI_BASE + 0x30 @ (ISI Interrupt Disable Register) 
        .equ ISI_DIS_DONE_Shift, 1   @ bitWidth 1 (Disable Done Interrupt Disable)  
        .equ ISI_SRST_Shift, 2   @ bitWidth 1 (Software Reset Interrupt Disable)  
        .equ ISI_VSYNC_Shift, 10   @ bitWidth 1 (Vertical Synchronization Interrupt Disable)  
        .equ ISI_PXFR_DONE_Shift, 16   @ bitWidth 1 (Preview DMA Transfer Done Interrupt Disable)  
        .equ ISI_CXFR_DONE_Shift, 17   @ bitWidth 1 (Codec DMA Transfer Done Interrupt Disable)  
        .equ ISI_P_OVR_Shift, 24   @ bitWidth 1 (Preview Datapath Overflow Interrupt Disable)  
        .equ ISI_C_OVR_Shift, 25   @ bitWidth 1 (Codec Datapath Overflow Interrupt Disable)  
        .equ ISI_CRC_ERR_Shift, 26   @ bitWidth 1 (Embedded Synchronization CRC Error Interrupt Disable)  
        .equ ISI_FR_OVR_Shift, 27   @ bitWidth 1 (Frame Rate Overflow Interrupt Disable)  
 
    .equ ISI_IMR, ISI_BASE + 0x34 @ (ISI Interrupt Mask Register) 
        .equ ISI_DIS_DONE_Shift, 1   @ bitWidth 1 (Module Disable Operation Completed)  
        .equ ISI_SRST_Shift, 2   @ bitWidth 1 (Software Reset Completed)  
        .equ ISI_VSYNC_Shift, 10   @ bitWidth 1 (Vertical Synchronization)  
        .equ ISI_PXFR_DONE_Shift, 16   @ bitWidth 1 (Preview DMA Transfer Completed)  
        .equ ISI_CXFR_DONE_Shift, 17   @ bitWidth 1 (Codec DMA Transfer Completed)  
        .equ ISI_P_OVR_Shift, 24   @ bitWidth 1 (Preview FIFO Overflow)  
        .equ ISI_C_OVR_Shift, 25   @ bitWidth 1 (Codec FIFO Overflow)  
        .equ ISI_CRC_ERR_Shift, 26   @ bitWidth 1 (CRC Synchronization Error)  
        .equ ISI_FR_OVR_Shift, 27   @ bitWidth 1 (Frame Rate Overrun)  
 
    .equ ISI_DMA_CHER, ISI_BASE + 0x38 @ (DMA Channel Enable Register) 
        .equ ISI_P_CH_EN_Shift, 0   @ bitWidth 1 (Preview Channel Enable)  
        .equ ISI_C_CH_EN_Shift, 1   @ bitWidth 1 (Codec Channel Enable)  
 
    .equ ISI_DMA_CHDR, ISI_BASE + 0x3C @ (DMA Channel Disable Register) 
        .equ ISI_P_CH_DIS_Shift, 0   @ bitWidth 1 (Preview Channel Disable Request)  
        .equ ISI_C_CH_DIS_Shift, 1   @ bitWidth 1 (Codec Channel Disable Request)  
 
    .equ ISI_DMA_CHSR, ISI_BASE + 0x40 @ (DMA Channel Status Register) 
        .equ ISI_P_CH_S_Shift, 0   @ bitWidth 1 (Preview DMA Channel Status)  
        .equ ISI_C_CH_S_Shift, 1   @ bitWidth 1 (Code DMA Channel Status)  
 
    .equ ISI_DMA_P_ADDR, ISI_BASE + 0x44 @ (DMA Preview Base Address Register) 
        .equ ISI_P_ADDR_Shift, 2   @ bitWidth 30 (Preview Image Base Address)  
 
    .equ ISI_DMA_P_CTRL, ISI_BASE + 0x48 @ (DMA Preview Control Register) 
        .equ ISI_P_FETCH_Shift, 0   @ bitWidth 1 (Descriptor Fetch Control Bit)  
        .equ ISI_P_WB_Shift, 1   @ bitWidth 1 (Descriptor Writeback Control Bit)  
        .equ ISI_P_IEN_Shift, 2   @ bitWidth 1 (Transfer Done Flag Control)  
        .equ ISI_P_DONE_Shift, 3   @ bitWidth 1 (Preview Transfer Done)  
 
    .equ ISI_DMA_P_DSCR, ISI_BASE + 0x4C @ (DMA Preview Descriptor Address Register) 
        .equ ISI_P_DSCR_Shift, 2   @ bitWidth 30 (Preview Descriptor Base Address)  
 
    .equ ISI_DMA_C_ADDR, ISI_BASE + 0x50 @ (DMA Codec Base Address Register) 
        .equ ISI_C_ADDR_Shift, 2   @ bitWidth 30 (Codec Image Base Address)  
 
    .equ ISI_DMA_C_CTRL, ISI_BASE + 0x54 @ (DMA Codec Control Register) 
        .equ ISI_C_FETCH_Shift, 0   @ bitWidth 1 (Descriptor Fetch Control Bit)  
        .equ ISI_C_WB_Shift, 1   @ bitWidth 1 (Descriptor Writeback Control Bit)  
        .equ ISI_C_IEN_Shift, 2   @ bitWidth 1 (Transfer Done Flag Control)  
        .equ ISI_C_DONE_Shift, 3   @ bitWidth 1 (Codec Transfer Done)  
 
    .equ ISI_DMA_C_DSCR, ISI_BASE + 0x58 @ (DMA Codec Descriptor Address Register) 
        .equ ISI_C_DSCR_Shift, 2   @ bitWidth 30 (Codec Descriptor Base Address)  
 
    .equ ISI_WPMR, ISI_BASE + 0xE4 @ (Write Protection Mode Register) 
        .equ ISI_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ ISI_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key Password)  
 
    .equ ISI_WPSR, ISI_BASE + 0xE8 @ (Write Protection Status Register) 
        .equ ISI_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ ISI_WPVSRC_Shift, 8   @ bitWidth 16 (Write Protection Violation Source)  
 

@=========================== MATRIX ===========================@
.equ MATRIX_BASE, 0x40088000 @ (AHB Bus Matrix) 
    .equ MATRIX_MCFG[%s], MATRIX_BASE + 0x0 @ (Master Configuration Register 0) 
        .equ MATRIX_ULBT_Shift, 0   @ bitWidth 3 (Undefined Length Burst Type)  
 
    .equ MATRIX_SCFG[%s], MATRIX_BASE + 0x40 @ (Slave Configuration Register 0) 
        .equ MATRIX_SLOT_CYCLE_Shift, 0   @ bitWidth 9 (Maximum Bus Grant Duration for Masters)  
        .equ MATRIX_DEFMSTR_TYPE_Shift, 16   @ bitWidth 2 (Default Master Type)  
        .equ MATRIX_FIXED_DEFMSTR_Shift, 18   @ bitWidth 4 (Fixed Default Master)  
 
    .equ MATRIX_MRCR, MATRIX_BASE + 0x0100 @ (Master Remap Control Register) 
        .equ MATRIX_RCB0_Shift, 0   @ bitWidth 1 (Remap Command Bit for Master 0)  
        .equ MATRIX_RCB1_Shift, 1   @ bitWidth 1 (Remap Command Bit for Master 1)  
        .equ MATRIX_RCB2_Shift, 2   @ bitWidth 1 (Remap Command Bit for Master 2)  
        .equ MATRIX_RCB3_Shift, 3   @ bitWidth 1 (Remap Command Bit for Master 3)  
        .equ MATRIX_RCB4_Shift, 4   @ bitWidth 1 (Remap Command Bit for Master 4)  
        .equ MATRIX_RCB5_Shift, 5   @ bitWidth 1 (Remap Command Bit for Master 5)  
        .equ MATRIX_RCB6_Shift, 6   @ bitWidth 1 (Remap Command Bit for Master 6)  
        .equ MATRIX_RCB8_Shift, 8   @ bitWidth 1 (Remap Command Bit for Master 8)  
        .equ MATRIX_RCB9_Shift, 9   @ bitWidth 1 (Remap Command Bit for Master 9)  
        .equ MATRIX_RCB10_Shift, 10   @ bitWidth 1 (Remap Command Bit for Master 10)  
        .equ MATRIX_RCB11_Shift, 11   @ bitWidth 1 (Remap Command Bit for Master 11)  
 
    .equ MATRIX_CCFG_CAN0, MATRIX_BASE + 0x0110 @ (CAN0 Configuration Register) 
        .equ MATRIX_CAN0DMABA_Shift, 16   @ bitWidth 16 (CAN0 DMA Base Address)  
 
    .equ MATRIX_CCFG_SYSIO, MATRIX_BASE + 0x0114 @ (System I/O and CAN1 Configuration Register) 
        .equ MATRIX_SYSIO4_Shift, 4   @ bitWidth 1 (PB4 or TDI Assignment)  
        .equ MATRIX_SYSIO5_Shift, 5   @ bitWidth 1 (PB5 or TDO/TRACESWO Assignment)  
        .equ MATRIX_SYSIO6_Shift, 6   @ bitWidth 1 (PB6 or TMS/SWDIO Assignment)  
        .equ MATRIX_SYSIO7_Shift, 7   @ bitWidth 1 (PB7 or TCK/SWCLK Assignment)  
        .equ MATRIX_SYSIO12_Shift, 12   @ bitWidth 1 (PB12 or ERASE Assignment)  
        .equ MATRIX_CAN1DMABA_Shift, 16   @ bitWidth 16 (CAN1 DMA Base Address)  
 
    .equ MATRIX_CCFG_SMCNFCS, MATRIX_BASE + 0x0124 @ (SMC NAND Flash Chip Select Configuration Register) 
        .equ MATRIX_SMC_NFCS0_Shift, 0   @ bitWidth 1 (SMC NAND Flash Chip Select 0 Assignment)  
        .equ MATRIX_SMC_NFCS1_Shift, 1   @ bitWidth 1 (SMC NAND Flash Chip Select 1 Assignment)  
        .equ MATRIX_SMC_NFCS2_Shift, 2   @ bitWidth 1 (SMC NAND Flash Chip Select 2 Assignment)  
        .equ MATRIX_SMC_NFCS3_Shift, 3   @ bitWidth 1 (SMC NAND Flash Chip Select 3 Assignment)  
        .equ MATRIX_SDRAMEN_Shift, 4   @ bitWidth 1 (SDRAM Enable)  
 
    .equ MATRIX_WPMR, MATRIX_BASE + 0x01E4 @ (Write Protection Mode Register) 
        .equ MATRIX_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ MATRIX_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ MATRIX_WPSR, MATRIX_BASE + 0x01E8 @ (Write Protection Status Register) 
        .equ MATRIX_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ MATRIX_WPVSRC_Shift, 8   @ bitWidth 16 (Write Protection Violation Source)  
 

@=========================== MCAN0 ===========================@
.equ MCAN0_BASE, 0x40030000 @ (Controller Area Network) 
    .equ MCAN0_CUST, MCAN0_BASE + 0x08 @ (Customer Register) 
        .equ MCAN0_CSV_Shift, 0   @ bitWidth 32 (Customer-specific Value)  
 
    .equ MCAN0_FBTP, MCAN0_BASE + 0x0C @ (Fast Bit Timing and Prescaler Register) 
        .equ MCAN0_FSJW_Shift, 0   @ bitWidth 2 (Fast Re Synchronization Jump Width)  
        .equ MCAN0_FTSEG2_Shift, 4   @ bitWidth 3 (Fast Time Segment After Sample Point)  
        .equ MCAN0_FTSEG1_Shift, 8   @ bitWidth 4 (Fast Time Segment Before Sample Point)  
        .equ MCAN0_FBRP_Shift, 16   @ bitWidth 5 (Fast Baud Rate Prescaler)  
        .equ MCAN0_TDC_Shift, 23   @ bitWidth 1 (Transceiver Delay Compensation)  
        .equ MCAN0_TDCO_Shift, 24   @ bitWidth 5 (Transceiver Delay Compensation Offset)  
 
    .equ MCAN0_TEST, MCAN0_BASE + 0x10 @ (Test Register) 
        .equ MCAN0_LBCK_Shift, 4   @ bitWidth 1 (Loop Back Mode read/write)  
        .equ MCAN0_TX_Shift, 5   @ bitWidth 2 (Control of Transmit Pin read/write)  
        .equ MCAN0_RX_Shift, 7   @ bitWidth 1 (Receive Pin read-only)  
        .equ MCAN0_TDCV_Shift, 8   @ bitWidth 6 (Transceiver Delay Compensation Value read-only)  
 
    .equ MCAN0_RWD, MCAN0_BASE + 0x14 @ (RAM Watchdog Register) 
        .equ MCAN0_WDC_Shift, 0   @ bitWidth 8 (Watchdog Configuration read/write)  
        .equ MCAN0_WDV_Shift, 8   @ bitWidth 8 (Watchdog Value read-only)  
 
    .equ MCAN0_CCCR, MCAN0_BASE + 0x18 @ (CC Control Register) 
        .equ MCAN0_INIT_Shift, 0   @ bitWidth 1 (Initialization read/write)  
        .equ MCAN0_CCE_Shift, 1   @ bitWidth 1 (Configuration Change Enable read/write, write protection)  
        .equ MCAN0_ASM_Shift, 2   @ bitWidth 1 (Restricted Operation Mode read/write, write protection against '1')  
        .equ MCAN0_CSA_Shift, 3   @ bitWidth 1 (Clock Stop Acknowledge read-only)  
        .equ MCAN0_CSR_Shift, 4   @ bitWidth 1 (Clock Stop Request read/write)  
        .equ MCAN0_MON_Shift, 5   @ bitWidth 1 (Bus Monitoring Mode read/write, write protection against '1')  
        .equ MCAN0_DAR_Shift, 6   @ bitWidth 1 (Disable Automatic Retransmission read/write, write protection)  
        .equ MCAN0_TEST_Shift, 7   @ bitWidth 1 (Test Mode Enable read/write, write protection against '1')  
        .equ MCAN0_CME_Shift, 8   @ bitWidth 2 (CAN Mode Enable read/write, write protection)  
        .equ MCAN0_CMR_Shift, 10   @ bitWidth 2 (CAN Mode Request read/write)  
        .equ MCAN0_FDO_Shift, 12   @ bitWidth 1 (CAN FD Operation read-only)  
        .equ MCAN0_FDBS_Shift, 13   @ bitWidth 1 (CAN FD Bit Rate Switching read-only)  
        .equ MCAN0_TXP_Shift, 14   @ bitWidth 1 (Transmit Pause read/write, write protection)  
 
    .equ MCAN0_BTP, MCAN0_BASE + 0x1C @ (Bit Timing and Prescaler Register) 
        .equ MCAN0_SJW_Shift, 0   @ bitWidth 4 (Re Synchronization Jump Width)  
        .equ MCAN0_TSEG2_Shift, 4   @ bitWidth 4 (Time Segment After Sample Point)  
        .equ MCAN0_TSEG1_Shift, 8   @ bitWidth 6 (Time Segment Before Sample Point)  
        .equ MCAN0_BRP_Shift, 16   @ bitWidth 10 (Baud Rate Prescaler)  
 
    .equ MCAN0_TSCC, MCAN0_BASE + 0x20 @ (Timestamp Counter Configuration Register) 
        .equ MCAN0_TSS_Shift, 0   @ bitWidth 2 (Timestamp Select)  
        .equ MCAN0_TCP_Shift, 16   @ bitWidth 4 (Timestamp Counter Prescaler)  
 
    .equ MCAN0_TSCV, MCAN0_BASE + 0x24 @ (Timestamp Counter Value Register) 
        .equ MCAN0_TSC_Shift, 0   @ bitWidth 16 (Timestamp Counter cleared on write)  
 
    .equ MCAN0_TOCC, MCAN0_BASE + 0x28 @ (Timeout Counter Configuration Register) 
        .equ MCAN0_ETOC_Shift, 0   @ bitWidth 1 (Enable Timeout Counter)  
        .equ MCAN0_TOS_Shift, 1   @ bitWidth 2 (Timeout Select)  
        .equ MCAN0_TOP_Shift, 16   @ bitWidth 16 (Timeout Period)  
 
    .equ MCAN0_TOCV, MCAN0_BASE + 0x2C @ (Timeout Counter Value Register) 
        .equ MCAN0_TOC_Shift, 0   @ bitWidth 16 (Timeout Counter cleared on write)  
 
    .equ MCAN0_ECR, MCAN0_BASE + 0x40 @ (Error Counter Register) 
        .equ MCAN0_TEC_Shift, 0   @ bitWidth 8 (Transmit Error Counter)  
        .equ MCAN0_REC_Shift, 8   @ bitWidth 7 (Receive Error Counter)  
        .equ MCAN0_RP_Shift, 15   @ bitWidth 1 (Receive Error Passive)  
        .equ MCAN0_CEL_Shift, 16   @ bitWidth 8 (CAN Error Logging cleared on read)  
 
    .equ MCAN0_PSR, MCAN0_BASE + 0x44 @ (Protocol Status Register) 
        .equ MCAN0_LEC_Shift, 0   @ bitWidth 3 (Last Error Code set to 111 on read)  
        .equ MCAN0_ACT_Shift, 3   @ bitWidth 2 (Activity)  
        .equ MCAN0_EP_Shift, 5   @ bitWidth 1 (Error Passive)  
        .equ MCAN0_EW_Shift, 6   @ bitWidth 1 (Warning Status)  
        .equ MCAN0_BO_Shift, 7   @ bitWidth 1 (Bus_Off Status)  
        .equ MCAN0_FLEC_Shift, 8   @ bitWidth 3 (Fast Last Error Code set to 111 on read)  
        .equ MCAN0_RESI_Shift, 11   @ bitWidth 1 (ESI Flag of Last Received CAN FD Message cleared on read)  
        .equ MCAN0_RBRS_Shift, 12   @ bitWidth 1 (BRS Flag of Last Received CAN FD Message cleared on read)  
        .equ MCAN0_REDL_Shift, 13   @ bitWidth 1 (Received a CAN FD Message cleared on read)  
 
    .equ MCAN0_IR, MCAN0_BASE + 0x50 @ (Interrupt Register) 
        .equ MCAN0_RF0N_Shift, 0   @ bitWidth 1 (Receive FIFO 0 New Message)  
        .equ MCAN0_RF0W_Shift, 1   @ bitWidth 1 (Receive FIFO 0 Watermark Reached)  
        .equ MCAN0_RF0F_Shift, 2   @ bitWidth 1 (Receive FIFO 0 Full)  
        .equ MCAN0_RF0L_Shift, 3   @ bitWidth 1 (Receive FIFO 0 Message Lost)  
        .equ MCAN0_RF1N_Shift, 4   @ bitWidth 1 (Receive FIFO 1 New Message)  
        .equ MCAN0_RF1W_Shift, 5   @ bitWidth 1 (Receive FIFO 1 Watermark Reached)  
        .equ MCAN0_RF1F_Shift, 6   @ bitWidth 1 (Receive FIFO 1 Full)  
        .equ MCAN0_RF1L_Shift, 7   @ bitWidth 1 (Receive FIFO 1 Message Lost)  
        .equ MCAN0_HPM_Shift, 8   @ bitWidth 1 (High Priority Message)  
        .equ MCAN0_TC_Shift, 9   @ bitWidth 1 (Transmission Completed)  
        .equ MCAN0_TCF_Shift, 10   @ bitWidth 1 (Transmission Cancellation Finished)  
        .equ MCAN0_TFE_Shift, 11   @ bitWidth 1 (Tx FIFO Empty)  
        .equ MCAN0_TEFN_Shift, 12   @ bitWidth 1 (Tx Event FIFO New Entry)  
        .equ MCAN0_TEFW_Shift, 13   @ bitWidth 1 (Tx Event FIFO Watermark Reached)  
        .equ MCAN0_TEFF_Shift, 14   @ bitWidth 1 (Tx Event FIFO Full)  
        .equ MCAN0_TEFL_Shift, 15   @ bitWidth 1 (Tx Event FIFO Element Lost)  
        .equ MCAN0_TSW_Shift, 16   @ bitWidth 1 (Timestamp Wraparound)  
        .equ MCAN0_MRAF_Shift, 17   @ bitWidth 1 (Message RAM Access Failure)  
        .equ MCAN0_TOO_Shift, 18   @ bitWidth 1 (Timeout Occurred)  
        .equ MCAN0_DRX_Shift, 19   @ bitWidth 1 (Message stored to Dedicated Receive Buffer)  
        .equ MCAN0_ELO_Shift, 22   @ bitWidth 1 (Error Logging Overflow)  
        .equ MCAN0_EP_Shift, 23   @ bitWidth 1 (Error Passive)  
        .equ MCAN0_EW_Shift, 24   @ bitWidth 1 (Warning Status)  
        .equ MCAN0_BO_Shift, 25   @ bitWidth 1 (Bus_Off Status)  
        .equ MCAN0_WDI_Shift, 26   @ bitWidth 1 (Watchdog Interrupt)  
        .equ MCAN0_CRCE_Shift, 27   @ bitWidth 1 (CRC Error)  
        .equ MCAN0_BE_Shift, 28   @ bitWidth 1 (Bit Error)  
        .equ MCAN0_ACKE_Shift, 29   @ bitWidth 1 (Acknowledge Error)  
        .equ MCAN0_FOE_Shift, 30   @ bitWidth 1 (Format Error)  
        .equ MCAN0_STE_Shift, 31   @ bitWidth 1 (Stuff Error)  
 
    .equ MCAN0_IE, MCAN0_BASE + 0x54 @ (Interrupt Enable Register) 
        .equ MCAN0_RF0NE_Shift, 0   @ bitWidth 1 (Receive FIFO 0 New Message Interrupt Enable)  
        .equ MCAN0_RF0WE_Shift, 1   @ bitWidth 1 (Receive FIFO 0 Watermark Reached Interrupt Enable)  
        .equ MCAN0_RF0FE_Shift, 2   @ bitWidth 1 (Receive FIFO 0 Full Interrupt Enable)  
        .equ MCAN0_RF0LE_Shift, 3   @ bitWidth 1 (Receive FIFO 0 Message Lost Interrupt Enable)  
        .equ MCAN0_RF1NE_Shift, 4   @ bitWidth 1 (Receive FIFO 1 New Message Interrupt Enable)  
        .equ MCAN0_RF1WE_Shift, 5   @ bitWidth 1 (Receive FIFO 1 Watermark Reached Interrupt Enable)  
        .equ MCAN0_RF1FE_Shift, 6   @ bitWidth 1 (Receive FIFO 1 Full Interrupt Enable)  
        .equ MCAN0_RF1LE_Shift, 7   @ bitWidth 1 (Receive FIFO 1 Message Lost Interrupt Enable)  
        .equ MCAN0_HPME_Shift, 8   @ bitWidth 1 (High Priority Message Interrupt Enable)  
        .equ MCAN0_TCE_Shift, 9   @ bitWidth 1 (Transmission Completed Interrupt Enable)  
        .equ MCAN0_TCFE_Shift, 10   @ bitWidth 1 (Transmission Cancellation Finished Interrupt Enable)  
        .equ MCAN0_TFEE_Shift, 11   @ bitWidth 1 (Tx FIFO Empty Interrupt Enable)  
        .equ MCAN0_TEFNE_Shift, 12   @ bitWidth 1 (Tx Event FIFO New Entry Interrupt Enable)  
        .equ MCAN0_TEFWE_Shift, 13   @ bitWidth 1 (Tx Event FIFO Watermark Reached Interrupt Enable)  
        .equ MCAN0_TEFFE_Shift, 14   @ bitWidth 1 (Tx Event FIFO Full Interrupt Enable)  
        .equ MCAN0_TEFLE_Shift, 15   @ bitWidth 1 (Tx Event FIFO Event Lost Interrupt Enable)  
        .equ MCAN0_TSWE_Shift, 16   @ bitWidth 1 (Timestamp Wraparound Interrupt Enable)  
        .equ MCAN0_MRAFE_Shift, 17   @ bitWidth 1 (Message RAM Access Failure Interrupt Enable)  
        .equ MCAN0_TOOE_Shift, 18   @ bitWidth 1 (Timeout Occurred Interrupt Enable)  
        .equ MCAN0_DRXE_Shift, 19   @ bitWidth 1 (Message stored to Dedicated Receive Buffer Interrupt Enable)  
        .equ MCAN0_ELOE_Shift, 22   @ bitWidth 1 (Error Logging Overflow Interrupt Enable)  
        .equ MCAN0_EPE_Shift, 23   @ bitWidth 1 (Error Passive Interrupt Enable)  
        .equ MCAN0_EWE_Shift, 24   @ bitWidth 1 (Warning Status Interrupt Enable)  
        .equ MCAN0_BOE_Shift, 25   @ bitWidth 1 (Bus_Off Status Interrupt Enable)  
        .equ MCAN0_WDIE_Shift, 26   @ bitWidth 1 (Watchdog Interrupt Enable)  
        .equ MCAN0_CRCEE_Shift, 27   @ bitWidth 1 (CRC Error Interrupt Enable)  
        .equ MCAN0_BEE_Shift, 28   @ bitWidth 1 (Bit Error Interrupt Enable)  
        .equ MCAN0_ACKEE_Shift, 29   @ bitWidth 1 (Acknowledge Error Interrupt Enable)  
        .equ MCAN0_FOEE_Shift, 30   @ bitWidth 1 (Format Error Interrupt Enable)  
        .equ MCAN0_STEE_Shift, 31   @ bitWidth 1 (Stuff Error Interrupt Enable)  
 
    .equ MCAN0_ILS, MCAN0_BASE + 0x58 @ (Interrupt Line Select Register) 
        .equ MCAN0_RF0NL_Shift, 0   @ bitWidth 1 (Receive FIFO 0 New Message Interrupt Line)  
        .equ MCAN0_RF0WL_Shift, 1   @ bitWidth 1 (Receive FIFO 0 Watermark Reached Interrupt Line)  
        .equ MCAN0_RF0FL_Shift, 2   @ bitWidth 1 (Receive FIFO 0 Full Interrupt Line)  
        .equ MCAN0_RF0LL_Shift, 3   @ bitWidth 1 (Receive FIFO 0 Message Lost Interrupt Line)  
        .equ MCAN0_RF1NL_Shift, 4   @ bitWidth 1 (Receive FIFO 1 New Message Interrupt Line)  
        .equ MCAN0_RF1WL_Shift, 5   @ bitWidth 1 (Receive FIFO 1 Watermark Reached Interrupt Line)  
        .equ MCAN0_RF1FL_Shift, 6   @ bitWidth 1 (Receive FIFO 1 Full Interrupt Line)  
        .equ MCAN0_RF1LL_Shift, 7   @ bitWidth 1 (Receive FIFO 1 Message Lost Interrupt Line)  
        .equ MCAN0_HPML_Shift, 8   @ bitWidth 1 (High Priority Message Interrupt Line)  
        .equ MCAN0_TCL_Shift, 9   @ bitWidth 1 (Transmission Completed Interrupt Line)  
        .equ MCAN0_TCFL_Shift, 10   @ bitWidth 1 (Transmission Cancellation Finished Interrupt Line)  
        .equ MCAN0_TFEL_Shift, 11   @ bitWidth 1 (Tx FIFO Empty Interrupt Line)  
        .equ MCAN0_TEFNL_Shift, 12   @ bitWidth 1 (Tx Event FIFO New Entry Interrupt Line)  
        .equ MCAN0_TEFWL_Shift, 13   @ bitWidth 1 (Tx Event FIFO Watermark Reached Interrupt Line)  
        .equ MCAN0_TEFFL_Shift, 14   @ bitWidth 1 (Tx Event FIFO Full Interrupt Line)  
        .equ MCAN0_TEFLL_Shift, 15   @ bitWidth 1 (Tx Event FIFO Event Lost Interrupt Line)  
        .equ MCAN0_TSWL_Shift, 16   @ bitWidth 1 (Timestamp Wraparound Interrupt Line)  
        .equ MCAN0_MRAFL_Shift, 17   @ bitWidth 1 (Message RAM Access Failure Interrupt Line)  
        .equ MCAN0_TOOL_Shift, 18   @ bitWidth 1 (Timeout Occurred Interrupt Line)  
        .equ MCAN0_DRXL_Shift, 19   @ bitWidth 1 (Message stored to Dedicated Receive Buffer Interrupt Line)  
        .equ MCAN0_ELOL_Shift, 22   @ bitWidth 1 (Error Logging Overflow Interrupt Line)  
        .equ MCAN0_EPL_Shift, 23   @ bitWidth 1 (Error Passive Interrupt Line)  
        .equ MCAN0_EWL_Shift, 24   @ bitWidth 1 (Warning Status Interrupt Line)  
        .equ MCAN0_BOL_Shift, 25   @ bitWidth 1 (Bus_Off Status Interrupt Line)  
        .equ MCAN0_WDIL_Shift, 26   @ bitWidth 1 (Watchdog Interrupt Line)  
        .equ MCAN0_CRCEL_Shift, 27   @ bitWidth 1 (CRC Error Interrupt Line)  
        .equ MCAN0_BEL_Shift, 28   @ bitWidth 1 (Bit Error Interrupt Line)  
        .equ MCAN0_ACKEL_Shift, 29   @ bitWidth 1 (Acknowledge Error Interrupt Line)  
        .equ MCAN0_FOEL_Shift, 30   @ bitWidth 1 (Format Error Interrupt Line)  
        .equ MCAN0_STEL_Shift, 31   @ bitWidth 1 (Stuff Error Interrupt Line)  
 
    .equ MCAN0_ILE, MCAN0_BASE + 0x5C @ (Interrupt Line Enable Register) 
        .equ MCAN0_EINT0_Shift, 0   @ bitWidth 1 (Enable Interrupt Line 0)  
        .equ MCAN0_EINT1_Shift, 1   @ bitWidth 1 (Enable Interrupt Line 1)  
 
    .equ MCAN0_GFC, MCAN0_BASE + 0x80 @ (Global Filter Configuration Register) 
        .equ MCAN0_RRFE_Shift, 0   @ bitWidth 1 (Reject Remote Frames Extended)  
        .equ MCAN0_RRFS_Shift, 1   @ bitWidth 1 (Reject Remote Frames Standard)  
        .equ MCAN0_ANFE_Shift, 2   @ bitWidth 2 (Accept Non-matching Frames Extended)  
        .equ MCAN0_ANFS_Shift, 4   @ bitWidth 2 (Accept Non-matching Frames Standard)  
 
    .equ MCAN0_SIDFC, MCAN0_BASE + 0x84 @ (Standard ID Filter Configuration Register) 
        .equ MCAN0_FLSSA_Shift, 2   @ bitWidth 14 (Filter List Standard Start Address)  
        .equ MCAN0_LSS_Shift, 16   @ bitWidth 8 (List Size Standard)  
 
    .equ MCAN0_XIDFC, MCAN0_BASE + 0x88 @ (Extended ID Filter Configuration Register) 
        .equ MCAN0_FLESA_Shift, 2   @ bitWidth 14 (Filter List Extended Start Address)  
        .equ MCAN0_LSE_Shift, 16   @ bitWidth 7 (List Size Extended)  
 
    .equ MCAN0_XIDAM, MCAN0_BASE + 0x90 @ (Extended ID AND Mask Register) 
        .equ MCAN0_EIDM_Shift, 0   @ bitWidth 29 (Extended ID Mask)  
 
    .equ MCAN0_HPMS, MCAN0_BASE + 0x94 @ (High Priority Message Status Register) 
        .equ MCAN0_BIDX_Shift, 0   @ bitWidth 6 (Buffer Index)  
        .equ MCAN0_MSI_Shift, 6   @ bitWidth 2 (Message Storage Indicator)  
        .equ MCAN0_FIDX_Shift, 8   @ bitWidth 7 (Filter Index)  
        .equ MCAN0_FLST_Shift, 15   @ bitWidth 1 (Filter List)  
 
    .equ MCAN0_NDAT1, MCAN0_BASE + 0x98 @ (New Data 1 Register) 
        .equ MCAN0_ND0_Shift, 0   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND1_Shift, 1   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND2_Shift, 2   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND3_Shift, 3   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND4_Shift, 4   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND5_Shift, 5   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND6_Shift, 6   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND7_Shift, 7   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND8_Shift, 8   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND9_Shift, 9   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND10_Shift, 10   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND11_Shift, 11   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND12_Shift, 12   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND13_Shift, 13   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND14_Shift, 14   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND15_Shift, 15   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND16_Shift, 16   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND17_Shift, 17   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND18_Shift, 18   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND19_Shift, 19   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND20_Shift, 20   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND21_Shift, 21   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND22_Shift, 22   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND23_Shift, 23   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND24_Shift, 24   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND25_Shift, 25   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND26_Shift, 26   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND27_Shift, 27   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND28_Shift, 28   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND29_Shift, 29   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND30_Shift, 30   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND31_Shift, 31   @ bitWidth 1 (New Data)  
 
    .equ MCAN0_NDAT2, MCAN0_BASE + 0x9C @ (New Data 2 Register) 
        .equ MCAN0_ND32_Shift, 0   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND33_Shift, 1   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND34_Shift, 2   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND35_Shift, 3   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND36_Shift, 4   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND37_Shift, 5   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND38_Shift, 6   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND39_Shift, 7   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND40_Shift, 8   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND41_Shift, 9   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND42_Shift, 10   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND43_Shift, 11   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND44_Shift, 12   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND45_Shift, 13   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND46_Shift, 14   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND47_Shift, 15   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND48_Shift, 16   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND49_Shift, 17   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND50_Shift, 18   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND51_Shift, 19   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND52_Shift, 20   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND53_Shift, 21   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND54_Shift, 22   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND55_Shift, 23   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND56_Shift, 24   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND57_Shift, 25   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND58_Shift, 26   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND59_Shift, 27   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND60_Shift, 28   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND61_Shift, 29   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND62_Shift, 30   @ bitWidth 1 (New Data)  
        .equ MCAN0_ND63_Shift, 31   @ bitWidth 1 (New Data)  
 
    .equ MCAN0_RXF0C, MCAN0_BASE + 0xA0 @ (Receive FIFO 0 Configuration Register) 
        .equ MCAN0_F0SA_Shift, 2   @ bitWidth 14 (Receive FIFO 0 Start Address)  
        .equ MCAN0_F0S_Shift, 16   @ bitWidth 7 (Receive FIFO 0 Start Address)  
        .equ MCAN0_F0WM_Shift, 24   @ bitWidth 7 (Receive FIFO 0 Watermark)  
        .equ MCAN0_F0OM_Shift, 31   @ bitWidth 1 (FIFO 0 Operation Mode)  
 
    .equ MCAN0_RXF0S, MCAN0_BASE + 0xA4 @ (Receive FIFO 0 Status Register) 
        .equ MCAN0_F0FL_Shift, 0   @ bitWidth 7 (Receive FIFO 0 Fill Level)  
        .equ MCAN0_F0GI_Shift, 8   @ bitWidth 6 (Receive FIFO 0 Get Index)  
        .equ MCAN0_F0PI_Shift, 16   @ bitWidth 6 (Receive FIFO 0 Put Index)  
        .equ MCAN0_F0F_Shift, 24   @ bitWidth 1 (Receive FIFO 0 Fill Level)  
        .equ MCAN0_RF0L_Shift, 25   @ bitWidth 1 (Receive FIFO 0 Message Lost)  
 
    .equ MCAN0_RXF0A, MCAN0_BASE + 0xA8 @ (Receive FIFO 0 Acknowledge Register) 
        .equ MCAN0_F0AI_Shift, 0   @ bitWidth 6 (Receive FIFO 0 Acknowledge Index)  
 
    .equ MCAN0_RXBC, MCAN0_BASE + 0xAC @ (Receive Rx Buffer Configuration Register) 
        .equ MCAN0_RBSA_Shift, 2   @ bitWidth 14 (Receive Buffer Start Address)  
 
    .equ MCAN0_RXF1C, MCAN0_BASE + 0xB0 @ (Receive FIFO 1 Configuration Register) 
        .equ MCAN0_F1SA_Shift, 2   @ bitWidth 14 (Receive FIFO 1 Start Address)  
        .equ MCAN0_F1S_Shift, 16   @ bitWidth 7 (Receive FIFO 1 Start Address)  
        .equ MCAN0_F1WM_Shift, 24   @ bitWidth 7 (Receive FIFO 1 Watermark)  
        .equ MCAN0_F1OM_Shift, 31   @ bitWidth 1 (FIFO 1 Operation Mode)  
 
    .equ MCAN0_RXF1S, MCAN0_BASE + 0xB4 @ (Receive FIFO 1 Status Register) 
        .equ MCAN0_F1FL_Shift, 0   @ bitWidth 7 (Receive FIFO 1 Fill Level)  
        .equ MCAN0_F1GI_Shift, 8   @ bitWidth 6 (Receive FIFO 1 Get Index)  
        .equ MCAN0_F1PI_Shift, 16   @ bitWidth 6 (Receive FIFO 1 Put Index)  
        .equ MCAN0_F1F_Shift, 24   @ bitWidth 1 (Receive FIFO 1 Fill Level)  
        .equ MCAN0_RF1L_Shift, 25   @ bitWidth 1 (Receive FIFO 1 Message Lost)  
        .equ MCAN0_DMS_Shift, 30   @ bitWidth 2 (Debug Message Status)  
 
    .equ MCAN0_RXF1A, MCAN0_BASE + 0xB8 @ (Receive FIFO 1 Acknowledge Register) 
        .equ MCAN0_F1AI_Shift, 0   @ bitWidth 6 (Receive FIFO 1 Acknowledge Index)  
 
    .equ MCAN0_RXESC, MCAN0_BASE + 0xBC @ (Receive Buffer / FIFO Element Size Configuration Register) 
        .equ MCAN0_F0DS_Shift, 0   @ bitWidth 3 (Receive FIFO 0 Data Field Size)  
        .equ MCAN0_F1DS_Shift, 4   @ bitWidth 3 (Receive FIFO 1 Data Field Size)  
        .equ MCAN0_RBDS_Shift, 8   @ bitWidth 3 (Receive Buffer Data Field Size)  
 
    .equ MCAN0_TXBC, MCAN0_BASE + 0xC0 @ (Transmit Buffer Configuration Register) 
        .equ MCAN0_TBSA_Shift, 2   @ bitWidth 14 (Tx Buffers Start Address)  
        .equ MCAN0_NDTB_Shift, 16   @ bitWidth 6 (Number of Dedicated Transmit Buffers)  
        .equ MCAN0_TFQS_Shift, 24   @ bitWidth 6 (Transmit FIFO/Queue Size)  
        .equ MCAN0_TFQM_Shift, 30   @ bitWidth 1 (Tx FIFO/Queue Mode)  
 
    .equ MCAN0_TXFQS, MCAN0_BASE + 0xC4 @ (Transmit FIFO/Queue Status Register) 
        .equ MCAN0_TFFL_Shift, 0   @ bitWidth 6 (Tx FIFO Free Level)  
        .equ MCAN0_TFGI_Shift, 8   @ bitWidth 5 (Tx FIFO Get Index)  
        .equ MCAN0_TFQPI_Shift, 16   @ bitWidth 5 (Tx FIFO/Queue Put Index)  
        .equ MCAN0_TFQF_Shift, 21   @ bitWidth 1 (Tx FIFO/Queue Full)  
 
    .equ MCAN0_TXESC, MCAN0_BASE + 0xC8 @ (Transmit Buffer Element Size Configuration Register) 
        .equ MCAN0_TBDS_Shift, 0   @ bitWidth 3 (Tx Buffer Data Field Size)  
 
    .equ MCAN0_TXBRP, MCAN0_BASE + 0xCC @ (Transmit Buffer Request Pending Register) 
        .equ MCAN0_TRP0_Shift, 0   @ bitWidth 1 (Transmission Request Pending for Buffer 0)  
        .equ MCAN0_TRP1_Shift, 1   @ bitWidth 1 (Transmission Request Pending for Buffer 1)  
        .equ MCAN0_TRP2_Shift, 2   @ bitWidth 1 (Transmission Request Pending for Buffer 2)  
        .equ MCAN0_TRP3_Shift, 3   @ bitWidth 1 (Transmission Request Pending for Buffer 3)  
        .equ MCAN0_TRP4_Shift, 4   @ bitWidth 1 (Transmission Request Pending for Buffer 4)  
        .equ MCAN0_TRP5_Shift, 5   @ bitWidth 1 (Transmission Request Pending for Buffer 5)  
        .equ MCAN0_TRP6_Shift, 6   @ bitWidth 1 (Transmission Request Pending for Buffer 6)  
        .equ MCAN0_TRP7_Shift, 7   @ bitWidth 1 (Transmission Request Pending for Buffer 7)  
        .equ MCAN0_TRP8_Shift, 8   @ bitWidth 1 (Transmission Request Pending for Buffer 8)  
        .equ MCAN0_TRP9_Shift, 9   @ bitWidth 1 (Transmission Request Pending for Buffer 9)  
        .equ MCAN0_TRP10_Shift, 10   @ bitWidth 1 (Transmission Request Pending for Buffer 10)  
        .equ MCAN0_TRP11_Shift, 11   @ bitWidth 1 (Transmission Request Pending for Buffer 11)  
        .equ MCAN0_TRP12_Shift, 12   @ bitWidth 1 (Transmission Request Pending for Buffer 12)  
        .equ MCAN0_TRP13_Shift, 13   @ bitWidth 1 (Transmission Request Pending for Buffer 13)  
        .equ MCAN0_TRP14_Shift, 14   @ bitWidth 1 (Transmission Request Pending for Buffer 14)  
        .equ MCAN0_TRP15_Shift, 15   @ bitWidth 1 (Transmission Request Pending for Buffer 15)  
        .equ MCAN0_TRP16_Shift, 16   @ bitWidth 1 (Transmission Request Pending for Buffer 16)  
        .equ MCAN0_TRP17_Shift, 17   @ bitWidth 1 (Transmission Request Pending for Buffer 17)  
        .equ MCAN0_TRP18_Shift, 18   @ bitWidth 1 (Transmission Request Pending for Buffer 18)  
        .equ MCAN0_TRP19_Shift, 19   @ bitWidth 1 (Transmission Request Pending for Buffer 19)  
        .equ MCAN0_TRP20_Shift, 20   @ bitWidth 1 (Transmission Request Pending for Buffer 20)  
        .equ MCAN0_TRP21_Shift, 21   @ bitWidth 1 (Transmission Request Pending for Buffer 21)  
        .equ MCAN0_TRP22_Shift, 22   @ bitWidth 1 (Transmission Request Pending for Buffer 22)  
        .equ MCAN0_TRP23_Shift, 23   @ bitWidth 1 (Transmission Request Pending for Buffer 23)  
        .equ MCAN0_TRP24_Shift, 24   @ bitWidth 1 (Transmission Request Pending for Buffer 24)  
        .equ MCAN0_TRP25_Shift, 25   @ bitWidth 1 (Transmission Request Pending for Buffer 25)  
        .equ MCAN0_TRP26_Shift, 26   @ bitWidth 1 (Transmission Request Pending for Buffer 26)  
        .equ MCAN0_TRP27_Shift, 27   @ bitWidth 1 (Transmission Request Pending for Buffer 27)  
        .equ MCAN0_TRP28_Shift, 28   @ bitWidth 1 (Transmission Request Pending for Buffer 28)  
        .equ MCAN0_TRP29_Shift, 29   @ bitWidth 1 (Transmission Request Pending for Buffer 29)  
        .equ MCAN0_TRP30_Shift, 30   @ bitWidth 1 (Transmission Request Pending for Buffer 30)  
        .equ MCAN0_TRP31_Shift, 31   @ bitWidth 1 (Transmission Request Pending for Buffer 31)  
 
    .equ MCAN0_TXBAR, MCAN0_BASE + 0xD0 @ (Transmit Buffer Add Request Register) 
        .equ MCAN0_AR0_Shift, 0   @ bitWidth 1 (Add Request for Transmit Buffer 0)  
        .equ MCAN0_AR1_Shift, 1   @ bitWidth 1 (Add Request for Transmit Buffer 1)  
        .equ MCAN0_AR2_Shift, 2   @ bitWidth 1 (Add Request for Transmit Buffer 2)  
        .equ MCAN0_AR3_Shift, 3   @ bitWidth 1 (Add Request for Transmit Buffer 3)  
        .equ MCAN0_AR4_Shift, 4   @ bitWidth 1 (Add Request for Transmit Buffer 4)  
        .equ MCAN0_AR5_Shift, 5   @ bitWidth 1 (Add Request for Transmit Buffer 5)  
        .equ MCAN0_AR6_Shift, 6   @ bitWidth 1 (Add Request for Transmit Buffer 6)  
        .equ MCAN0_AR7_Shift, 7   @ bitWidth 1 (Add Request for Transmit Buffer 7)  
        .equ MCAN0_AR8_Shift, 8   @ bitWidth 1 (Add Request for Transmit Buffer 8)  
        .equ MCAN0_AR9_Shift, 9   @ bitWidth 1 (Add Request for Transmit Buffer 9)  
        .equ MCAN0_AR10_Shift, 10   @ bitWidth 1 (Add Request for Transmit Buffer 10)  
        .equ MCAN0_AR11_Shift, 11   @ bitWidth 1 (Add Request for Transmit Buffer 11)  
        .equ MCAN0_AR12_Shift, 12   @ bitWidth 1 (Add Request for Transmit Buffer 12)  
        .equ MCAN0_AR13_Shift, 13   @ bitWidth 1 (Add Request for Transmit Buffer 13)  
        .equ MCAN0_AR14_Shift, 14   @ bitWidth 1 (Add Request for Transmit Buffer 14)  
        .equ MCAN0_AR15_Shift, 15   @ bitWidth 1 (Add Request for Transmit Buffer 15)  
        .equ MCAN0_AR16_Shift, 16   @ bitWidth 1 (Add Request for Transmit Buffer 16)  
        .equ MCAN0_AR17_Shift, 17   @ bitWidth 1 (Add Request for Transmit Buffer 17)  
        .equ MCAN0_AR18_Shift, 18   @ bitWidth 1 (Add Request for Transmit Buffer 18)  
        .equ MCAN0_AR19_Shift, 19   @ bitWidth 1 (Add Request for Transmit Buffer 19)  
        .equ MCAN0_AR20_Shift, 20   @ bitWidth 1 (Add Request for Transmit Buffer 20)  
        .equ MCAN0_AR21_Shift, 21   @ bitWidth 1 (Add Request for Transmit Buffer 21)  
        .equ MCAN0_AR22_Shift, 22   @ bitWidth 1 (Add Request for Transmit Buffer 22)  
        .equ MCAN0_AR23_Shift, 23   @ bitWidth 1 (Add Request for Transmit Buffer 23)  
        .equ MCAN0_AR24_Shift, 24   @ bitWidth 1 (Add Request for Transmit Buffer 24)  
        .equ MCAN0_AR25_Shift, 25   @ bitWidth 1 (Add Request for Transmit Buffer 25)  
        .equ MCAN0_AR26_Shift, 26   @ bitWidth 1 (Add Request for Transmit Buffer 26)  
        .equ MCAN0_AR27_Shift, 27   @ bitWidth 1 (Add Request for Transmit Buffer 27)  
        .equ MCAN0_AR28_Shift, 28   @ bitWidth 1 (Add Request for Transmit Buffer 28)  
        .equ MCAN0_AR29_Shift, 29   @ bitWidth 1 (Add Request for Transmit Buffer 29)  
        .equ MCAN0_AR30_Shift, 30   @ bitWidth 1 (Add Request for Transmit Buffer 30)  
        .equ MCAN0_AR31_Shift, 31   @ bitWidth 1 (Add Request for Transmit Buffer 31)  
 
    .equ MCAN0_TXBCR, MCAN0_BASE + 0xD4 @ (Transmit Buffer Cancellation Request Register) 
        .equ MCAN0_CR0_Shift, 0   @ bitWidth 1 (Cancellation Request for Transmit Buffer 0)  
        .equ MCAN0_CR1_Shift, 1   @ bitWidth 1 (Cancellation Request for Transmit Buffer 1)  
        .equ MCAN0_CR2_Shift, 2   @ bitWidth 1 (Cancellation Request for Transmit Buffer 2)  
        .equ MCAN0_CR3_Shift, 3   @ bitWidth 1 (Cancellation Request for Transmit Buffer 3)  
        .equ MCAN0_CR4_Shift, 4   @ bitWidth 1 (Cancellation Request for Transmit Buffer 4)  
        .equ MCAN0_CR5_Shift, 5   @ bitWidth 1 (Cancellation Request for Transmit Buffer 5)  
        .equ MCAN0_CR6_Shift, 6   @ bitWidth 1 (Cancellation Request for Transmit Buffer 6)  
        .equ MCAN0_CR7_Shift, 7   @ bitWidth 1 (Cancellation Request for Transmit Buffer 7)  
        .equ MCAN0_CR8_Shift, 8   @ bitWidth 1 (Cancellation Request for Transmit Buffer 8)  
        .equ MCAN0_CR9_Shift, 9   @ bitWidth 1 (Cancellation Request for Transmit Buffer 9)  
        .equ MCAN0_CR10_Shift, 10   @ bitWidth 1 (Cancellation Request for Transmit Buffer 10)  
        .equ MCAN0_CR11_Shift, 11   @ bitWidth 1 (Cancellation Request for Transmit Buffer 11)  
        .equ MCAN0_CR12_Shift, 12   @ bitWidth 1 (Cancellation Request for Transmit Buffer 12)  
        .equ MCAN0_CR13_Shift, 13   @ bitWidth 1 (Cancellation Request for Transmit Buffer 13)  
        .equ MCAN0_CR14_Shift, 14   @ bitWidth 1 (Cancellation Request for Transmit Buffer 14)  
        .equ MCAN0_CR15_Shift, 15   @ bitWidth 1 (Cancellation Request for Transmit Buffer 15)  
        .equ MCAN0_CR16_Shift, 16   @ bitWidth 1 (Cancellation Request for Transmit Buffer 16)  
        .equ MCAN0_CR17_Shift, 17   @ bitWidth 1 (Cancellation Request for Transmit Buffer 17)  
        .equ MCAN0_CR18_Shift, 18   @ bitWidth 1 (Cancellation Request for Transmit Buffer 18)  
        .equ MCAN0_CR19_Shift, 19   @ bitWidth 1 (Cancellation Request for Transmit Buffer 19)  
        .equ MCAN0_CR20_Shift, 20   @ bitWidth 1 (Cancellation Request for Transmit Buffer 20)  
        .equ MCAN0_CR21_Shift, 21   @ bitWidth 1 (Cancellation Request for Transmit Buffer 21)  
        .equ MCAN0_CR22_Shift, 22   @ bitWidth 1 (Cancellation Request for Transmit Buffer 22)  
        .equ MCAN0_CR23_Shift, 23   @ bitWidth 1 (Cancellation Request for Transmit Buffer 23)  
        .equ MCAN0_CR24_Shift, 24   @ bitWidth 1 (Cancellation Request for Transmit Buffer 24)  
        .equ MCAN0_CR25_Shift, 25   @ bitWidth 1 (Cancellation Request for Transmit Buffer 25)  
        .equ MCAN0_CR26_Shift, 26   @ bitWidth 1 (Cancellation Request for Transmit Buffer 26)  
        .equ MCAN0_CR27_Shift, 27   @ bitWidth 1 (Cancellation Request for Transmit Buffer 27)  
        .equ MCAN0_CR28_Shift, 28   @ bitWidth 1 (Cancellation Request for Transmit Buffer 28)  
        .equ MCAN0_CR29_Shift, 29   @ bitWidth 1 (Cancellation Request for Transmit Buffer 29)  
        .equ MCAN0_CR30_Shift, 30   @ bitWidth 1 (Cancellation Request for Transmit Buffer 30)  
        .equ MCAN0_CR31_Shift, 31   @ bitWidth 1 (Cancellation Request for Transmit Buffer 31)  
 
    .equ MCAN0_TXBTO, MCAN0_BASE + 0xD8 @ (Transmit Buffer Transmission Occurred Register) 
        .equ MCAN0_TO0_Shift, 0   @ bitWidth 1 (Transmission Occurred for Buffer 0)  
        .equ MCAN0_TO1_Shift, 1   @ bitWidth 1 (Transmission Occurred for Buffer 1)  
        .equ MCAN0_TO2_Shift, 2   @ bitWidth 1 (Transmission Occurred for Buffer 2)  
        .equ MCAN0_TO3_Shift, 3   @ bitWidth 1 (Transmission Occurred for Buffer 3)  
        .equ MCAN0_TO4_Shift, 4   @ bitWidth 1 (Transmission Occurred for Buffer 4)  
        .equ MCAN0_TO5_Shift, 5   @ bitWidth 1 (Transmission Occurred for Buffer 5)  
        .equ MCAN0_TO6_Shift, 6   @ bitWidth 1 (Transmission Occurred for Buffer 6)  
        .equ MCAN0_TO7_Shift, 7   @ bitWidth 1 (Transmission Occurred for Buffer 7)  
        .equ MCAN0_TO8_Shift, 8   @ bitWidth 1 (Transmission Occurred for Buffer 8)  
        .equ MCAN0_TO9_Shift, 9   @ bitWidth 1 (Transmission Occurred for Buffer 9)  
        .equ MCAN0_TO10_Shift, 10   @ bitWidth 1 (Transmission Occurred for Buffer 10)  
        .equ MCAN0_TO11_Shift, 11   @ bitWidth 1 (Transmission Occurred for Buffer 11)  
        .equ MCAN0_TO12_Shift, 12   @ bitWidth 1 (Transmission Occurred for Buffer 12)  
        .equ MCAN0_TO13_Shift, 13   @ bitWidth 1 (Transmission Occurred for Buffer 13)  
        .equ MCAN0_TO14_Shift, 14   @ bitWidth 1 (Transmission Occurred for Buffer 14)  
        .equ MCAN0_TO15_Shift, 15   @ bitWidth 1 (Transmission Occurred for Buffer 15)  
        .equ MCAN0_TO16_Shift, 16   @ bitWidth 1 (Transmission Occurred for Buffer 16)  
        .equ MCAN0_TO17_Shift, 17   @ bitWidth 1 (Transmission Occurred for Buffer 17)  
        .equ MCAN0_TO18_Shift, 18   @ bitWidth 1 (Transmission Occurred for Buffer 18)  
        .equ MCAN0_TO19_Shift, 19   @ bitWidth 1 (Transmission Occurred for Buffer 19)  
        .equ MCAN0_TO20_Shift, 20   @ bitWidth 1 (Transmission Occurred for Buffer 20)  
        .equ MCAN0_TO21_Shift, 21   @ bitWidth 1 (Transmission Occurred for Buffer 21)  
        .equ MCAN0_TO22_Shift, 22   @ bitWidth 1 (Transmission Occurred for Buffer 22)  
        .equ MCAN0_TO23_Shift, 23   @ bitWidth 1 (Transmission Occurred for Buffer 23)  
        .equ MCAN0_TO24_Shift, 24   @ bitWidth 1 (Transmission Occurred for Buffer 24)  
        .equ MCAN0_TO25_Shift, 25   @ bitWidth 1 (Transmission Occurred for Buffer 25)  
        .equ MCAN0_TO26_Shift, 26   @ bitWidth 1 (Transmission Occurred for Buffer 26)  
        .equ MCAN0_TO27_Shift, 27   @ bitWidth 1 (Transmission Occurred for Buffer 27)  
        .equ MCAN0_TO28_Shift, 28   @ bitWidth 1 (Transmission Occurred for Buffer 28)  
        .equ MCAN0_TO29_Shift, 29   @ bitWidth 1 (Transmission Occurred for Buffer 29)  
        .equ MCAN0_TO30_Shift, 30   @ bitWidth 1 (Transmission Occurred for Buffer 30)  
        .equ MCAN0_TO31_Shift, 31   @ bitWidth 1 (Transmission Occurred for Buffer 31)  
 
    .equ MCAN0_TXBCF, MCAN0_BASE + 0xDC @ (Transmit Buffer Cancellation Finished Register) 
        .equ MCAN0_CF0_Shift, 0   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 0)  
        .equ MCAN0_CF1_Shift, 1   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 1)  
        .equ MCAN0_CF2_Shift, 2   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 2)  
        .equ MCAN0_CF3_Shift, 3   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 3)  
        .equ MCAN0_CF4_Shift, 4   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 4)  
        .equ MCAN0_CF5_Shift, 5   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 5)  
        .equ MCAN0_CF6_Shift, 6   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 6)  
        .equ MCAN0_CF7_Shift, 7   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 7)  
        .equ MCAN0_CF8_Shift, 8   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 8)  
        .equ MCAN0_CF9_Shift, 9   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 9)  
        .equ MCAN0_CF10_Shift, 10   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 10)  
        .equ MCAN0_CF11_Shift, 11   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 11)  
        .equ MCAN0_CF12_Shift, 12   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 12)  
        .equ MCAN0_CF13_Shift, 13   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 13)  
        .equ MCAN0_CF14_Shift, 14   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 14)  
        .equ MCAN0_CF15_Shift, 15   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 15)  
        .equ MCAN0_CF16_Shift, 16   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 16)  
        .equ MCAN0_CF17_Shift, 17   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 17)  
        .equ MCAN0_CF18_Shift, 18   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 18)  
        .equ MCAN0_CF19_Shift, 19   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 19)  
        .equ MCAN0_CF20_Shift, 20   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 20)  
        .equ MCAN0_CF21_Shift, 21   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 21)  
        .equ MCAN0_CF22_Shift, 22   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 22)  
        .equ MCAN0_CF23_Shift, 23   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 23)  
        .equ MCAN0_CF24_Shift, 24   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 24)  
        .equ MCAN0_CF25_Shift, 25   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 25)  
        .equ MCAN0_CF26_Shift, 26   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 26)  
        .equ MCAN0_CF27_Shift, 27   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 27)  
        .equ MCAN0_CF28_Shift, 28   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 28)  
        .equ MCAN0_CF29_Shift, 29   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 29)  
        .equ MCAN0_CF30_Shift, 30   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 30)  
        .equ MCAN0_CF31_Shift, 31   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 31)  
 
    .equ MCAN0_TXBTIE, MCAN0_BASE + 0xE0 @ (Transmit Buffer Transmission Interrupt Enable Register) 
        .equ MCAN0_TIE0_Shift, 0   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 0)  
        .equ MCAN0_TIE1_Shift, 1   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 1)  
        .equ MCAN0_TIE2_Shift, 2   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 2)  
        .equ MCAN0_TIE3_Shift, 3   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 3)  
        .equ MCAN0_TIE4_Shift, 4   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 4)  
        .equ MCAN0_TIE5_Shift, 5   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 5)  
        .equ MCAN0_TIE6_Shift, 6   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 6)  
        .equ MCAN0_TIE7_Shift, 7   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 7)  
        .equ MCAN0_TIE8_Shift, 8   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 8)  
        .equ MCAN0_TIE9_Shift, 9   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 9)  
        .equ MCAN0_TIE10_Shift, 10   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 10)  
        .equ MCAN0_TIE11_Shift, 11   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 11)  
        .equ MCAN0_TIE12_Shift, 12   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 12)  
        .equ MCAN0_TIE13_Shift, 13   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 13)  
        .equ MCAN0_TIE14_Shift, 14   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 14)  
        .equ MCAN0_TIE15_Shift, 15   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 15)  
        .equ MCAN0_TIE16_Shift, 16   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 16)  
        .equ MCAN0_TIE17_Shift, 17   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 17)  
        .equ MCAN0_TIE18_Shift, 18   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 18)  
        .equ MCAN0_TIE19_Shift, 19   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 19)  
        .equ MCAN0_TIE20_Shift, 20   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 20)  
        .equ MCAN0_TIE21_Shift, 21   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 21)  
        .equ MCAN0_TIE22_Shift, 22   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 22)  
        .equ MCAN0_TIE23_Shift, 23   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 23)  
        .equ MCAN0_TIE24_Shift, 24   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 24)  
        .equ MCAN0_TIE25_Shift, 25   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 25)  
        .equ MCAN0_TIE26_Shift, 26   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 26)  
        .equ MCAN0_TIE27_Shift, 27   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 27)  
        .equ MCAN0_TIE28_Shift, 28   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 28)  
        .equ MCAN0_TIE29_Shift, 29   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 29)  
        .equ MCAN0_TIE30_Shift, 30   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 30)  
        .equ MCAN0_TIE31_Shift, 31   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 31)  
 
    .equ MCAN0_TXBCIE, MCAN0_BASE + 0xE4 @ (Transmit Buffer Cancellation Finished Interrupt Enable Register) 
        .equ MCAN0_CFIE0_Shift, 0   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 0)  
        .equ MCAN0_CFIE1_Shift, 1   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 1)  
        .equ MCAN0_CFIE2_Shift, 2   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 2)  
        .equ MCAN0_CFIE3_Shift, 3   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 3)  
        .equ MCAN0_CFIE4_Shift, 4   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 4)  
        .equ MCAN0_CFIE5_Shift, 5   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 5)  
        .equ MCAN0_CFIE6_Shift, 6   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 6)  
        .equ MCAN0_CFIE7_Shift, 7   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 7)  
        .equ MCAN0_CFIE8_Shift, 8   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 8)  
        .equ MCAN0_CFIE9_Shift, 9   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 9)  
        .equ MCAN0_CFIE10_Shift, 10   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 10)  
        .equ MCAN0_CFIE11_Shift, 11   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 11)  
        .equ MCAN0_CFIE12_Shift, 12   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 12)  
        .equ MCAN0_CFIE13_Shift, 13   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 13)  
        .equ MCAN0_CFIE14_Shift, 14   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 14)  
        .equ MCAN0_CFIE15_Shift, 15   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 15)  
        .equ MCAN0_CFIE16_Shift, 16   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 16)  
        .equ MCAN0_CFIE17_Shift, 17   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 17)  
        .equ MCAN0_CFIE18_Shift, 18   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 18)  
        .equ MCAN0_CFIE19_Shift, 19   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 19)  
        .equ MCAN0_CFIE20_Shift, 20   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 20)  
        .equ MCAN0_CFIE21_Shift, 21   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 21)  
        .equ MCAN0_CFIE22_Shift, 22   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 22)  
        .equ MCAN0_CFIE23_Shift, 23   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 23)  
        .equ MCAN0_CFIE24_Shift, 24   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 24)  
        .equ MCAN0_CFIE25_Shift, 25   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 25)  
        .equ MCAN0_CFIE26_Shift, 26   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 26)  
        .equ MCAN0_CFIE27_Shift, 27   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 27)  
        .equ MCAN0_CFIE28_Shift, 28   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 28)  
        .equ MCAN0_CFIE29_Shift, 29   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 29)  
        .equ MCAN0_CFIE30_Shift, 30   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 30)  
        .equ MCAN0_CFIE31_Shift, 31   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 31)  
 
    .equ MCAN0_TXEFC, MCAN0_BASE + 0xF0 @ (Transmit Event FIFO Configuration Register) 
        .equ MCAN0_EFSA_Shift, 2   @ bitWidth 14 (Event FIFO Start Address)  
        .equ MCAN0_EFS_Shift, 16   @ bitWidth 6 (Event FIFO Size)  
        .equ MCAN0_EFWM_Shift, 24   @ bitWidth 6 (Event FIFO Watermark)  
 
    .equ MCAN0_TXEFS, MCAN0_BASE + 0xF4 @ (Transmit Event FIFO Status Register) 
        .equ MCAN0_EFFL_Shift, 0   @ bitWidth 6 (Event FIFO Fill Level)  
        .equ MCAN0_EFGI_Shift, 8   @ bitWidth 5 (Event FIFO Get Index)  
        .equ MCAN0_EFPI_Shift, 16   @ bitWidth 5 (Event FIFO Put Index)  
        .equ MCAN0_EFF_Shift, 24   @ bitWidth 1 (Event FIFO Full)  
        .equ MCAN0_TEFL_Shift, 25   @ bitWidth 1 (Tx Event FIFO Element Lost)  
 
    .equ MCAN0_TXEFA, MCAN0_BASE + 0xF8 @ (Transmit Event FIFO Acknowledge Register) 
        .equ MCAN0_EFAI_Shift, 0   @ bitWidth 5 (Event FIFO Acknowledge Index)  
 

@=========================== MCAN1 ===========================@
.equ MCAN1_BASE, 0x40034000 @ (Controller Area Network) 
    .equ MCAN1_CUST, MCAN1_BASE + 0x08 @ (Customer Register) 
        .equ MCAN1_CSV_Shift, 0   @ bitWidth 32 (Customer-specific Value)  
 
    .equ MCAN1_FBTP, MCAN1_BASE + 0x0C @ (Fast Bit Timing and Prescaler Register) 
        .equ MCAN1_FSJW_Shift, 0   @ bitWidth 2 (Fast Re Synchronization Jump Width)  
        .equ MCAN1_FTSEG2_Shift, 4   @ bitWidth 3 (Fast Time Segment After Sample Point)  
        .equ MCAN1_FTSEG1_Shift, 8   @ bitWidth 4 (Fast Time Segment Before Sample Point)  
        .equ MCAN1_FBRP_Shift, 16   @ bitWidth 5 (Fast Baud Rate Prescaler)  
        .equ MCAN1_TDC_Shift, 23   @ bitWidth 1 (Transceiver Delay Compensation)  
        .equ MCAN1_TDCO_Shift, 24   @ bitWidth 5 (Transceiver Delay Compensation Offset)  
 
    .equ MCAN1_TEST, MCAN1_BASE + 0x10 @ (Test Register) 
        .equ MCAN1_LBCK_Shift, 4   @ bitWidth 1 (Loop Back Mode read/write)  
        .equ MCAN1_TX_Shift, 5   @ bitWidth 2 (Control of Transmit Pin read/write)  
        .equ MCAN1_RX_Shift, 7   @ bitWidth 1 (Receive Pin read-only)  
        .equ MCAN1_TDCV_Shift, 8   @ bitWidth 6 (Transceiver Delay Compensation Value read-only)  
 
    .equ MCAN1_RWD, MCAN1_BASE + 0x14 @ (RAM Watchdog Register) 
        .equ MCAN1_WDC_Shift, 0   @ bitWidth 8 (Watchdog Configuration read/write)  
        .equ MCAN1_WDV_Shift, 8   @ bitWidth 8 (Watchdog Value read-only)  
 
    .equ MCAN1_CCCR, MCAN1_BASE + 0x18 @ (CC Control Register) 
        .equ MCAN1_INIT_Shift, 0   @ bitWidth 1 (Initialization read/write)  
        .equ MCAN1_CCE_Shift, 1   @ bitWidth 1 (Configuration Change Enable read/write, write protection)  
        .equ MCAN1_ASM_Shift, 2   @ bitWidth 1 (Restricted Operation Mode read/write, write protection against '1')  
        .equ MCAN1_CSA_Shift, 3   @ bitWidth 1 (Clock Stop Acknowledge read-only)  
        .equ MCAN1_CSR_Shift, 4   @ bitWidth 1 (Clock Stop Request read/write)  
        .equ MCAN1_MON_Shift, 5   @ bitWidth 1 (Bus Monitoring Mode read/write, write protection against '1')  
        .equ MCAN1_DAR_Shift, 6   @ bitWidth 1 (Disable Automatic Retransmission read/write, write protection)  
        .equ MCAN1_TEST_Shift, 7   @ bitWidth 1 (Test Mode Enable read/write, write protection against '1')  
        .equ MCAN1_CME_Shift, 8   @ bitWidth 2 (CAN Mode Enable read/write, write protection)  
        .equ MCAN1_CMR_Shift, 10   @ bitWidth 2 (CAN Mode Request read/write)  
        .equ MCAN1_FDO_Shift, 12   @ bitWidth 1 (CAN FD Operation read-only)  
        .equ MCAN1_FDBS_Shift, 13   @ bitWidth 1 (CAN FD Bit Rate Switching read-only)  
        .equ MCAN1_TXP_Shift, 14   @ bitWidth 1 (Transmit Pause read/write, write protection)  
 
    .equ MCAN1_BTP, MCAN1_BASE + 0x1C @ (Bit Timing and Prescaler Register) 
        .equ MCAN1_SJW_Shift, 0   @ bitWidth 4 (Re Synchronization Jump Width)  
        .equ MCAN1_TSEG2_Shift, 4   @ bitWidth 4 (Time Segment After Sample Point)  
        .equ MCAN1_TSEG1_Shift, 8   @ bitWidth 6 (Time Segment Before Sample Point)  
        .equ MCAN1_BRP_Shift, 16   @ bitWidth 10 (Baud Rate Prescaler)  
 
    .equ MCAN1_TSCC, MCAN1_BASE + 0x20 @ (Timestamp Counter Configuration Register) 
        .equ MCAN1_TSS_Shift, 0   @ bitWidth 2 (Timestamp Select)  
        .equ MCAN1_TCP_Shift, 16   @ bitWidth 4 (Timestamp Counter Prescaler)  
 
    .equ MCAN1_TSCV, MCAN1_BASE + 0x24 @ (Timestamp Counter Value Register) 
        .equ MCAN1_TSC_Shift, 0   @ bitWidth 16 (Timestamp Counter cleared on write)  
 
    .equ MCAN1_TOCC, MCAN1_BASE + 0x28 @ (Timeout Counter Configuration Register) 
        .equ MCAN1_ETOC_Shift, 0   @ bitWidth 1 (Enable Timeout Counter)  
        .equ MCAN1_TOS_Shift, 1   @ bitWidth 2 (Timeout Select)  
        .equ MCAN1_TOP_Shift, 16   @ bitWidth 16 (Timeout Period)  
 
    .equ MCAN1_TOCV, MCAN1_BASE + 0x2C @ (Timeout Counter Value Register) 
        .equ MCAN1_TOC_Shift, 0   @ bitWidth 16 (Timeout Counter cleared on write)  
 
    .equ MCAN1_ECR, MCAN1_BASE + 0x40 @ (Error Counter Register) 
        .equ MCAN1_TEC_Shift, 0   @ bitWidth 8 (Transmit Error Counter)  
        .equ MCAN1_REC_Shift, 8   @ bitWidth 7 (Receive Error Counter)  
        .equ MCAN1_RP_Shift, 15   @ bitWidth 1 (Receive Error Passive)  
        .equ MCAN1_CEL_Shift, 16   @ bitWidth 8 (CAN Error Logging cleared on read)  
 
    .equ MCAN1_PSR, MCAN1_BASE + 0x44 @ (Protocol Status Register) 
        .equ MCAN1_LEC_Shift, 0   @ bitWidth 3 (Last Error Code set to 111 on read)  
        .equ MCAN1_ACT_Shift, 3   @ bitWidth 2 (Activity)  
        .equ MCAN1_EP_Shift, 5   @ bitWidth 1 (Error Passive)  
        .equ MCAN1_EW_Shift, 6   @ bitWidth 1 (Warning Status)  
        .equ MCAN1_BO_Shift, 7   @ bitWidth 1 (Bus_Off Status)  
        .equ MCAN1_FLEC_Shift, 8   @ bitWidth 3 (Fast Last Error Code set to 111 on read)  
        .equ MCAN1_RESI_Shift, 11   @ bitWidth 1 (ESI Flag of Last Received CAN FD Message cleared on read)  
        .equ MCAN1_RBRS_Shift, 12   @ bitWidth 1 (BRS Flag of Last Received CAN FD Message cleared on read)  
        .equ MCAN1_REDL_Shift, 13   @ bitWidth 1 (Received a CAN FD Message cleared on read)  
 
    .equ MCAN1_IR, MCAN1_BASE + 0x50 @ (Interrupt Register) 
        .equ MCAN1_RF0N_Shift, 0   @ bitWidth 1 (Receive FIFO 0 New Message)  
        .equ MCAN1_RF0W_Shift, 1   @ bitWidth 1 (Receive FIFO 0 Watermark Reached)  
        .equ MCAN1_RF0F_Shift, 2   @ bitWidth 1 (Receive FIFO 0 Full)  
        .equ MCAN1_RF0L_Shift, 3   @ bitWidth 1 (Receive FIFO 0 Message Lost)  
        .equ MCAN1_RF1N_Shift, 4   @ bitWidth 1 (Receive FIFO 1 New Message)  
        .equ MCAN1_RF1W_Shift, 5   @ bitWidth 1 (Receive FIFO 1 Watermark Reached)  
        .equ MCAN1_RF1F_Shift, 6   @ bitWidth 1 (Receive FIFO 1 Full)  
        .equ MCAN1_RF1L_Shift, 7   @ bitWidth 1 (Receive FIFO 1 Message Lost)  
        .equ MCAN1_HPM_Shift, 8   @ bitWidth 1 (High Priority Message)  
        .equ MCAN1_TC_Shift, 9   @ bitWidth 1 (Transmission Completed)  
        .equ MCAN1_TCF_Shift, 10   @ bitWidth 1 (Transmission Cancellation Finished)  
        .equ MCAN1_TFE_Shift, 11   @ bitWidth 1 (Tx FIFO Empty)  
        .equ MCAN1_TEFN_Shift, 12   @ bitWidth 1 (Tx Event FIFO New Entry)  
        .equ MCAN1_TEFW_Shift, 13   @ bitWidth 1 (Tx Event FIFO Watermark Reached)  
        .equ MCAN1_TEFF_Shift, 14   @ bitWidth 1 (Tx Event FIFO Full)  
        .equ MCAN1_TEFL_Shift, 15   @ bitWidth 1 (Tx Event FIFO Element Lost)  
        .equ MCAN1_TSW_Shift, 16   @ bitWidth 1 (Timestamp Wraparound)  
        .equ MCAN1_MRAF_Shift, 17   @ bitWidth 1 (Message RAM Access Failure)  
        .equ MCAN1_TOO_Shift, 18   @ bitWidth 1 (Timeout Occurred)  
        .equ MCAN1_DRX_Shift, 19   @ bitWidth 1 (Message stored to Dedicated Receive Buffer)  
        .equ MCAN1_ELO_Shift, 22   @ bitWidth 1 (Error Logging Overflow)  
        .equ MCAN1_EP_Shift, 23   @ bitWidth 1 (Error Passive)  
        .equ MCAN1_EW_Shift, 24   @ bitWidth 1 (Warning Status)  
        .equ MCAN1_BO_Shift, 25   @ bitWidth 1 (Bus_Off Status)  
        .equ MCAN1_WDI_Shift, 26   @ bitWidth 1 (Watchdog Interrupt)  
        .equ MCAN1_CRCE_Shift, 27   @ bitWidth 1 (CRC Error)  
        .equ MCAN1_BE_Shift, 28   @ bitWidth 1 (Bit Error)  
        .equ MCAN1_ACKE_Shift, 29   @ bitWidth 1 (Acknowledge Error)  
        .equ MCAN1_FOE_Shift, 30   @ bitWidth 1 (Format Error)  
        .equ MCAN1_STE_Shift, 31   @ bitWidth 1 (Stuff Error)  
 
    .equ MCAN1_IE, MCAN1_BASE + 0x54 @ (Interrupt Enable Register) 
        .equ MCAN1_RF0NE_Shift, 0   @ bitWidth 1 (Receive FIFO 0 New Message Interrupt Enable)  
        .equ MCAN1_RF0WE_Shift, 1   @ bitWidth 1 (Receive FIFO 0 Watermark Reached Interrupt Enable)  
        .equ MCAN1_RF0FE_Shift, 2   @ bitWidth 1 (Receive FIFO 0 Full Interrupt Enable)  
        .equ MCAN1_RF0LE_Shift, 3   @ bitWidth 1 (Receive FIFO 0 Message Lost Interrupt Enable)  
        .equ MCAN1_RF1NE_Shift, 4   @ bitWidth 1 (Receive FIFO 1 New Message Interrupt Enable)  
        .equ MCAN1_RF1WE_Shift, 5   @ bitWidth 1 (Receive FIFO 1 Watermark Reached Interrupt Enable)  
        .equ MCAN1_RF1FE_Shift, 6   @ bitWidth 1 (Receive FIFO 1 Full Interrupt Enable)  
        .equ MCAN1_RF1LE_Shift, 7   @ bitWidth 1 (Receive FIFO 1 Message Lost Interrupt Enable)  
        .equ MCAN1_HPME_Shift, 8   @ bitWidth 1 (High Priority Message Interrupt Enable)  
        .equ MCAN1_TCE_Shift, 9   @ bitWidth 1 (Transmission Completed Interrupt Enable)  
        .equ MCAN1_TCFE_Shift, 10   @ bitWidth 1 (Transmission Cancellation Finished Interrupt Enable)  
        .equ MCAN1_TFEE_Shift, 11   @ bitWidth 1 (Tx FIFO Empty Interrupt Enable)  
        .equ MCAN1_TEFNE_Shift, 12   @ bitWidth 1 (Tx Event FIFO New Entry Interrupt Enable)  
        .equ MCAN1_TEFWE_Shift, 13   @ bitWidth 1 (Tx Event FIFO Watermark Reached Interrupt Enable)  
        .equ MCAN1_TEFFE_Shift, 14   @ bitWidth 1 (Tx Event FIFO Full Interrupt Enable)  
        .equ MCAN1_TEFLE_Shift, 15   @ bitWidth 1 (Tx Event FIFO Event Lost Interrupt Enable)  
        .equ MCAN1_TSWE_Shift, 16   @ bitWidth 1 (Timestamp Wraparound Interrupt Enable)  
        .equ MCAN1_MRAFE_Shift, 17   @ bitWidth 1 (Message RAM Access Failure Interrupt Enable)  
        .equ MCAN1_TOOE_Shift, 18   @ bitWidth 1 (Timeout Occurred Interrupt Enable)  
        .equ MCAN1_DRXE_Shift, 19   @ bitWidth 1 (Message stored to Dedicated Receive Buffer Interrupt Enable)  
        .equ MCAN1_ELOE_Shift, 22   @ bitWidth 1 (Error Logging Overflow Interrupt Enable)  
        .equ MCAN1_EPE_Shift, 23   @ bitWidth 1 (Error Passive Interrupt Enable)  
        .equ MCAN1_EWE_Shift, 24   @ bitWidth 1 (Warning Status Interrupt Enable)  
        .equ MCAN1_BOE_Shift, 25   @ bitWidth 1 (Bus_Off Status Interrupt Enable)  
        .equ MCAN1_WDIE_Shift, 26   @ bitWidth 1 (Watchdog Interrupt Enable)  
        .equ MCAN1_CRCEE_Shift, 27   @ bitWidth 1 (CRC Error Interrupt Enable)  
        .equ MCAN1_BEE_Shift, 28   @ bitWidth 1 (Bit Error Interrupt Enable)  
        .equ MCAN1_ACKEE_Shift, 29   @ bitWidth 1 (Acknowledge Error Interrupt Enable)  
        .equ MCAN1_FOEE_Shift, 30   @ bitWidth 1 (Format Error Interrupt Enable)  
        .equ MCAN1_STEE_Shift, 31   @ bitWidth 1 (Stuff Error Interrupt Enable)  
 
    .equ MCAN1_ILS, MCAN1_BASE + 0x58 @ (Interrupt Line Select Register) 
        .equ MCAN1_RF0NL_Shift, 0   @ bitWidth 1 (Receive FIFO 0 New Message Interrupt Line)  
        .equ MCAN1_RF0WL_Shift, 1   @ bitWidth 1 (Receive FIFO 0 Watermark Reached Interrupt Line)  
        .equ MCAN1_RF0FL_Shift, 2   @ bitWidth 1 (Receive FIFO 0 Full Interrupt Line)  
        .equ MCAN1_RF0LL_Shift, 3   @ bitWidth 1 (Receive FIFO 0 Message Lost Interrupt Line)  
        .equ MCAN1_RF1NL_Shift, 4   @ bitWidth 1 (Receive FIFO 1 New Message Interrupt Line)  
        .equ MCAN1_RF1WL_Shift, 5   @ bitWidth 1 (Receive FIFO 1 Watermark Reached Interrupt Line)  
        .equ MCAN1_RF1FL_Shift, 6   @ bitWidth 1 (Receive FIFO 1 Full Interrupt Line)  
        .equ MCAN1_RF1LL_Shift, 7   @ bitWidth 1 (Receive FIFO 1 Message Lost Interrupt Line)  
        .equ MCAN1_HPML_Shift, 8   @ bitWidth 1 (High Priority Message Interrupt Line)  
        .equ MCAN1_TCL_Shift, 9   @ bitWidth 1 (Transmission Completed Interrupt Line)  
        .equ MCAN1_TCFL_Shift, 10   @ bitWidth 1 (Transmission Cancellation Finished Interrupt Line)  
        .equ MCAN1_TFEL_Shift, 11   @ bitWidth 1 (Tx FIFO Empty Interrupt Line)  
        .equ MCAN1_TEFNL_Shift, 12   @ bitWidth 1 (Tx Event FIFO New Entry Interrupt Line)  
        .equ MCAN1_TEFWL_Shift, 13   @ bitWidth 1 (Tx Event FIFO Watermark Reached Interrupt Line)  
        .equ MCAN1_TEFFL_Shift, 14   @ bitWidth 1 (Tx Event FIFO Full Interrupt Line)  
        .equ MCAN1_TEFLL_Shift, 15   @ bitWidth 1 (Tx Event FIFO Event Lost Interrupt Line)  
        .equ MCAN1_TSWL_Shift, 16   @ bitWidth 1 (Timestamp Wraparound Interrupt Line)  
        .equ MCAN1_MRAFL_Shift, 17   @ bitWidth 1 (Message RAM Access Failure Interrupt Line)  
        .equ MCAN1_TOOL_Shift, 18   @ bitWidth 1 (Timeout Occurred Interrupt Line)  
        .equ MCAN1_DRXL_Shift, 19   @ bitWidth 1 (Message stored to Dedicated Receive Buffer Interrupt Line)  
        .equ MCAN1_ELOL_Shift, 22   @ bitWidth 1 (Error Logging Overflow Interrupt Line)  
        .equ MCAN1_EPL_Shift, 23   @ bitWidth 1 (Error Passive Interrupt Line)  
        .equ MCAN1_EWL_Shift, 24   @ bitWidth 1 (Warning Status Interrupt Line)  
        .equ MCAN1_BOL_Shift, 25   @ bitWidth 1 (Bus_Off Status Interrupt Line)  
        .equ MCAN1_WDIL_Shift, 26   @ bitWidth 1 (Watchdog Interrupt Line)  
        .equ MCAN1_CRCEL_Shift, 27   @ bitWidth 1 (CRC Error Interrupt Line)  
        .equ MCAN1_BEL_Shift, 28   @ bitWidth 1 (Bit Error Interrupt Line)  
        .equ MCAN1_ACKEL_Shift, 29   @ bitWidth 1 (Acknowledge Error Interrupt Line)  
        .equ MCAN1_FOEL_Shift, 30   @ bitWidth 1 (Format Error Interrupt Line)  
        .equ MCAN1_STEL_Shift, 31   @ bitWidth 1 (Stuff Error Interrupt Line)  
 
    .equ MCAN1_ILE, MCAN1_BASE + 0x5C @ (Interrupt Line Enable Register) 
        .equ MCAN1_EINT0_Shift, 0   @ bitWidth 1 (Enable Interrupt Line 0)  
        .equ MCAN1_EINT1_Shift, 1   @ bitWidth 1 (Enable Interrupt Line 1)  
 
    .equ MCAN1_GFC, MCAN1_BASE + 0x80 @ (Global Filter Configuration Register) 
        .equ MCAN1_RRFE_Shift, 0   @ bitWidth 1 (Reject Remote Frames Extended)  
        .equ MCAN1_RRFS_Shift, 1   @ bitWidth 1 (Reject Remote Frames Standard)  
        .equ MCAN1_ANFE_Shift, 2   @ bitWidth 2 (Accept Non-matching Frames Extended)  
        .equ MCAN1_ANFS_Shift, 4   @ bitWidth 2 (Accept Non-matching Frames Standard)  
 
    .equ MCAN1_SIDFC, MCAN1_BASE + 0x84 @ (Standard ID Filter Configuration Register) 
        .equ MCAN1_FLSSA_Shift, 2   @ bitWidth 14 (Filter List Standard Start Address)  
        .equ MCAN1_LSS_Shift, 16   @ bitWidth 8 (List Size Standard)  
 
    .equ MCAN1_XIDFC, MCAN1_BASE + 0x88 @ (Extended ID Filter Configuration Register) 
        .equ MCAN1_FLESA_Shift, 2   @ bitWidth 14 (Filter List Extended Start Address)  
        .equ MCAN1_LSE_Shift, 16   @ bitWidth 7 (List Size Extended)  
 
    .equ MCAN1_XIDAM, MCAN1_BASE + 0x90 @ (Extended ID AND Mask Register) 
        .equ MCAN1_EIDM_Shift, 0   @ bitWidth 29 (Extended ID Mask)  
 
    .equ MCAN1_HPMS, MCAN1_BASE + 0x94 @ (High Priority Message Status Register) 
        .equ MCAN1_BIDX_Shift, 0   @ bitWidth 6 (Buffer Index)  
        .equ MCAN1_MSI_Shift, 6   @ bitWidth 2 (Message Storage Indicator)  
        .equ MCAN1_FIDX_Shift, 8   @ bitWidth 7 (Filter Index)  
        .equ MCAN1_FLST_Shift, 15   @ bitWidth 1 (Filter List)  
 
    .equ MCAN1_NDAT1, MCAN1_BASE + 0x98 @ (New Data 1 Register) 
        .equ MCAN1_ND0_Shift, 0   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND1_Shift, 1   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND2_Shift, 2   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND3_Shift, 3   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND4_Shift, 4   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND5_Shift, 5   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND6_Shift, 6   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND7_Shift, 7   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND8_Shift, 8   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND9_Shift, 9   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND10_Shift, 10   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND11_Shift, 11   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND12_Shift, 12   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND13_Shift, 13   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND14_Shift, 14   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND15_Shift, 15   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND16_Shift, 16   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND17_Shift, 17   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND18_Shift, 18   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND19_Shift, 19   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND20_Shift, 20   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND21_Shift, 21   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND22_Shift, 22   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND23_Shift, 23   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND24_Shift, 24   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND25_Shift, 25   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND26_Shift, 26   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND27_Shift, 27   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND28_Shift, 28   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND29_Shift, 29   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND30_Shift, 30   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND31_Shift, 31   @ bitWidth 1 (New Data)  
 
    .equ MCAN1_NDAT2, MCAN1_BASE + 0x9C @ (New Data 2 Register) 
        .equ MCAN1_ND32_Shift, 0   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND33_Shift, 1   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND34_Shift, 2   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND35_Shift, 3   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND36_Shift, 4   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND37_Shift, 5   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND38_Shift, 6   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND39_Shift, 7   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND40_Shift, 8   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND41_Shift, 9   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND42_Shift, 10   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND43_Shift, 11   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND44_Shift, 12   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND45_Shift, 13   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND46_Shift, 14   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND47_Shift, 15   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND48_Shift, 16   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND49_Shift, 17   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND50_Shift, 18   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND51_Shift, 19   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND52_Shift, 20   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND53_Shift, 21   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND54_Shift, 22   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND55_Shift, 23   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND56_Shift, 24   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND57_Shift, 25   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND58_Shift, 26   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND59_Shift, 27   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND60_Shift, 28   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND61_Shift, 29   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND62_Shift, 30   @ bitWidth 1 (New Data)  
        .equ MCAN1_ND63_Shift, 31   @ bitWidth 1 (New Data)  
 
    .equ MCAN1_RXF0C, MCAN1_BASE + 0xA0 @ (Receive FIFO 0 Configuration Register) 
        .equ MCAN1_F0SA_Shift, 2   @ bitWidth 14 (Receive FIFO 0 Start Address)  
        .equ MCAN1_F0S_Shift, 16   @ bitWidth 7 (Receive FIFO 0 Start Address)  
        .equ MCAN1_F0WM_Shift, 24   @ bitWidth 7 (Receive FIFO 0 Watermark)  
        .equ MCAN1_F0OM_Shift, 31   @ bitWidth 1 (FIFO 0 Operation Mode)  
 
    .equ MCAN1_RXF0S, MCAN1_BASE + 0xA4 @ (Receive FIFO 0 Status Register) 
        .equ MCAN1_F0FL_Shift, 0   @ bitWidth 7 (Receive FIFO 0 Fill Level)  
        .equ MCAN1_F0GI_Shift, 8   @ bitWidth 6 (Receive FIFO 0 Get Index)  
        .equ MCAN1_F0PI_Shift, 16   @ bitWidth 6 (Receive FIFO 0 Put Index)  
        .equ MCAN1_F0F_Shift, 24   @ bitWidth 1 (Receive FIFO 0 Fill Level)  
        .equ MCAN1_RF0L_Shift, 25   @ bitWidth 1 (Receive FIFO 0 Message Lost)  
 
    .equ MCAN1_RXF0A, MCAN1_BASE + 0xA8 @ (Receive FIFO 0 Acknowledge Register) 
        .equ MCAN1_F0AI_Shift, 0   @ bitWidth 6 (Receive FIFO 0 Acknowledge Index)  
 
    .equ MCAN1_RXBC, MCAN1_BASE + 0xAC @ (Receive Rx Buffer Configuration Register) 
        .equ MCAN1_RBSA_Shift, 2   @ bitWidth 14 (Receive Buffer Start Address)  
 
    .equ MCAN1_RXF1C, MCAN1_BASE + 0xB0 @ (Receive FIFO 1 Configuration Register) 
        .equ MCAN1_F1SA_Shift, 2   @ bitWidth 14 (Receive FIFO 1 Start Address)  
        .equ MCAN1_F1S_Shift, 16   @ bitWidth 7 (Receive FIFO 1 Start Address)  
        .equ MCAN1_F1WM_Shift, 24   @ bitWidth 7 (Receive FIFO 1 Watermark)  
        .equ MCAN1_F1OM_Shift, 31   @ bitWidth 1 (FIFO 1 Operation Mode)  
 
    .equ MCAN1_RXF1S, MCAN1_BASE + 0xB4 @ (Receive FIFO 1 Status Register) 
        .equ MCAN1_F1FL_Shift, 0   @ bitWidth 7 (Receive FIFO 1 Fill Level)  
        .equ MCAN1_F1GI_Shift, 8   @ bitWidth 6 (Receive FIFO 1 Get Index)  
        .equ MCAN1_F1PI_Shift, 16   @ bitWidth 6 (Receive FIFO 1 Put Index)  
        .equ MCAN1_F1F_Shift, 24   @ bitWidth 1 (Receive FIFO 1 Fill Level)  
        .equ MCAN1_RF1L_Shift, 25   @ bitWidth 1 (Receive FIFO 1 Message Lost)  
        .equ MCAN1_DMS_Shift, 30   @ bitWidth 2 (Debug Message Status)  
 
    .equ MCAN1_RXF1A, MCAN1_BASE + 0xB8 @ (Receive FIFO 1 Acknowledge Register) 
        .equ MCAN1_F1AI_Shift, 0   @ bitWidth 6 (Receive FIFO 1 Acknowledge Index)  
 
    .equ MCAN1_RXESC, MCAN1_BASE + 0xBC @ (Receive Buffer / FIFO Element Size Configuration Register) 
        .equ MCAN1_F0DS_Shift, 0   @ bitWidth 3 (Receive FIFO 0 Data Field Size)  
        .equ MCAN1_F1DS_Shift, 4   @ bitWidth 3 (Receive FIFO 1 Data Field Size)  
        .equ MCAN1_RBDS_Shift, 8   @ bitWidth 3 (Receive Buffer Data Field Size)  
 
    .equ MCAN1_TXBC, MCAN1_BASE + 0xC0 @ (Transmit Buffer Configuration Register) 
        .equ MCAN1_TBSA_Shift, 2   @ bitWidth 14 (Tx Buffers Start Address)  
        .equ MCAN1_NDTB_Shift, 16   @ bitWidth 6 (Number of Dedicated Transmit Buffers)  
        .equ MCAN1_TFQS_Shift, 24   @ bitWidth 6 (Transmit FIFO/Queue Size)  
        .equ MCAN1_TFQM_Shift, 30   @ bitWidth 1 (Tx FIFO/Queue Mode)  
 
    .equ MCAN1_TXFQS, MCAN1_BASE + 0xC4 @ (Transmit FIFO/Queue Status Register) 
        .equ MCAN1_TFFL_Shift, 0   @ bitWidth 6 (Tx FIFO Free Level)  
        .equ MCAN1_TFGI_Shift, 8   @ bitWidth 5 (Tx FIFO Get Index)  
        .equ MCAN1_TFQPI_Shift, 16   @ bitWidth 5 (Tx FIFO/Queue Put Index)  
        .equ MCAN1_TFQF_Shift, 21   @ bitWidth 1 (Tx FIFO/Queue Full)  
 
    .equ MCAN1_TXESC, MCAN1_BASE + 0xC8 @ (Transmit Buffer Element Size Configuration Register) 
        .equ MCAN1_TBDS_Shift, 0   @ bitWidth 3 (Tx Buffer Data Field Size)  
 
    .equ MCAN1_TXBRP, MCAN1_BASE + 0xCC @ (Transmit Buffer Request Pending Register) 
        .equ MCAN1_TRP0_Shift, 0   @ bitWidth 1 (Transmission Request Pending for Buffer 0)  
        .equ MCAN1_TRP1_Shift, 1   @ bitWidth 1 (Transmission Request Pending for Buffer 1)  
        .equ MCAN1_TRP2_Shift, 2   @ bitWidth 1 (Transmission Request Pending for Buffer 2)  
        .equ MCAN1_TRP3_Shift, 3   @ bitWidth 1 (Transmission Request Pending for Buffer 3)  
        .equ MCAN1_TRP4_Shift, 4   @ bitWidth 1 (Transmission Request Pending for Buffer 4)  
        .equ MCAN1_TRP5_Shift, 5   @ bitWidth 1 (Transmission Request Pending for Buffer 5)  
        .equ MCAN1_TRP6_Shift, 6   @ bitWidth 1 (Transmission Request Pending for Buffer 6)  
        .equ MCAN1_TRP7_Shift, 7   @ bitWidth 1 (Transmission Request Pending for Buffer 7)  
        .equ MCAN1_TRP8_Shift, 8   @ bitWidth 1 (Transmission Request Pending for Buffer 8)  
        .equ MCAN1_TRP9_Shift, 9   @ bitWidth 1 (Transmission Request Pending for Buffer 9)  
        .equ MCAN1_TRP10_Shift, 10   @ bitWidth 1 (Transmission Request Pending for Buffer 10)  
        .equ MCAN1_TRP11_Shift, 11   @ bitWidth 1 (Transmission Request Pending for Buffer 11)  
        .equ MCAN1_TRP12_Shift, 12   @ bitWidth 1 (Transmission Request Pending for Buffer 12)  
        .equ MCAN1_TRP13_Shift, 13   @ bitWidth 1 (Transmission Request Pending for Buffer 13)  
        .equ MCAN1_TRP14_Shift, 14   @ bitWidth 1 (Transmission Request Pending for Buffer 14)  
        .equ MCAN1_TRP15_Shift, 15   @ bitWidth 1 (Transmission Request Pending for Buffer 15)  
        .equ MCAN1_TRP16_Shift, 16   @ bitWidth 1 (Transmission Request Pending for Buffer 16)  
        .equ MCAN1_TRP17_Shift, 17   @ bitWidth 1 (Transmission Request Pending for Buffer 17)  
        .equ MCAN1_TRP18_Shift, 18   @ bitWidth 1 (Transmission Request Pending for Buffer 18)  
        .equ MCAN1_TRP19_Shift, 19   @ bitWidth 1 (Transmission Request Pending for Buffer 19)  
        .equ MCAN1_TRP20_Shift, 20   @ bitWidth 1 (Transmission Request Pending for Buffer 20)  
        .equ MCAN1_TRP21_Shift, 21   @ bitWidth 1 (Transmission Request Pending for Buffer 21)  
        .equ MCAN1_TRP22_Shift, 22   @ bitWidth 1 (Transmission Request Pending for Buffer 22)  
        .equ MCAN1_TRP23_Shift, 23   @ bitWidth 1 (Transmission Request Pending for Buffer 23)  
        .equ MCAN1_TRP24_Shift, 24   @ bitWidth 1 (Transmission Request Pending for Buffer 24)  
        .equ MCAN1_TRP25_Shift, 25   @ bitWidth 1 (Transmission Request Pending for Buffer 25)  
        .equ MCAN1_TRP26_Shift, 26   @ bitWidth 1 (Transmission Request Pending for Buffer 26)  
        .equ MCAN1_TRP27_Shift, 27   @ bitWidth 1 (Transmission Request Pending for Buffer 27)  
        .equ MCAN1_TRP28_Shift, 28   @ bitWidth 1 (Transmission Request Pending for Buffer 28)  
        .equ MCAN1_TRP29_Shift, 29   @ bitWidth 1 (Transmission Request Pending for Buffer 29)  
        .equ MCAN1_TRP30_Shift, 30   @ bitWidth 1 (Transmission Request Pending for Buffer 30)  
        .equ MCAN1_TRP31_Shift, 31   @ bitWidth 1 (Transmission Request Pending for Buffer 31)  
 
    .equ MCAN1_TXBAR, MCAN1_BASE + 0xD0 @ (Transmit Buffer Add Request Register) 
        .equ MCAN1_AR0_Shift, 0   @ bitWidth 1 (Add Request for Transmit Buffer 0)  
        .equ MCAN1_AR1_Shift, 1   @ bitWidth 1 (Add Request for Transmit Buffer 1)  
        .equ MCAN1_AR2_Shift, 2   @ bitWidth 1 (Add Request for Transmit Buffer 2)  
        .equ MCAN1_AR3_Shift, 3   @ bitWidth 1 (Add Request for Transmit Buffer 3)  
        .equ MCAN1_AR4_Shift, 4   @ bitWidth 1 (Add Request for Transmit Buffer 4)  
        .equ MCAN1_AR5_Shift, 5   @ bitWidth 1 (Add Request for Transmit Buffer 5)  
        .equ MCAN1_AR6_Shift, 6   @ bitWidth 1 (Add Request for Transmit Buffer 6)  
        .equ MCAN1_AR7_Shift, 7   @ bitWidth 1 (Add Request for Transmit Buffer 7)  
        .equ MCAN1_AR8_Shift, 8   @ bitWidth 1 (Add Request for Transmit Buffer 8)  
        .equ MCAN1_AR9_Shift, 9   @ bitWidth 1 (Add Request for Transmit Buffer 9)  
        .equ MCAN1_AR10_Shift, 10   @ bitWidth 1 (Add Request for Transmit Buffer 10)  
        .equ MCAN1_AR11_Shift, 11   @ bitWidth 1 (Add Request for Transmit Buffer 11)  
        .equ MCAN1_AR12_Shift, 12   @ bitWidth 1 (Add Request for Transmit Buffer 12)  
        .equ MCAN1_AR13_Shift, 13   @ bitWidth 1 (Add Request for Transmit Buffer 13)  
        .equ MCAN1_AR14_Shift, 14   @ bitWidth 1 (Add Request for Transmit Buffer 14)  
        .equ MCAN1_AR15_Shift, 15   @ bitWidth 1 (Add Request for Transmit Buffer 15)  
        .equ MCAN1_AR16_Shift, 16   @ bitWidth 1 (Add Request for Transmit Buffer 16)  
        .equ MCAN1_AR17_Shift, 17   @ bitWidth 1 (Add Request for Transmit Buffer 17)  
        .equ MCAN1_AR18_Shift, 18   @ bitWidth 1 (Add Request for Transmit Buffer 18)  
        .equ MCAN1_AR19_Shift, 19   @ bitWidth 1 (Add Request for Transmit Buffer 19)  
        .equ MCAN1_AR20_Shift, 20   @ bitWidth 1 (Add Request for Transmit Buffer 20)  
        .equ MCAN1_AR21_Shift, 21   @ bitWidth 1 (Add Request for Transmit Buffer 21)  
        .equ MCAN1_AR22_Shift, 22   @ bitWidth 1 (Add Request for Transmit Buffer 22)  
        .equ MCAN1_AR23_Shift, 23   @ bitWidth 1 (Add Request for Transmit Buffer 23)  
        .equ MCAN1_AR24_Shift, 24   @ bitWidth 1 (Add Request for Transmit Buffer 24)  
        .equ MCAN1_AR25_Shift, 25   @ bitWidth 1 (Add Request for Transmit Buffer 25)  
        .equ MCAN1_AR26_Shift, 26   @ bitWidth 1 (Add Request for Transmit Buffer 26)  
        .equ MCAN1_AR27_Shift, 27   @ bitWidth 1 (Add Request for Transmit Buffer 27)  
        .equ MCAN1_AR28_Shift, 28   @ bitWidth 1 (Add Request for Transmit Buffer 28)  
        .equ MCAN1_AR29_Shift, 29   @ bitWidth 1 (Add Request for Transmit Buffer 29)  
        .equ MCAN1_AR30_Shift, 30   @ bitWidth 1 (Add Request for Transmit Buffer 30)  
        .equ MCAN1_AR31_Shift, 31   @ bitWidth 1 (Add Request for Transmit Buffer 31)  
 
    .equ MCAN1_TXBCR, MCAN1_BASE + 0xD4 @ (Transmit Buffer Cancellation Request Register) 
        .equ MCAN1_CR0_Shift, 0   @ bitWidth 1 (Cancellation Request for Transmit Buffer 0)  
        .equ MCAN1_CR1_Shift, 1   @ bitWidth 1 (Cancellation Request for Transmit Buffer 1)  
        .equ MCAN1_CR2_Shift, 2   @ bitWidth 1 (Cancellation Request for Transmit Buffer 2)  
        .equ MCAN1_CR3_Shift, 3   @ bitWidth 1 (Cancellation Request for Transmit Buffer 3)  
        .equ MCAN1_CR4_Shift, 4   @ bitWidth 1 (Cancellation Request for Transmit Buffer 4)  
        .equ MCAN1_CR5_Shift, 5   @ bitWidth 1 (Cancellation Request for Transmit Buffer 5)  
        .equ MCAN1_CR6_Shift, 6   @ bitWidth 1 (Cancellation Request for Transmit Buffer 6)  
        .equ MCAN1_CR7_Shift, 7   @ bitWidth 1 (Cancellation Request for Transmit Buffer 7)  
        .equ MCAN1_CR8_Shift, 8   @ bitWidth 1 (Cancellation Request for Transmit Buffer 8)  
        .equ MCAN1_CR9_Shift, 9   @ bitWidth 1 (Cancellation Request for Transmit Buffer 9)  
        .equ MCAN1_CR10_Shift, 10   @ bitWidth 1 (Cancellation Request for Transmit Buffer 10)  
        .equ MCAN1_CR11_Shift, 11   @ bitWidth 1 (Cancellation Request for Transmit Buffer 11)  
        .equ MCAN1_CR12_Shift, 12   @ bitWidth 1 (Cancellation Request for Transmit Buffer 12)  
        .equ MCAN1_CR13_Shift, 13   @ bitWidth 1 (Cancellation Request for Transmit Buffer 13)  
        .equ MCAN1_CR14_Shift, 14   @ bitWidth 1 (Cancellation Request for Transmit Buffer 14)  
        .equ MCAN1_CR15_Shift, 15   @ bitWidth 1 (Cancellation Request for Transmit Buffer 15)  
        .equ MCAN1_CR16_Shift, 16   @ bitWidth 1 (Cancellation Request for Transmit Buffer 16)  
        .equ MCAN1_CR17_Shift, 17   @ bitWidth 1 (Cancellation Request for Transmit Buffer 17)  
        .equ MCAN1_CR18_Shift, 18   @ bitWidth 1 (Cancellation Request for Transmit Buffer 18)  
        .equ MCAN1_CR19_Shift, 19   @ bitWidth 1 (Cancellation Request for Transmit Buffer 19)  
        .equ MCAN1_CR20_Shift, 20   @ bitWidth 1 (Cancellation Request for Transmit Buffer 20)  
        .equ MCAN1_CR21_Shift, 21   @ bitWidth 1 (Cancellation Request for Transmit Buffer 21)  
        .equ MCAN1_CR22_Shift, 22   @ bitWidth 1 (Cancellation Request for Transmit Buffer 22)  
        .equ MCAN1_CR23_Shift, 23   @ bitWidth 1 (Cancellation Request for Transmit Buffer 23)  
        .equ MCAN1_CR24_Shift, 24   @ bitWidth 1 (Cancellation Request for Transmit Buffer 24)  
        .equ MCAN1_CR25_Shift, 25   @ bitWidth 1 (Cancellation Request for Transmit Buffer 25)  
        .equ MCAN1_CR26_Shift, 26   @ bitWidth 1 (Cancellation Request for Transmit Buffer 26)  
        .equ MCAN1_CR27_Shift, 27   @ bitWidth 1 (Cancellation Request for Transmit Buffer 27)  
        .equ MCAN1_CR28_Shift, 28   @ bitWidth 1 (Cancellation Request for Transmit Buffer 28)  
        .equ MCAN1_CR29_Shift, 29   @ bitWidth 1 (Cancellation Request for Transmit Buffer 29)  
        .equ MCAN1_CR30_Shift, 30   @ bitWidth 1 (Cancellation Request for Transmit Buffer 30)  
        .equ MCAN1_CR31_Shift, 31   @ bitWidth 1 (Cancellation Request for Transmit Buffer 31)  
 
    .equ MCAN1_TXBTO, MCAN1_BASE + 0xD8 @ (Transmit Buffer Transmission Occurred Register) 
        .equ MCAN1_TO0_Shift, 0   @ bitWidth 1 (Transmission Occurred for Buffer 0)  
        .equ MCAN1_TO1_Shift, 1   @ bitWidth 1 (Transmission Occurred for Buffer 1)  
        .equ MCAN1_TO2_Shift, 2   @ bitWidth 1 (Transmission Occurred for Buffer 2)  
        .equ MCAN1_TO3_Shift, 3   @ bitWidth 1 (Transmission Occurred for Buffer 3)  
        .equ MCAN1_TO4_Shift, 4   @ bitWidth 1 (Transmission Occurred for Buffer 4)  
        .equ MCAN1_TO5_Shift, 5   @ bitWidth 1 (Transmission Occurred for Buffer 5)  
        .equ MCAN1_TO6_Shift, 6   @ bitWidth 1 (Transmission Occurred for Buffer 6)  
        .equ MCAN1_TO7_Shift, 7   @ bitWidth 1 (Transmission Occurred for Buffer 7)  
        .equ MCAN1_TO8_Shift, 8   @ bitWidth 1 (Transmission Occurred for Buffer 8)  
        .equ MCAN1_TO9_Shift, 9   @ bitWidth 1 (Transmission Occurred for Buffer 9)  
        .equ MCAN1_TO10_Shift, 10   @ bitWidth 1 (Transmission Occurred for Buffer 10)  
        .equ MCAN1_TO11_Shift, 11   @ bitWidth 1 (Transmission Occurred for Buffer 11)  
        .equ MCAN1_TO12_Shift, 12   @ bitWidth 1 (Transmission Occurred for Buffer 12)  
        .equ MCAN1_TO13_Shift, 13   @ bitWidth 1 (Transmission Occurred for Buffer 13)  
        .equ MCAN1_TO14_Shift, 14   @ bitWidth 1 (Transmission Occurred for Buffer 14)  
        .equ MCAN1_TO15_Shift, 15   @ bitWidth 1 (Transmission Occurred for Buffer 15)  
        .equ MCAN1_TO16_Shift, 16   @ bitWidth 1 (Transmission Occurred for Buffer 16)  
        .equ MCAN1_TO17_Shift, 17   @ bitWidth 1 (Transmission Occurred for Buffer 17)  
        .equ MCAN1_TO18_Shift, 18   @ bitWidth 1 (Transmission Occurred for Buffer 18)  
        .equ MCAN1_TO19_Shift, 19   @ bitWidth 1 (Transmission Occurred for Buffer 19)  
        .equ MCAN1_TO20_Shift, 20   @ bitWidth 1 (Transmission Occurred for Buffer 20)  
        .equ MCAN1_TO21_Shift, 21   @ bitWidth 1 (Transmission Occurred for Buffer 21)  
        .equ MCAN1_TO22_Shift, 22   @ bitWidth 1 (Transmission Occurred for Buffer 22)  
        .equ MCAN1_TO23_Shift, 23   @ bitWidth 1 (Transmission Occurred for Buffer 23)  
        .equ MCAN1_TO24_Shift, 24   @ bitWidth 1 (Transmission Occurred for Buffer 24)  
        .equ MCAN1_TO25_Shift, 25   @ bitWidth 1 (Transmission Occurred for Buffer 25)  
        .equ MCAN1_TO26_Shift, 26   @ bitWidth 1 (Transmission Occurred for Buffer 26)  
        .equ MCAN1_TO27_Shift, 27   @ bitWidth 1 (Transmission Occurred for Buffer 27)  
        .equ MCAN1_TO28_Shift, 28   @ bitWidth 1 (Transmission Occurred for Buffer 28)  
        .equ MCAN1_TO29_Shift, 29   @ bitWidth 1 (Transmission Occurred for Buffer 29)  
        .equ MCAN1_TO30_Shift, 30   @ bitWidth 1 (Transmission Occurred for Buffer 30)  
        .equ MCAN1_TO31_Shift, 31   @ bitWidth 1 (Transmission Occurred for Buffer 31)  
 
    .equ MCAN1_TXBCF, MCAN1_BASE + 0xDC @ (Transmit Buffer Cancellation Finished Register) 
        .equ MCAN1_CF0_Shift, 0   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 0)  
        .equ MCAN1_CF1_Shift, 1   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 1)  
        .equ MCAN1_CF2_Shift, 2   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 2)  
        .equ MCAN1_CF3_Shift, 3   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 3)  
        .equ MCAN1_CF4_Shift, 4   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 4)  
        .equ MCAN1_CF5_Shift, 5   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 5)  
        .equ MCAN1_CF6_Shift, 6   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 6)  
        .equ MCAN1_CF7_Shift, 7   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 7)  
        .equ MCAN1_CF8_Shift, 8   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 8)  
        .equ MCAN1_CF9_Shift, 9   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 9)  
        .equ MCAN1_CF10_Shift, 10   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 10)  
        .equ MCAN1_CF11_Shift, 11   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 11)  
        .equ MCAN1_CF12_Shift, 12   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 12)  
        .equ MCAN1_CF13_Shift, 13   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 13)  
        .equ MCAN1_CF14_Shift, 14   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 14)  
        .equ MCAN1_CF15_Shift, 15   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 15)  
        .equ MCAN1_CF16_Shift, 16   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 16)  
        .equ MCAN1_CF17_Shift, 17   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 17)  
        .equ MCAN1_CF18_Shift, 18   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 18)  
        .equ MCAN1_CF19_Shift, 19   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 19)  
        .equ MCAN1_CF20_Shift, 20   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 20)  
        .equ MCAN1_CF21_Shift, 21   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 21)  
        .equ MCAN1_CF22_Shift, 22   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 22)  
        .equ MCAN1_CF23_Shift, 23   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 23)  
        .equ MCAN1_CF24_Shift, 24   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 24)  
        .equ MCAN1_CF25_Shift, 25   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 25)  
        .equ MCAN1_CF26_Shift, 26   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 26)  
        .equ MCAN1_CF27_Shift, 27   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 27)  
        .equ MCAN1_CF28_Shift, 28   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 28)  
        .equ MCAN1_CF29_Shift, 29   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 29)  
        .equ MCAN1_CF30_Shift, 30   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 30)  
        .equ MCAN1_CF31_Shift, 31   @ bitWidth 1 (Cancellation Finished for Transmit Buffer 31)  
 
    .equ MCAN1_TXBTIE, MCAN1_BASE + 0xE0 @ (Transmit Buffer Transmission Interrupt Enable Register) 
        .equ MCAN1_TIE0_Shift, 0   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 0)  
        .equ MCAN1_TIE1_Shift, 1   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 1)  
        .equ MCAN1_TIE2_Shift, 2   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 2)  
        .equ MCAN1_TIE3_Shift, 3   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 3)  
        .equ MCAN1_TIE4_Shift, 4   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 4)  
        .equ MCAN1_TIE5_Shift, 5   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 5)  
        .equ MCAN1_TIE6_Shift, 6   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 6)  
        .equ MCAN1_TIE7_Shift, 7   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 7)  
        .equ MCAN1_TIE8_Shift, 8   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 8)  
        .equ MCAN1_TIE9_Shift, 9   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 9)  
        .equ MCAN1_TIE10_Shift, 10   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 10)  
        .equ MCAN1_TIE11_Shift, 11   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 11)  
        .equ MCAN1_TIE12_Shift, 12   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 12)  
        .equ MCAN1_TIE13_Shift, 13   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 13)  
        .equ MCAN1_TIE14_Shift, 14   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 14)  
        .equ MCAN1_TIE15_Shift, 15   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 15)  
        .equ MCAN1_TIE16_Shift, 16   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 16)  
        .equ MCAN1_TIE17_Shift, 17   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 17)  
        .equ MCAN1_TIE18_Shift, 18   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 18)  
        .equ MCAN1_TIE19_Shift, 19   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 19)  
        .equ MCAN1_TIE20_Shift, 20   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 20)  
        .equ MCAN1_TIE21_Shift, 21   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 21)  
        .equ MCAN1_TIE22_Shift, 22   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 22)  
        .equ MCAN1_TIE23_Shift, 23   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 23)  
        .equ MCAN1_TIE24_Shift, 24   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 24)  
        .equ MCAN1_TIE25_Shift, 25   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 25)  
        .equ MCAN1_TIE26_Shift, 26   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 26)  
        .equ MCAN1_TIE27_Shift, 27   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 27)  
        .equ MCAN1_TIE28_Shift, 28   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 28)  
        .equ MCAN1_TIE29_Shift, 29   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 29)  
        .equ MCAN1_TIE30_Shift, 30   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 30)  
        .equ MCAN1_TIE31_Shift, 31   @ bitWidth 1 (Transmission Interrupt Enable for Buffer 31)  
 
    .equ MCAN1_TXBCIE, MCAN1_BASE + 0xE4 @ (Transmit Buffer Cancellation Finished Interrupt Enable Register) 
        .equ MCAN1_CFIE0_Shift, 0   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 0)  
        .equ MCAN1_CFIE1_Shift, 1   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 1)  
        .equ MCAN1_CFIE2_Shift, 2   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 2)  
        .equ MCAN1_CFIE3_Shift, 3   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 3)  
        .equ MCAN1_CFIE4_Shift, 4   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 4)  
        .equ MCAN1_CFIE5_Shift, 5   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 5)  
        .equ MCAN1_CFIE6_Shift, 6   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 6)  
        .equ MCAN1_CFIE7_Shift, 7   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 7)  
        .equ MCAN1_CFIE8_Shift, 8   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 8)  
        .equ MCAN1_CFIE9_Shift, 9   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 9)  
        .equ MCAN1_CFIE10_Shift, 10   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 10)  
        .equ MCAN1_CFIE11_Shift, 11   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 11)  
        .equ MCAN1_CFIE12_Shift, 12   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 12)  
        .equ MCAN1_CFIE13_Shift, 13   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 13)  
        .equ MCAN1_CFIE14_Shift, 14   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 14)  
        .equ MCAN1_CFIE15_Shift, 15   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 15)  
        .equ MCAN1_CFIE16_Shift, 16   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 16)  
        .equ MCAN1_CFIE17_Shift, 17   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 17)  
        .equ MCAN1_CFIE18_Shift, 18   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 18)  
        .equ MCAN1_CFIE19_Shift, 19   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 19)  
        .equ MCAN1_CFIE20_Shift, 20   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 20)  
        .equ MCAN1_CFIE21_Shift, 21   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 21)  
        .equ MCAN1_CFIE22_Shift, 22   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 22)  
        .equ MCAN1_CFIE23_Shift, 23   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 23)  
        .equ MCAN1_CFIE24_Shift, 24   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 24)  
        .equ MCAN1_CFIE25_Shift, 25   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 25)  
        .equ MCAN1_CFIE26_Shift, 26   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 26)  
        .equ MCAN1_CFIE27_Shift, 27   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 27)  
        .equ MCAN1_CFIE28_Shift, 28   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 28)  
        .equ MCAN1_CFIE29_Shift, 29   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 29)  
        .equ MCAN1_CFIE30_Shift, 30   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 30)  
        .equ MCAN1_CFIE31_Shift, 31   @ bitWidth 1 (Cancellation Finished Interrupt Enable for Transmit Buffer 31)  
 
    .equ MCAN1_TXEFC, MCAN1_BASE + 0xF0 @ (Transmit Event FIFO Configuration Register) 
        .equ MCAN1_EFSA_Shift, 2   @ bitWidth 14 (Event FIFO Start Address)  
        .equ MCAN1_EFS_Shift, 16   @ bitWidth 6 (Event FIFO Size)  
        .equ MCAN1_EFWM_Shift, 24   @ bitWidth 6 (Event FIFO Watermark)  
 
    .equ MCAN1_TXEFS, MCAN1_BASE + 0xF4 @ (Transmit Event FIFO Status Register) 
        .equ MCAN1_EFFL_Shift, 0   @ bitWidth 6 (Event FIFO Fill Level)  
        .equ MCAN1_EFGI_Shift, 8   @ bitWidth 5 (Event FIFO Get Index)  
        .equ MCAN1_EFPI_Shift, 16   @ bitWidth 5 (Event FIFO Put Index)  
        .equ MCAN1_EFF_Shift, 24   @ bitWidth 1 (Event FIFO Full)  
        .equ MCAN1_TEFL_Shift, 25   @ bitWidth 1 (Tx Event FIFO Element Lost)  
 
    .equ MCAN1_TXEFA, MCAN1_BASE + 0xF8 @ (Transmit Event FIFO Acknowledge Register) 
        .equ MCAN1_EFAI_Shift, 0   @ bitWidth 5 (Event FIFO Acknowledge Index)  
 

@=========================== PIOA ===========================@
.equ PIOA_BASE, 0x400E0E00 @ (Parallel Input/Output Controller) 
    .equ PIOA_PER, PIOA_BASE + 0x0000 @ (PIO Enable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (PIO Enable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (PIO Enable)  
 
    .equ PIOA_PDR, PIOA_BASE + 0x0004 @ (PIO Disable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (PIO Disable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (PIO Disable)  
 
    .equ PIOA_PSR, PIOA_BASE + 0x0008 @ (PIO Status Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (PIO Status)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (PIO Status)  
 
    .equ PIOA_OER, PIOA_BASE + 0x0010 @ (Output Enable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Output Enable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Output Enable)  
 
    .equ PIOA_ODR, PIOA_BASE + 0x0014 @ (Output Disable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Output Disable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Output Disable)  
 
    .equ PIOA_OSR, PIOA_BASE + 0x0018 @ (Output Status Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Output Status)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Output Status)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Output Status)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Output Status)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Output Status)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Output Status)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Output Status)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Output Status)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Output Status)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Output Status)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Output Status)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Output Status)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Output Status)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Output Status)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Output Status)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Output Status)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Output Status)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Output Status)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Output Status)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Output Status)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Output Status)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Output Status)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Output Status)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Output Status)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Output Status)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Output Status)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Output Status)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Output Status)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Output Status)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Output Status)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Output Status)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Output Status)  
 
    .equ PIOA_IFER, PIOA_BASE + 0x0020 @ (Glitch Input Filter Enable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Input Filter Enable)  
 
    .equ PIOA_IFDR, PIOA_BASE + 0x0024 @ (Glitch Input Filter Disable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Input Filter Disable)  
 
    .equ PIOA_IFSR, PIOA_BASE + 0x0028 @ (Glitch Input Filter Status Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Input Filter Status)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Input Filter Status)  
 
    .equ PIOA_SODR, PIOA_BASE + 0x0030 @ (Set Output Data Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Set Output Data)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Set Output Data)  
 
    .equ PIOA_CODR, PIOA_BASE + 0x0034 @ (Clear Output Data Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Clear Output Data)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Clear Output Data)  
 
    .equ PIOA_ODSR, PIOA_BASE + 0x0038 @ (Output Data Status Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Output Data Status)  
 
    .equ PIOA_PDSR, PIOA_BASE + 0x003C @ (Pin Data Status Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Output Data Status)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Output Data Status)  
 
    .equ PIOA_IER, PIOA_BASE + 0x0040 @ (Interrupt Enable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Input Change Interrupt Enable)  
 
    .equ PIOA_IDR, PIOA_BASE + 0x0044 @ (Interrupt Disable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Input Change Interrupt Disable)  
 
    .equ PIOA_IMR, PIOA_BASE + 0x0048 @ (Interrupt Mask Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Input Change Interrupt Mask)  
 
    .equ PIOA_ISR, PIOA_BASE + 0x004C @ (Interrupt Status Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Input Change Interrupt Status)  
 
    .equ PIOA_MDER, PIOA_BASE + 0x0050 @ (Multi-driver Enable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Multi-drive Enable)  
 
    .equ PIOA_MDDR, PIOA_BASE + 0x0054 @ (Multi-driver Disable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Multi-drive Disable)  
 
    .equ PIOA_MDSR, PIOA_BASE + 0x0058 @ (Multi-driver Status Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Multi-drive Status)  
 
    .equ PIOA_PUDR, PIOA_BASE + 0x0060 @ (Pull-up Disable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Pull-Up Disable)  
 
    .equ PIOA_PUER, PIOA_BASE + 0x0064 @ (Pull-up Enable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Pull-Up Enable)  
 
    .equ PIOA_PUSR, PIOA_BASE + 0x0068 @ (Pad Pull-up Status Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Pull-Up Status)  
 
    .equ PIOA_ABCDSR[%s], PIOA_BASE + 0x70 @ (Peripheral ABCD Select Register 0) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Peripheral Select)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Peripheral Select)  
 
    .equ PIOA_IFSCDR, PIOA_BASE + 0x0080 @ (Input Filter Slow Clock Disable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
 
    .equ PIOA_IFSCER, PIOA_BASE + 0x0084 @ (Input Filter Slow Clock Enable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
 
    .equ PIOA_IFSCSR, PIOA_BASE + 0x0088 @ (Input Filter Slow Clock Status Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
 
    .equ PIOA_SCDR, PIOA_BASE + 0x008C @ (Slow Clock Divider Debouncing Register) 
        .equ PIOA_DIV_Shift, 0   @ bitWidth 14 (Slow Clock Divider Selection for Debouncing)  
 
    .equ PIOA_PPDDR, PIOA_BASE + 0x0090 @ (Pad Pull-down Disable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Pull-Down Disable)  
 
    .equ PIOA_PPDER, PIOA_BASE + 0x0094 @ (Pad Pull-down Enable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Pull-Down Enable)  
 
    .equ PIOA_PPDSR, PIOA_BASE + 0x0098 @ (Pad Pull-down Status Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Pull-Down Status)  
 
    .equ PIOA_OWER, PIOA_BASE + 0x00A0 @ (Output Write Enable) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Output Write Enable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Output Write Enable)  
 
    .equ PIOA_OWDR, PIOA_BASE + 0x00A4 @ (Output Write Disable) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Output Write Disable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Output Write Disable)  
 
    .equ PIOA_OWSR, PIOA_BASE + 0x00A8 @ (Output Write Status Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Output Write Status)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Output Write Status)  
 
    .equ PIOA_AIMER, PIOA_BASE + 0x00B0 @ (Additional Interrupt Modes Enable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Additional Interrupt Modes Enable)  
 
    .equ PIOA_AIMDR, PIOA_BASE + 0x00B4 @ (Additional Interrupt Modes Disable Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Additional Interrupt Modes Disable)  
 
    .equ PIOA_AIMMR, PIOA_BASE + 0x00B8 @ (Additional Interrupt Modes Mask Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (IO Line Index)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (IO Line Index)  
 
    .equ PIOA_ESR, PIOA_BASE + 0x00C0 @ (Edge Select Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Edge Interrupt Selection)  
 
    .equ PIOA_LSR, PIOA_BASE + 0x00C4 @ (Level Select Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Level Interrupt Selection)  
 
    .equ PIOA_ELSR, PIOA_BASE + 0x00C8 @ (Edge/Level Status Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
 
    .equ PIOA_FELLSR, PIOA_BASE + 0x00D0 @ (Falling Edge/Low-Level Select Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
 
    .equ PIOA_REHLSR, PIOA_BASE + 0x00D4 @ (Rising Edge/High-Level Select Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
 
    .equ PIOA_FRLHSR, PIOA_BASE + 0x00D8 @ (Fall/Rise - Low/High Status Register) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
 
    .equ PIOA_LOCKSR, PIOA_BASE + 0x00E0 @ (Lock Status) 
        .equ PIOA_P0_Shift, 0   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P1_Shift, 1   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P2_Shift, 2   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P3_Shift, 3   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P4_Shift, 4   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P5_Shift, 5   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P6_Shift, 6   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P7_Shift, 7   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P8_Shift, 8   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P9_Shift, 9   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P10_Shift, 10   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P11_Shift, 11   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P12_Shift, 12   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P13_Shift, 13   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P14_Shift, 14   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P15_Shift, 15   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P16_Shift, 16   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P17_Shift, 17   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P18_Shift, 18   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P19_Shift, 19   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P20_Shift, 20   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P21_Shift, 21   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P22_Shift, 22   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P23_Shift, 23   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P24_Shift, 24   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P25_Shift, 25   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P26_Shift, 26   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P27_Shift, 27   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P28_Shift, 28   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P29_Shift, 29   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P30_Shift, 30   @ bitWidth 1 (Lock Status)  
        .equ PIOA_P31_Shift, 31   @ bitWidth 1 (Lock Status)  
 
    .equ PIOA_WPMR, PIOA_BASE + 0x00E4 @ (Write Protection Mode Register) 
        .equ PIOA_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ PIOA_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ PIOA_WPSR, PIOA_BASE + 0x00E8 @ (Write Protection Status Register) 
        .equ PIOA_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ PIOA_WPVSRC_Shift, 8   @ bitWidth 16 (Write Protection Violation Source)  
 
    .equ PIOA_SCHMITT, PIOA_BASE + 0x0100 @ (Schmitt Trigger Register) 
        .equ PIOA_SCHMITT0_Shift, 0   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT1_Shift, 1   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT2_Shift, 2   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT3_Shift, 3   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT4_Shift, 4   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT5_Shift, 5   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT6_Shift, 6   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT7_Shift, 7   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT8_Shift, 8   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT9_Shift, 9   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT10_Shift, 10   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT11_Shift, 11   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT12_Shift, 12   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT13_Shift, 13   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT14_Shift, 14   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT15_Shift, 15   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT16_Shift, 16   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT17_Shift, 17   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT18_Shift, 18   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT19_Shift, 19   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT20_Shift, 20   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT21_Shift, 21   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT22_Shift, 22   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT23_Shift, 23   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT24_Shift, 24   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT25_Shift, 25   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT26_Shift, 26   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT27_Shift, 27   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT28_Shift, 28   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT29_Shift, 29   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT30_Shift, 30   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOA_SCHMITT31_Shift, 31   @ bitWidth 1 (Schmitt Trigger Control)  
 
    .equ PIOA_DRIVER, PIOA_BASE + 0x0118 @ (I/O Drive Register) 
        .equ PIOA_LINE0_Shift, 0   @ bitWidth 1 (Drive of PIO Line 0)  
        .equ PIOA_LINE1_Shift, 1   @ bitWidth 1 (Drive of PIO Line 1)  
        .equ PIOA_LINE2_Shift, 2   @ bitWidth 1 (Drive of PIO Line 2)  
        .equ PIOA_LINE3_Shift, 3   @ bitWidth 1 (Drive of PIO Line 3)  
        .equ PIOA_LINE4_Shift, 4   @ bitWidth 1 (Drive of PIO Line 4)  
        .equ PIOA_LINE5_Shift, 5   @ bitWidth 1 (Drive of PIO Line 5)  
        .equ PIOA_LINE6_Shift, 6   @ bitWidth 1 (Drive of PIO Line 6)  
        .equ PIOA_LINE7_Shift, 7   @ bitWidth 1 (Drive of PIO Line 7)  
        .equ PIOA_LINE8_Shift, 8   @ bitWidth 1 (Drive of PIO Line 8)  
        .equ PIOA_LINE9_Shift, 9   @ bitWidth 1 (Drive of PIO Line 9)  
        .equ PIOA_LINE10_Shift, 10   @ bitWidth 1 (Drive of PIO Line 10)  
        .equ PIOA_LINE11_Shift, 11   @ bitWidth 1 (Drive of PIO Line 11)  
        .equ PIOA_LINE12_Shift, 12   @ bitWidth 1 (Drive of PIO Line 12)  
        .equ PIOA_LINE13_Shift, 13   @ bitWidth 1 (Drive of PIO Line 13)  
        .equ PIOA_LINE14_Shift, 14   @ bitWidth 1 (Drive of PIO Line 14)  
        .equ PIOA_LINE15_Shift, 15   @ bitWidth 1 (Drive of PIO Line 15)  
        .equ PIOA_LINE16_Shift, 16   @ bitWidth 1 (Drive of PIO Line 16)  
        .equ PIOA_LINE17_Shift, 17   @ bitWidth 1 (Drive of PIO Line 17)  
        .equ PIOA_LINE18_Shift, 18   @ bitWidth 1 (Drive of PIO Line 18)  
        .equ PIOA_LINE19_Shift, 19   @ bitWidth 1 (Drive of PIO Line 19)  
        .equ PIOA_LINE20_Shift, 20   @ bitWidth 1 (Drive of PIO Line 20)  
        .equ PIOA_LINE21_Shift, 21   @ bitWidth 1 (Drive of PIO Line 21)  
        .equ PIOA_LINE22_Shift, 22   @ bitWidth 1 (Drive of PIO Line 22)  
        .equ PIOA_LINE23_Shift, 23   @ bitWidth 1 (Drive of PIO Line 23)  
        .equ PIOA_LINE24_Shift, 24   @ bitWidth 1 (Drive of PIO Line 24)  
        .equ PIOA_LINE25_Shift, 25   @ bitWidth 1 (Drive of PIO Line 25)  
        .equ PIOA_LINE26_Shift, 26   @ bitWidth 1 (Drive of PIO Line 26)  
        .equ PIOA_LINE27_Shift, 27   @ bitWidth 1 (Drive of PIO Line 27)  
        .equ PIOA_LINE28_Shift, 28   @ bitWidth 1 (Drive of PIO Line 28)  
        .equ PIOA_LINE29_Shift, 29   @ bitWidth 1 (Drive of PIO Line 29)  
        .equ PIOA_LINE30_Shift, 30   @ bitWidth 1 (Drive of PIO Line 30)  
        .equ PIOA_LINE31_Shift, 31   @ bitWidth 1 (Drive of PIO Line 31)  
 
    .equ PIOA_PCMR, PIOA_BASE + 0x0150 @ (Parallel Capture Mode Register) 
        .equ PIOA_PCEN_Shift, 0   @ bitWidth 1 (Parallel Capture Mode Enable)  
        .equ PIOA_DSIZE_Shift, 4   @ bitWidth 2 (Parallel Capture Mode Data Size)  
        .equ PIOA_ALWYS_Shift, 9   @ bitWidth 1 (Parallel Capture Mode Always Sampling)  
        .equ PIOA_HALFS_Shift, 10   @ bitWidth 1 (Parallel Capture Mode Half Sampling)  
        .equ PIOA_FRSTS_Shift, 11   @ bitWidth 1 (Parallel Capture Mode First Sample)  
 
    .equ PIOA_PCIER, PIOA_BASE + 0x0154 @ (Parallel Capture Interrupt Enable Register) 
        .equ PIOA_DRDY_Shift, 0   @ bitWidth 1 (Parallel Capture Mode Data Ready Interrupt Enable)  
        .equ PIOA_OVRE_Shift, 1   @ bitWidth 1 (Parallel Capture Mode Overrun Error Interrupt Enable)  
        .equ PIOA_ENDRX_Shift, 2   @ bitWidth 1 (End of Reception Transfer Interrupt Enable)  
        .equ PIOA_RXBUFF_Shift, 3   @ bitWidth 1 (Reception Buffer Full Interrupt Enable)  
 
    .equ PIOA_PCIDR, PIOA_BASE + 0x0158 @ (Parallel Capture Interrupt Disable Register) 
        .equ PIOA_DRDY_Shift, 0   @ bitWidth 1 (Parallel Capture Mode Data Ready Interrupt Disable)  
        .equ PIOA_OVRE_Shift, 1   @ bitWidth 1 (Parallel Capture Mode Overrun Error Interrupt Disable)  
        .equ PIOA_ENDRX_Shift, 2   @ bitWidth 1 (End of Reception Transfer Interrupt Disable)  
        .equ PIOA_RXBUFF_Shift, 3   @ bitWidth 1 (Reception Buffer Full Interrupt Disable)  
 
    .equ PIOA_PCIMR, PIOA_BASE + 0x015C @ (Parallel Capture Interrupt Mask Register) 
        .equ PIOA_DRDY_Shift, 0   @ bitWidth 1 (Parallel Capture Mode Data Ready Interrupt Mask)  
        .equ PIOA_OVRE_Shift, 1   @ bitWidth 1 (Parallel Capture Mode Overrun Error Interrupt Mask)  
        .equ PIOA_ENDRX_Shift, 2   @ bitWidth 1 (End of Reception Transfer Interrupt Mask)  
        .equ PIOA_RXBUFF_Shift, 3   @ bitWidth 1 (Reception Buffer Full Interrupt Mask)  
 
    .equ PIOA_PCISR, PIOA_BASE + 0x0160 @ (Parallel Capture Interrupt Status Register) 
        .equ PIOA_DRDY_Shift, 0   @ bitWidth 1 (Parallel Capture Mode Data Ready)  
        .equ PIOA_OVRE_Shift, 1   @ bitWidth 1 (Parallel Capture Mode Overrun Error)  
 
    .equ PIOA_PCRHR, PIOA_BASE + 0x0164 @ (Parallel Capture Reception Holding Register) 
        .equ PIOA_RDATA_Shift, 0   @ bitWidth 32 (Parallel Capture Mode Reception Data)  
 

@=========================== PIOB ===========================@
.equ PIOB_BASE, 0x400E1000 @ (Parallel Input/Output Controller) 
    .equ PIOB_PER, PIOB_BASE + 0x0000 @ (PIO Enable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (PIO Enable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (PIO Enable)  
 
    .equ PIOB_PDR, PIOB_BASE + 0x0004 @ (PIO Disable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (PIO Disable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (PIO Disable)  
 
    .equ PIOB_PSR, PIOB_BASE + 0x0008 @ (PIO Status Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (PIO Status)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (PIO Status)  
 
    .equ PIOB_OER, PIOB_BASE + 0x0010 @ (Output Enable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Output Enable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Output Enable)  
 
    .equ PIOB_ODR, PIOB_BASE + 0x0014 @ (Output Disable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Output Disable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Output Disable)  
 
    .equ PIOB_OSR, PIOB_BASE + 0x0018 @ (Output Status Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Output Status)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Output Status)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Output Status)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Output Status)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Output Status)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Output Status)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Output Status)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Output Status)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Output Status)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Output Status)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Output Status)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Output Status)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Output Status)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Output Status)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Output Status)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Output Status)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Output Status)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Output Status)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Output Status)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Output Status)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Output Status)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Output Status)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Output Status)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Output Status)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Output Status)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Output Status)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Output Status)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Output Status)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Output Status)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Output Status)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Output Status)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Output Status)  
 
    .equ PIOB_IFER, PIOB_BASE + 0x0020 @ (Glitch Input Filter Enable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Input Filter Enable)  
 
    .equ PIOB_IFDR, PIOB_BASE + 0x0024 @ (Glitch Input Filter Disable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Input Filter Disable)  
 
    .equ PIOB_IFSR, PIOB_BASE + 0x0028 @ (Glitch Input Filter Status Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Input Filter Status)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Input Filter Status)  
 
    .equ PIOB_SODR, PIOB_BASE + 0x0030 @ (Set Output Data Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Set Output Data)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Set Output Data)  
 
    .equ PIOB_CODR, PIOB_BASE + 0x0034 @ (Clear Output Data Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Clear Output Data)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Clear Output Data)  
 
    .equ PIOB_ODSR, PIOB_BASE + 0x0038 @ (Output Data Status Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Output Data Status)  
 
    .equ PIOB_PDSR, PIOB_BASE + 0x003C @ (Pin Data Status Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Output Data Status)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Output Data Status)  
 
    .equ PIOB_IER, PIOB_BASE + 0x0040 @ (Interrupt Enable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Input Change Interrupt Enable)  
 
    .equ PIOB_IDR, PIOB_BASE + 0x0044 @ (Interrupt Disable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Input Change Interrupt Disable)  
 
    .equ PIOB_IMR, PIOB_BASE + 0x0048 @ (Interrupt Mask Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Input Change Interrupt Mask)  
 
    .equ PIOB_ISR, PIOB_BASE + 0x004C @ (Interrupt Status Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Input Change Interrupt Status)  
 
    .equ PIOB_MDER, PIOB_BASE + 0x0050 @ (Multi-driver Enable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Multi-drive Enable)  
 
    .equ PIOB_MDDR, PIOB_BASE + 0x0054 @ (Multi-driver Disable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Multi-drive Disable)  
 
    .equ PIOB_MDSR, PIOB_BASE + 0x0058 @ (Multi-driver Status Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Multi-drive Status)  
 
    .equ PIOB_PUDR, PIOB_BASE + 0x0060 @ (Pull-up Disable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Pull-Up Disable)  
 
    .equ PIOB_PUER, PIOB_BASE + 0x0064 @ (Pull-up Enable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Pull-Up Enable)  
 
    .equ PIOB_PUSR, PIOB_BASE + 0x0068 @ (Pad Pull-up Status Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Pull-Up Status)  
 
    .equ PIOB_ABCDSR[%s], PIOB_BASE + 0x70 @ (Peripheral ABCD Select Register 0) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Peripheral Select)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Peripheral Select)  
 
    .equ PIOB_IFSCDR, PIOB_BASE + 0x0080 @ (Input Filter Slow Clock Disable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
 
    .equ PIOB_IFSCER, PIOB_BASE + 0x0084 @ (Input Filter Slow Clock Enable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
 
    .equ PIOB_IFSCSR, PIOB_BASE + 0x0088 @ (Input Filter Slow Clock Status Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
 
    .equ PIOB_SCDR, PIOB_BASE + 0x008C @ (Slow Clock Divider Debouncing Register) 
        .equ PIOB_DIV_Shift, 0   @ bitWidth 14 (Slow Clock Divider Selection for Debouncing)  
 
    .equ PIOB_PPDDR, PIOB_BASE + 0x0090 @ (Pad Pull-down Disable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Pull-Down Disable)  
 
    .equ PIOB_PPDER, PIOB_BASE + 0x0094 @ (Pad Pull-down Enable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Pull-Down Enable)  
 
    .equ PIOB_PPDSR, PIOB_BASE + 0x0098 @ (Pad Pull-down Status Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Pull-Down Status)  
 
    .equ PIOB_OWER, PIOB_BASE + 0x00A0 @ (Output Write Enable) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Output Write Enable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Output Write Enable)  
 
    .equ PIOB_OWDR, PIOB_BASE + 0x00A4 @ (Output Write Disable) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Output Write Disable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Output Write Disable)  
 
    .equ PIOB_OWSR, PIOB_BASE + 0x00A8 @ (Output Write Status Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Output Write Status)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Output Write Status)  
 
    .equ PIOB_AIMER, PIOB_BASE + 0x00B0 @ (Additional Interrupt Modes Enable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Additional Interrupt Modes Enable)  
 
    .equ PIOB_AIMDR, PIOB_BASE + 0x00B4 @ (Additional Interrupt Modes Disable Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Additional Interrupt Modes Disable)  
 
    .equ PIOB_AIMMR, PIOB_BASE + 0x00B8 @ (Additional Interrupt Modes Mask Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (IO Line Index)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (IO Line Index)  
 
    .equ PIOB_ESR, PIOB_BASE + 0x00C0 @ (Edge Select Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Edge Interrupt Selection)  
 
    .equ PIOB_LSR, PIOB_BASE + 0x00C4 @ (Level Select Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Level Interrupt Selection)  
 
    .equ PIOB_ELSR, PIOB_BASE + 0x00C8 @ (Edge/Level Status Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
 
    .equ PIOB_FELLSR, PIOB_BASE + 0x00D0 @ (Falling Edge/Low-Level Select Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
 
    .equ PIOB_REHLSR, PIOB_BASE + 0x00D4 @ (Rising Edge/High-Level Select Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
 
    .equ PIOB_FRLHSR, PIOB_BASE + 0x00D8 @ (Fall/Rise - Low/High Status Register) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
 
    .equ PIOB_LOCKSR, PIOB_BASE + 0x00E0 @ (Lock Status) 
        .equ PIOB_P0_Shift, 0   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P1_Shift, 1   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P2_Shift, 2   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P3_Shift, 3   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P4_Shift, 4   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P5_Shift, 5   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P6_Shift, 6   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P7_Shift, 7   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P8_Shift, 8   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P9_Shift, 9   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P10_Shift, 10   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P11_Shift, 11   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P12_Shift, 12   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P13_Shift, 13   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P14_Shift, 14   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P15_Shift, 15   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P16_Shift, 16   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P17_Shift, 17   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P18_Shift, 18   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P19_Shift, 19   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P20_Shift, 20   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P21_Shift, 21   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P22_Shift, 22   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P23_Shift, 23   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P24_Shift, 24   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P25_Shift, 25   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P26_Shift, 26   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P27_Shift, 27   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P28_Shift, 28   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P29_Shift, 29   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P30_Shift, 30   @ bitWidth 1 (Lock Status)  
        .equ PIOB_P31_Shift, 31   @ bitWidth 1 (Lock Status)  
 
    .equ PIOB_WPMR, PIOB_BASE + 0x00E4 @ (Write Protection Mode Register) 
        .equ PIOB_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ PIOB_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ PIOB_WPSR, PIOB_BASE + 0x00E8 @ (Write Protection Status Register) 
        .equ PIOB_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ PIOB_WPVSRC_Shift, 8   @ bitWidth 16 (Write Protection Violation Source)  
 
    .equ PIOB_SCHMITT, PIOB_BASE + 0x0100 @ (Schmitt Trigger Register) 
        .equ PIOB_SCHMITT0_Shift, 0   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT1_Shift, 1   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT2_Shift, 2   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT3_Shift, 3   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT4_Shift, 4   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT5_Shift, 5   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT6_Shift, 6   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT7_Shift, 7   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT8_Shift, 8   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT9_Shift, 9   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT10_Shift, 10   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT11_Shift, 11   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT12_Shift, 12   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT13_Shift, 13   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT14_Shift, 14   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT15_Shift, 15   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT16_Shift, 16   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT17_Shift, 17   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT18_Shift, 18   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT19_Shift, 19   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT20_Shift, 20   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT21_Shift, 21   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT22_Shift, 22   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT23_Shift, 23   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT24_Shift, 24   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT25_Shift, 25   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT26_Shift, 26   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT27_Shift, 27   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT28_Shift, 28   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT29_Shift, 29   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT30_Shift, 30   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOB_SCHMITT31_Shift, 31   @ bitWidth 1 (Schmitt Trigger Control)  
 
    .equ PIOB_DRIVER, PIOB_BASE + 0x0118 @ (I/O Drive Register) 
        .equ PIOB_LINE0_Shift, 0   @ bitWidth 1 (Drive of PIO Line 0)  
        .equ PIOB_LINE1_Shift, 1   @ bitWidth 1 (Drive of PIO Line 1)  
        .equ PIOB_LINE2_Shift, 2   @ bitWidth 1 (Drive of PIO Line 2)  
        .equ PIOB_LINE3_Shift, 3   @ bitWidth 1 (Drive of PIO Line 3)  
        .equ PIOB_LINE4_Shift, 4   @ bitWidth 1 (Drive of PIO Line 4)  
        .equ PIOB_LINE5_Shift, 5   @ bitWidth 1 (Drive of PIO Line 5)  
        .equ PIOB_LINE6_Shift, 6   @ bitWidth 1 (Drive of PIO Line 6)  
        .equ PIOB_LINE7_Shift, 7   @ bitWidth 1 (Drive of PIO Line 7)  
        .equ PIOB_LINE8_Shift, 8   @ bitWidth 1 (Drive of PIO Line 8)  
        .equ PIOB_LINE9_Shift, 9   @ bitWidth 1 (Drive of PIO Line 9)  
        .equ PIOB_LINE10_Shift, 10   @ bitWidth 1 (Drive of PIO Line 10)  
        .equ PIOB_LINE11_Shift, 11   @ bitWidth 1 (Drive of PIO Line 11)  
        .equ PIOB_LINE12_Shift, 12   @ bitWidth 1 (Drive of PIO Line 12)  
        .equ PIOB_LINE13_Shift, 13   @ bitWidth 1 (Drive of PIO Line 13)  
        .equ PIOB_LINE14_Shift, 14   @ bitWidth 1 (Drive of PIO Line 14)  
        .equ PIOB_LINE15_Shift, 15   @ bitWidth 1 (Drive of PIO Line 15)  
        .equ PIOB_LINE16_Shift, 16   @ bitWidth 1 (Drive of PIO Line 16)  
        .equ PIOB_LINE17_Shift, 17   @ bitWidth 1 (Drive of PIO Line 17)  
        .equ PIOB_LINE18_Shift, 18   @ bitWidth 1 (Drive of PIO Line 18)  
        .equ PIOB_LINE19_Shift, 19   @ bitWidth 1 (Drive of PIO Line 19)  
        .equ PIOB_LINE20_Shift, 20   @ bitWidth 1 (Drive of PIO Line 20)  
        .equ PIOB_LINE21_Shift, 21   @ bitWidth 1 (Drive of PIO Line 21)  
        .equ PIOB_LINE22_Shift, 22   @ bitWidth 1 (Drive of PIO Line 22)  
        .equ PIOB_LINE23_Shift, 23   @ bitWidth 1 (Drive of PIO Line 23)  
        .equ PIOB_LINE24_Shift, 24   @ bitWidth 1 (Drive of PIO Line 24)  
        .equ PIOB_LINE25_Shift, 25   @ bitWidth 1 (Drive of PIO Line 25)  
        .equ PIOB_LINE26_Shift, 26   @ bitWidth 1 (Drive of PIO Line 26)  
        .equ PIOB_LINE27_Shift, 27   @ bitWidth 1 (Drive of PIO Line 27)  
        .equ PIOB_LINE28_Shift, 28   @ bitWidth 1 (Drive of PIO Line 28)  
        .equ PIOB_LINE29_Shift, 29   @ bitWidth 1 (Drive of PIO Line 29)  
        .equ PIOB_LINE30_Shift, 30   @ bitWidth 1 (Drive of PIO Line 30)  
        .equ PIOB_LINE31_Shift, 31   @ bitWidth 1 (Drive of PIO Line 31)  
 
    .equ PIOB_PCMR, PIOB_BASE + 0x0150 @ (Parallel Capture Mode Register) 
        .equ PIOB_PCEN_Shift, 0   @ bitWidth 1 (Parallel Capture Mode Enable)  
        .equ PIOB_DSIZE_Shift, 4   @ bitWidth 2 (Parallel Capture Mode Data Size)  
        .equ PIOB_ALWYS_Shift, 9   @ bitWidth 1 (Parallel Capture Mode Always Sampling)  
        .equ PIOB_HALFS_Shift, 10   @ bitWidth 1 (Parallel Capture Mode Half Sampling)  
        .equ PIOB_FRSTS_Shift, 11   @ bitWidth 1 (Parallel Capture Mode First Sample)  
 
    .equ PIOB_PCIER, PIOB_BASE + 0x0154 @ (Parallel Capture Interrupt Enable Register) 
        .equ PIOB_DRDY_Shift, 0   @ bitWidth 1 (Parallel Capture Mode Data Ready Interrupt Enable)  
        .equ PIOB_OVRE_Shift, 1   @ bitWidth 1 (Parallel Capture Mode Overrun Error Interrupt Enable)  
        .equ PIOB_ENDRX_Shift, 2   @ bitWidth 1 (End of Reception Transfer Interrupt Enable)  
        .equ PIOB_RXBUFF_Shift, 3   @ bitWidth 1 (Reception Buffer Full Interrupt Enable)  
 
    .equ PIOB_PCIDR, PIOB_BASE + 0x0158 @ (Parallel Capture Interrupt Disable Register) 
        .equ PIOB_DRDY_Shift, 0   @ bitWidth 1 (Parallel Capture Mode Data Ready Interrupt Disable)  
        .equ PIOB_OVRE_Shift, 1   @ bitWidth 1 (Parallel Capture Mode Overrun Error Interrupt Disable)  
        .equ PIOB_ENDRX_Shift, 2   @ bitWidth 1 (End of Reception Transfer Interrupt Disable)  
        .equ PIOB_RXBUFF_Shift, 3   @ bitWidth 1 (Reception Buffer Full Interrupt Disable)  
 
    .equ PIOB_PCIMR, PIOB_BASE + 0x015C @ (Parallel Capture Interrupt Mask Register) 
        .equ PIOB_DRDY_Shift, 0   @ bitWidth 1 (Parallel Capture Mode Data Ready Interrupt Mask)  
        .equ PIOB_OVRE_Shift, 1   @ bitWidth 1 (Parallel Capture Mode Overrun Error Interrupt Mask)  
        .equ PIOB_ENDRX_Shift, 2   @ bitWidth 1 (End of Reception Transfer Interrupt Mask)  
        .equ PIOB_RXBUFF_Shift, 3   @ bitWidth 1 (Reception Buffer Full Interrupt Mask)  
 
    .equ PIOB_PCISR, PIOB_BASE + 0x0160 @ (Parallel Capture Interrupt Status Register) 
        .equ PIOB_DRDY_Shift, 0   @ bitWidth 1 (Parallel Capture Mode Data Ready)  
        .equ PIOB_OVRE_Shift, 1   @ bitWidth 1 (Parallel Capture Mode Overrun Error)  
 
    .equ PIOB_PCRHR, PIOB_BASE + 0x0164 @ (Parallel Capture Reception Holding Register) 
        .equ PIOB_RDATA_Shift, 0   @ bitWidth 32 (Parallel Capture Mode Reception Data)  
 

@=========================== PIOD ===========================@
.equ PIOD_BASE, 0x400E1400 @ (Parallel Input/Output Controller) 
    .equ PIOD_PER, PIOD_BASE + 0x0000 @ (PIO Enable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (PIO Enable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (PIO Enable)  
 
    .equ PIOD_PDR, PIOD_BASE + 0x0004 @ (PIO Disable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (PIO Disable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (PIO Disable)  
 
    .equ PIOD_PSR, PIOD_BASE + 0x0008 @ (PIO Status Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (PIO Status)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (PIO Status)  
 
    .equ PIOD_OER, PIOD_BASE + 0x0010 @ (Output Enable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Output Enable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Output Enable)  
 
    .equ PIOD_ODR, PIOD_BASE + 0x0014 @ (Output Disable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Output Disable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Output Disable)  
 
    .equ PIOD_OSR, PIOD_BASE + 0x0018 @ (Output Status Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Output Status)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Output Status)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Output Status)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Output Status)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Output Status)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Output Status)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Output Status)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Output Status)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Output Status)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Output Status)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Output Status)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Output Status)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Output Status)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Output Status)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Output Status)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Output Status)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Output Status)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Output Status)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Output Status)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Output Status)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Output Status)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Output Status)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Output Status)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Output Status)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Output Status)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Output Status)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Output Status)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Output Status)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Output Status)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Output Status)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Output Status)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Output Status)  
 
    .equ PIOD_IFER, PIOD_BASE + 0x0020 @ (Glitch Input Filter Enable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Input Filter Enable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Input Filter Enable)  
 
    .equ PIOD_IFDR, PIOD_BASE + 0x0024 @ (Glitch Input Filter Disable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Input Filter Disable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Input Filter Disable)  
 
    .equ PIOD_IFSR, PIOD_BASE + 0x0028 @ (Glitch Input Filter Status Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Input Filter Status)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Input Filter Status)  
 
    .equ PIOD_SODR, PIOD_BASE + 0x0030 @ (Set Output Data Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Set Output Data)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Set Output Data)  
 
    .equ PIOD_CODR, PIOD_BASE + 0x0034 @ (Clear Output Data Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Clear Output Data)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Clear Output Data)  
 
    .equ PIOD_ODSR, PIOD_BASE + 0x0038 @ (Output Data Status Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Output Data Status)  
 
    .equ PIOD_PDSR, PIOD_BASE + 0x003C @ (Pin Data Status Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Output Data Status)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Output Data Status)  
 
    .equ PIOD_IER, PIOD_BASE + 0x0040 @ (Interrupt Enable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Input Change Interrupt Enable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Input Change Interrupt Enable)  
 
    .equ PIOD_IDR, PIOD_BASE + 0x0044 @ (Interrupt Disable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Input Change Interrupt Disable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Input Change Interrupt Disable)  
 
    .equ PIOD_IMR, PIOD_BASE + 0x0048 @ (Interrupt Mask Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Input Change Interrupt Mask)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Input Change Interrupt Mask)  
 
    .equ PIOD_ISR, PIOD_BASE + 0x004C @ (Interrupt Status Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Input Change Interrupt Status)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Input Change Interrupt Status)  
 
    .equ PIOD_MDER, PIOD_BASE + 0x0050 @ (Multi-driver Enable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Multi-drive Enable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Multi-drive Enable)  
 
    .equ PIOD_MDDR, PIOD_BASE + 0x0054 @ (Multi-driver Disable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Multi-drive Disable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Multi-drive Disable)  
 
    .equ PIOD_MDSR, PIOD_BASE + 0x0058 @ (Multi-driver Status Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Multi-drive Status)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Multi-drive Status)  
 
    .equ PIOD_PUDR, PIOD_BASE + 0x0060 @ (Pull-up Disable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Pull-Up Disable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Pull-Up Disable)  
 
    .equ PIOD_PUER, PIOD_BASE + 0x0064 @ (Pull-up Enable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Pull-Up Enable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Pull-Up Enable)  
 
    .equ PIOD_PUSR, PIOD_BASE + 0x0068 @ (Pad Pull-up Status Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Pull-Up Status)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Pull-Up Status)  
 
    .equ PIOD_ABCDSR[%s], PIOD_BASE + 0x70 @ (Peripheral ABCD Select Register 0) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Peripheral Select)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Peripheral Select)  
 
    .equ PIOD_IFSCDR, PIOD_BASE + 0x0080 @ (Input Filter Slow Clock Disable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Peripheral Clock Glitch Filtering Select)  
 
    .equ PIOD_IFSCER, PIOD_BASE + 0x0084 @ (Input Filter Slow Clock Enable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Slow Clock Debouncing Filtering Select)  
 
    .equ PIOD_IFSCSR, PIOD_BASE + 0x0088 @ (Input Filter Slow Clock Status Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Glitch or Debouncing Filter Selection Status)  
 
    .equ PIOD_SCDR, PIOD_BASE + 0x008C @ (Slow Clock Divider Debouncing Register) 
        .equ PIOD_DIV_Shift, 0   @ bitWidth 14 (Slow Clock Divider Selection for Debouncing)  
 
    .equ PIOD_PPDDR, PIOD_BASE + 0x0090 @ (Pad Pull-down Disable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Pull-Down Disable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Pull-Down Disable)  
 
    .equ PIOD_PPDER, PIOD_BASE + 0x0094 @ (Pad Pull-down Enable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Pull-Down Enable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Pull-Down Enable)  
 
    .equ PIOD_PPDSR, PIOD_BASE + 0x0098 @ (Pad Pull-down Status Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Pull-Down Status)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Pull-Down Status)  
 
    .equ PIOD_OWER, PIOD_BASE + 0x00A0 @ (Output Write Enable) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Output Write Enable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Output Write Enable)  
 
    .equ PIOD_OWDR, PIOD_BASE + 0x00A4 @ (Output Write Disable) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Output Write Disable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Output Write Disable)  
 
    .equ PIOD_OWSR, PIOD_BASE + 0x00A8 @ (Output Write Status Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Output Write Status)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Output Write Status)  
 
    .equ PIOD_AIMER, PIOD_BASE + 0x00B0 @ (Additional Interrupt Modes Enable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Additional Interrupt Modes Enable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Additional Interrupt Modes Enable)  
 
    .equ PIOD_AIMDR, PIOD_BASE + 0x00B4 @ (Additional Interrupt Modes Disable Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Additional Interrupt Modes Disable)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Additional Interrupt Modes Disable)  
 
    .equ PIOD_AIMMR, PIOD_BASE + 0x00B8 @ (Additional Interrupt Modes Mask Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (IO Line Index)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (IO Line Index)  
 
    .equ PIOD_ESR, PIOD_BASE + 0x00C0 @ (Edge Select Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Edge Interrupt Selection)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Edge Interrupt Selection)  
 
    .equ PIOD_LSR, PIOD_BASE + 0x00C4 @ (Level Select Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Level Interrupt Selection)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Level Interrupt Selection)  
 
    .equ PIOD_ELSR, PIOD_BASE + 0x00C8 @ (Edge/Level Status Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
 
    .equ PIOD_FELLSR, PIOD_BASE + 0x00D0 @ (Falling Edge/Low-Level Select Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Falling Edge/Low-Level Interrupt Selection)  
 
    .equ PIOD_REHLSR, PIOD_BASE + 0x00D4 @ (Rising Edge/High-Level Select Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Rising Edge/High-Level Interrupt Selection)  
 
    .equ PIOD_FRLHSR, PIOD_BASE + 0x00D8 @ (Fall/Rise - Low/High Status Register) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Edge/Level Interrupt Source Selection)  
 
    .equ PIOD_LOCKSR, PIOD_BASE + 0x00E0 @ (Lock Status) 
        .equ PIOD_P0_Shift, 0   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P1_Shift, 1   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P2_Shift, 2   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P3_Shift, 3   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P4_Shift, 4   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P5_Shift, 5   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P6_Shift, 6   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P7_Shift, 7   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P8_Shift, 8   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P9_Shift, 9   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P10_Shift, 10   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P11_Shift, 11   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P12_Shift, 12   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P13_Shift, 13   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P14_Shift, 14   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P15_Shift, 15   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P16_Shift, 16   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P17_Shift, 17   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P18_Shift, 18   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P19_Shift, 19   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P20_Shift, 20   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P21_Shift, 21   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P22_Shift, 22   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P23_Shift, 23   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P24_Shift, 24   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P25_Shift, 25   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P26_Shift, 26   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P27_Shift, 27   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P28_Shift, 28   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P29_Shift, 29   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P30_Shift, 30   @ bitWidth 1 (Lock Status)  
        .equ PIOD_P31_Shift, 31   @ bitWidth 1 (Lock Status)  
 
    .equ PIOD_WPMR, PIOD_BASE + 0x00E4 @ (Write Protection Mode Register) 
        .equ PIOD_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ PIOD_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ PIOD_WPSR, PIOD_BASE + 0x00E8 @ (Write Protection Status Register) 
        .equ PIOD_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ PIOD_WPVSRC_Shift, 8   @ bitWidth 16 (Write Protection Violation Source)  
 
    .equ PIOD_SCHMITT, PIOD_BASE + 0x0100 @ (Schmitt Trigger Register) 
        .equ PIOD_SCHMITT0_Shift, 0   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT1_Shift, 1   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT2_Shift, 2   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT3_Shift, 3   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT4_Shift, 4   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT5_Shift, 5   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT6_Shift, 6   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT7_Shift, 7   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT8_Shift, 8   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT9_Shift, 9   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT10_Shift, 10   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT11_Shift, 11   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT12_Shift, 12   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT13_Shift, 13   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT14_Shift, 14   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT15_Shift, 15   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT16_Shift, 16   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT17_Shift, 17   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT18_Shift, 18   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT19_Shift, 19   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT20_Shift, 20   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT21_Shift, 21   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT22_Shift, 22   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT23_Shift, 23   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT24_Shift, 24   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT25_Shift, 25   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT26_Shift, 26   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT27_Shift, 27   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT28_Shift, 28   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT29_Shift, 29   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT30_Shift, 30   @ bitWidth 1 (Schmitt Trigger Control)  
        .equ PIOD_SCHMITT31_Shift, 31   @ bitWidth 1 (Schmitt Trigger Control)  
 
    .equ PIOD_DRIVER, PIOD_BASE + 0x0118 @ (I/O Drive Register) 
        .equ PIOD_LINE0_Shift, 0   @ bitWidth 1 (Drive of PIO Line 0)  
        .equ PIOD_LINE1_Shift, 1   @ bitWidth 1 (Drive of PIO Line 1)  
        .equ PIOD_LINE2_Shift, 2   @ bitWidth 1 (Drive of PIO Line 2)  
        .equ PIOD_LINE3_Shift, 3   @ bitWidth 1 (Drive of PIO Line 3)  
        .equ PIOD_LINE4_Shift, 4   @ bitWidth 1 (Drive of PIO Line 4)  
        .equ PIOD_LINE5_Shift, 5   @ bitWidth 1 (Drive of PIO Line 5)  
        .equ PIOD_LINE6_Shift, 6   @ bitWidth 1 (Drive of PIO Line 6)  
        .equ PIOD_LINE7_Shift, 7   @ bitWidth 1 (Drive of PIO Line 7)  
        .equ PIOD_LINE8_Shift, 8   @ bitWidth 1 (Drive of PIO Line 8)  
        .equ PIOD_LINE9_Shift, 9   @ bitWidth 1 (Drive of PIO Line 9)  
        .equ PIOD_LINE10_Shift, 10   @ bitWidth 1 (Drive of PIO Line 10)  
        .equ PIOD_LINE11_Shift, 11   @ bitWidth 1 (Drive of PIO Line 11)  
        .equ PIOD_LINE12_Shift, 12   @ bitWidth 1 (Drive of PIO Line 12)  
        .equ PIOD_LINE13_Shift, 13   @ bitWidth 1 (Drive of PIO Line 13)  
        .equ PIOD_LINE14_Shift, 14   @ bitWidth 1 (Drive of PIO Line 14)  
        .equ PIOD_LINE15_Shift, 15   @ bitWidth 1 (Drive of PIO Line 15)  
        .equ PIOD_LINE16_Shift, 16   @ bitWidth 1 (Drive of PIO Line 16)  
        .equ PIOD_LINE17_Shift, 17   @ bitWidth 1 (Drive of PIO Line 17)  
        .equ PIOD_LINE18_Shift, 18   @ bitWidth 1 (Drive of PIO Line 18)  
        .equ PIOD_LINE19_Shift, 19   @ bitWidth 1 (Drive of PIO Line 19)  
        .equ PIOD_LINE20_Shift, 20   @ bitWidth 1 (Drive of PIO Line 20)  
        .equ PIOD_LINE21_Shift, 21   @ bitWidth 1 (Drive of PIO Line 21)  
        .equ PIOD_LINE22_Shift, 22   @ bitWidth 1 (Drive of PIO Line 22)  
        .equ PIOD_LINE23_Shift, 23   @ bitWidth 1 (Drive of PIO Line 23)  
        .equ PIOD_LINE24_Shift, 24   @ bitWidth 1 (Drive of PIO Line 24)  
        .equ PIOD_LINE25_Shift, 25   @ bitWidth 1 (Drive of PIO Line 25)  
        .equ PIOD_LINE26_Shift, 26   @ bitWidth 1 (Drive of PIO Line 26)  
        .equ PIOD_LINE27_Shift, 27   @ bitWidth 1 (Drive of PIO Line 27)  
        .equ PIOD_LINE28_Shift, 28   @ bitWidth 1 (Drive of PIO Line 28)  
        .equ PIOD_LINE29_Shift, 29   @ bitWidth 1 (Drive of PIO Line 29)  
        .equ PIOD_LINE30_Shift, 30   @ bitWidth 1 (Drive of PIO Line 30)  
        .equ PIOD_LINE31_Shift, 31   @ bitWidth 1 (Drive of PIO Line 31)  
 
    .equ PIOD_PCMR, PIOD_BASE + 0x0150 @ (Parallel Capture Mode Register) 
        .equ PIOD_PCEN_Shift, 0   @ bitWidth 1 (Parallel Capture Mode Enable)  
        .equ PIOD_DSIZE_Shift, 4   @ bitWidth 2 (Parallel Capture Mode Data Size)  
        .equ PIOD_ALWYS_Shift, 9   @ bitWidth 1 (Parallel Capture Mode Always Sampling)  
        .equ PIOD_HALFS_Shift, 10   @ bitWidth 1 (Parallel Capture Mode Half Sampling)  
        .equ PIOD_FRSTS_Shift, 11   @ bitWidth 1 (Parallel Capture Mode First Sample)  
 
    .equ PIOD_PCIER, PIOD_BASE + 0x0154 @ (Parallel Capture Interrupt Enable Register) 
        .equ PIOD_DRDY_Shift, 0   @ bitWidth 1 (Parallel Capture Mode Data Ready Interrupt Enable)  
        .equ PIOD_OVRE_Shift, 1   @ bitWidth 1 (Parallel Capture Mode Overrun Error Interrupt Enable)  
        .equ PIOD_ENDRX_Shift, 2   @ bitWidth 1 (End of Reception Transfer Interrupt Enable)  
        .equ PIOD_RXBUFF_Shift, 3   @ bitWidth 1 (Reception Buffer Full Interrupt Enable)  
 
    .equ PIOD_PCIDR, PIOD_BASE + 0x0158 @ (Parallel Capture Interrupt Disable Register) 
        .equ PIOD_DRDY_Shift, 0   @ bitWidth 1 (Parallel Capture Mode Data Ready Interrupt Disable)  
        .equ PIOD_OVRE_Shift, 1   @ bitWidth 1 (Parallel Capture Mode Overrun Error Interrupt Disable)  
        .equ PIOD_ENDRX_Shift, 2   @ bitWidth 1 (End of Reception Transfer Interrupt Disable)  
        .equ PIOD_RXBUFF_Shift, 3   @ bitWidth 1 (Reception Buffer Full Interrupt Disable)  
 
    .equ PIOD_PCIMR, PIOD_BASE + 0x015C @ (Parallel Capture Interrupt Mask Register) 
        .equ PIOD_DRDY_Shift, 0   @ bitWidth 1 (Parallel Capture Mode Data Ready Interrupt Mask)  
        .equ PIOD_OVRE_Shift, 1   @ bitWidth 1 (Parallel Capture Mode Overrun Error Interrupt Mask)  
        .equ PIOD_ENDRX_Shift, 2   @ bitWidth 1 (End of Reception Transfer Interrupt Mask)  
        .equ PIOD_RXBUFF_Shift, 3   @ bitWidth 1 (Reception Buffer Full Interrupt Mask)  
 
    .equ PIOD_PCISR, PIOD_BASE + 0x0160 @ (Parallel Capture Interrupt Status Register) 
        .equ PIOD_DRDY_Shift, 0   @ bitWidth 1 (Parallel Capture Mode Data Ready)  
        .equ PIOD_OVRE_Shift, 1   @ bitWidth 1 (Parallel Capture Mode Overrun Error)  
 
    .equ PIOD_PCRHR, PIOD_BASE + 0x0164 @ (Parallel Capture Reception Holding Register) 
        .equ PIOD_RDATA_Shift, 0   @ bitWidth 32 (Parallel Capture Mode Reception Data)  
 

@=========================== PMC ===========================@
.equ PMC_BASE, 0x400E0600 @ (Power Management Controller) 
    .equ PMC_SCER, PMC_BASE + 0x0000 @ (System Clock Enable Register) 
        .equ PMC_USBCLK_Shift, 5   @ bitWidth 1 (Enable USB FS Clock)  
        .equ PMC_PCK0_Shift, 8   @ bitWidth 1 (Programmable Clock 0 Output Enable)  
        .equ PMC_PCK1_Shift, 9   @ bitWidth 1 (Programmable Clock 1 Output Enable)  
        .equ PMC_PCK2_Shift, 10   @ bitWidth 1 (Programmable Clock 2 Output Enable)  
        .equ PMC_PCK3_Shift, 11   @ bitWidth 1 (Programmable Clock 3 Output Enable)  
        .equ PMC_PCK4_Shift, 12   @ bitWidth 1 (Programmable Clock 4 Output Enable)  
        .equ PMC_PCK5_Shift, 13   @ bitWidth 1 (Programmable Clock 5 Output Enable)  
        .equ PMC_PCK6_Shift, 14   @ bitWidth 1 (Programmable Clock 6 Output Enable)  
 
    .equ PMC_SCDR, PMC_BASE + 0x0004 @ (System Clock Disable Register) 
        .equ PMC_USBCLK_Shift, 5   @ bitWidth 1 (Disable USB FS Clock)  
        .equ PMC_PCK0_Shift, 8   @ bitWidth 1 (Programmable Clock 0 Output Disable)  
        .equ PMC_PCK1_Shift, 9   @ bitWidth 1 (Programmable Clock 1 Output Disable)  
        .equ PMC_PCK2_Shift, 10   @ bitWidth 1 (Programmable Clock 2 Output Disable)  
        .equ PMC_PCK3_Shift, 11   @ bitWidth 1 (Programmable Clock 3 Output Disable)  
        .equ PMC_PCK4_Shift, 12   @ bitWidth 1 (Programmable Clock 4 Output Disable)  
        .equ PMC_PCK5_Shift, 13   @ bitWidth 1 (Programmable Clock 5 Output Disable)  
        .equ PMC_PCK6_Shift, 14   @ bitWidth 1 (Programmable Clock 6 Output Disable)  
 
    .equ PMC_SCSR, PMC_BASE + 0x0008 @ (System Clock Status Register) 
        .equ PMC_HCLKS_Shift, 0   @ bitWidth 1 (HCLK Status)  
        .equ PMC_USBCLK_Shift, 5   @ bitWidth 1 (USB FS Clock Status)  
        .equ PMC_PCK0_Shift, 8   @ bitWidth 1 (Programmable Clock 0 Output Status)  
        .equ PMC_PCK1_Shift, 9   @ bitWidth 1 (Programmable Clock 1 Output Status)  
        .equ PMC_PCK2_Shift, 10   @ bitWidth 1 (Programmable Clock 2 Output Status)  
        .equ PMC_PCK3_Shift, 11   @ bitWidth 1 (Programmable Clock 3 Output Status)  
        .equ PMC_PCK4_Shift, 12   @ bitWidth 1 (Programmable Clock 4 Output Status)  
        .equ PMC_PCK5_Shift, 13   @ bitWidth 1 (Programmable Clock 5 Output Status)  
        .equ PMC_PCK6_Shift, 14   @ bitWidth 1 (Programmable Clock 6 Output Status)  
 
    .equ PMC_PCER0, PMC_BASE + 0x0010 @ (Peripheral Clock Enable Register 0) 
        .equ PMC_PID7_Shift, 7   @ bitWidth 1 (Peripheral Clock 7 Enable)  
        .equ PMC_PID8_Shift, 8   @ bitWidth 1 (Peripheral Clock 8 Enable)  
        .equ PMC_PID9_Shift, 9   @ bitWidth 1 (Peripheral Clock 9 Enable)  
        .equ PMC_PID10_Shift, 10   @ bitWidth 1 (Peripheral Clock 10 Enable)  
        .equ PMC_PID11_Shift, 11   @ bitWidth 1 (Peripheral Clock 11 Enable)  
        .equ PMC_PID12_Shift, 12   @ bitWidth 1 (Peripheral Clock 12 Enable)  
        .equ PMC_PID13_Shift, 13   @ bitWidth 1 (Peripheral Clock 13 Enable)  
        .equ PMC_PID14_Shift, 14   @ bitWidth 1 (Peripheral Clock 14 Enable)  
        .equ PMC_PID15_Shift, 15   @ bitWidth 1 (Peripheral Clock 15 Enable)  
        .equ PMC_PID16_Shift, 16   @ bitWidth 1 (Peripheral Clock 16 Enable)  
        .equ PMC_PID17_Shift, 17   @ bitWidth 1 (Peripheral Clock 17 Enable)  
        .equ PMC_PID18_Shift, 18   @ bitWidth 1 (Peripheral Clock 18 Enable)  
        .equ PMC_PID19_Shift, 19   @ bitWidth 1 (Peripheral Clock 19 Enable)  
        .equ PMC_PID20_Shift, 20   @ bitWidth 1 (Peripheral Clock 20 Enable)  
        .equ PMC_PID21_Shift, 21   @ bitWidth 1 (Peripheral Clock 21 Enable)  
        .equ PMC_PID22_Shift, 22   @ bitWidth 1 (Peripheral Clock 22 Enable)  
        .equ PMC_PID23_Shift, 23   @ bitWidth 1 (Peripheral Clock 23 Enable)  
        .equ PMC_PID24_Shift, 24   @ bitWidth 1 (Peripheral Clock 24 Enable)  
        .equ PMC_PID25_Shift, 25   @ bitWidth 1 (Peripheral Clock 25 Enable)  
        .equ PMC_PID26_Shift, 26   @ bitWidth 1 (Peripheral Clock 26 Enable)  
        .equ PMC_PID27_Shift, 27   @ bitWidth 1 (Peripheral Clock 27 Enable)  
        .equ PMC_PID28_Shift, 28   @ bitWidth 1 (Peripheral Clock 28 Enable)  
        .equ PMC_PID29_Shift, 29   @ bitWidth 1 (Peripheral Clock 29 Enable)  
        .equ PMC_PID30_Shift, 30   @ bitWidth 1 (Peripheral Clock 30 Enable)  
        .equ PMC_PID31_Shift, 31   @ bitWidth 1 (Peripheral Clock 31 Enable)  
 
    .equ PMC_PCDR0, PMC_BASE + 0x0014 @ (Peripheral Clock Disable Register 0) 
        .equ PMC_PID7_Shift, 7   @ bitWidth 1 (Peripheral Clock 7 Disable)  
        .equ PMC_PID8_Shift, 8   @ bitWidth 1 (Peripheral Clock 8 Disable)  
        .equ PMC_PID9_Shift, 9   @ bitWidth 1 (Peripheral Clock 9 Disable)  
        .equ PMC_PID10_Shift, 10   @ bitWidth 1 (Peripheral Clock 10 Disable)  
        .equ PMC_PID11_Shift, 11   @ bitWidth 1 (Peripheral Clock 11 Disable)  
        .equ PMC_PID12_Shift, 12   @ bitWidth 1 (Peripheral Clock 12 Disable)  
        .equ PMC_PID13_Shift, 13   @ bitWidth 1 (Peripheral Clock 13 Disable)  
        .equ PMC_PID14_Shift, 14   @ bitWidth 1 (Peripheral Clock 14 Disable)  
        .equ PMC_PID15_Shift, 15   @ bitWidth 1 (Peripheral Clock 15 Disable)  
        .equ PMC_PID16_Shift, 16   @ bitWidth 1 (Peripheral Clock 16 Disable)  
        .equ PMC_PID17_Shift, 17   @ bitWidth 1 (Peripheral Clock 17 Disable)  
        .equ PMC_PID18_Shift, 18   @ bitWidth 1 (Peripheral Clock 18 Disable)  
        .equ PMC_PID19_Shift, 19   @ bitWidth 1 (Peripheral Clock 19 Disable)  
        .equ PMC_PID20_Shift, 20   @ bitWidth 1 (Peripheral Clock 20 Disable)  
        .equ PMC_PID21_Shift, 21   @ bitWidth 1 (Peripheral Clock 21 Disable)  
        .equ PMC_PID22_Shift, 22   @ bitWidth 1 (Peripheral Clock 22 Disable)  
        .equ PMC_PID23_Shift, 23   @ bitWidth 1 (Peripheral Clock 23 Disable)  
        .equ PMC_PID24_Shift, 24   @ bitWidth 1 (Peripheral Clock 24 Disable)  
        .equ PMC_PID25_Shift, 25   @ bitWidth 1 (Peripheral Clock 25 Disable)  
        .equ PMC_PID26_Shift, 26   @ bitWidth 1 (Peripheral Clock 26 Disable)  
        .equ PMC_PID27_Shift, 27   @ bitWidth 1 (Peripheral Clock 27 Disable)  
        .equ PMC_PID28_Shift, 28   @ bitWidth 1 (Peripheral Clock 28 Disable)  
        .equ PMC_PID29_Shift, 29   @ bitWidth 1 (Peripheral Clock 29 Disable)  
        .equ PMC_PID30_Shift, 30   @ bitWidth 1 (Peripheral Clock 30 Disable)  
        .equ PMC_PID31_Shift, 31   @ bitWidth 1 (Peripheral Clock 31 Disable)  
 
    .equ PMC_PCSR0, PMC_BASE + 0x0018 @ (Peripheral Clock Status Register 0) 
        .equ PMC_PID7_Shift, 7   @ bitWidth 1 (Peripheral Clock 7 Status)  
        .equ PMC_PID8_Shift, 8   @ bitWidth 1 (Peripheral Clock 8 Status)  
        .equ PMC_PID9_Shift, 9   @ bitWidth 1 (Peripheral Clock 9 Status)  
        .equ PMC_PID10_Shift, 10   @ bitWidth 1 (Peripheral Clock 10 Status)  
        .equ PMC_PID11_Shift, 11   @ bitWidth 1 (Peripheral Clock 11 Status)  
        .equ PMC_PID12_Shift, 12   @ bitWidth 1 (Peripheral Clock 12 Status)  
        .equ PMC_PID13_Shift, 13   @ bitWidth 1 (Peripheral Clock 13 Status)  
        .equ PMC_PID14_Shift, 14   @ bitWidth 1 (Peripheral Clock 14 Status)  
        .equ PMC_PID15_Shift, 15   @ bitWidth 1 (Peripheral Clock 15 Status)  
        .equ PMC_PID16_Shift, 16   @ bitWidth 1 (Peripheral Clock 16 Status)  
        .equ PMC_PID17_Shift, 17   @ bitWidth 1 (Peripheral Clock 17 Status)  
        .equ PMC_PID18_Shift, 18   @ bitWidth 1 (Peripheral Clock 18 Status)  
        .equ PMC_PID19_Shift, 19   @ bitWidth 1 (Peripheral Clock 19 Status)  
        .equ PMC_PID20_Shift, 20   @ bitWidth 1 (Peripheral Clock 20 Status)  
        .equ PMC_PID21_Shift, 21   @ bitWidth 1 (Peripheral Clock 21 Status)  
        .equ PMC_PID22_Shift, 22   @ bitWidth 1 (Peripheral Clock 22 Status)  
        .equ PMC_PID23_Shift, 23   @ bitWidth 1 (Peripheral Clock 23 Status)  
        .equ PMC_PID24_Shift, 24   @ bitWidth 1 (Peripheral Clock 24 Status)  
        .equ PMC_PID25_Shift, 25   @ bitWidth 1 (Peripheral Clock 25 Status)  
        .equ PMC_PID26_Shift, 26   @ bitWidth 1 (Peripheral Clock 26 Status)  
        .equ PMC_PID27_Shift, 27   @ bitWidth 1 (Peripheral Clock 27 Status)  
        .equ PMC_PID28_Shift, 28   @ bitWidth 1 (Peripheral Clock 28 Status)  
        .equ PMC_PID29_Shift, 29   @ bitWidth 1 (Peripheral Clock 29 Status)  
        .equ PMC_PID30_Shift, 30   @ bitWidth 1 (Peripheral Clock 30 Status)  
        .equ PMC_PID31_Shift, 31   @ bitWidth 1 (Peripheral Clock 31 Status)  
 
    .equ PMC_CKGR_UCKR, PMC_BASE + 0x001C @ (UTMI Clock Register) 
        .equ PMC_UPLLEN_Shift, 16   @ bitWidth 1 (UTMI PLL Enable)  
        .equ PMC_UPLLCOUNT_Shift, 20   @ bitWidth 4 (UTMI PLL Start-up Time)  
 
    .equ PMC_CKGR_MOR, PMC_BASE + 0x0020 @ (Main Oscillator Register) 
        .equ PMC_MOSCXTEN_Shift, 0   @ bitWidth 1 (Main Crystal Oscillator Enable)  
        .equ PMC_MOSCXTBY_Shift, 1   @ bitWidth 1 (Main Crystal Oscillator Bypass)  
        .equ PMC_WAITMODE_Shift, 2   @ bitWidth 1 (Wait Mode Command Write-only)  
        .equ PMC_MOSCRCEN_Shift, 3   @ bitWidth 1 (Main RC Oscillator Enable)  
        .equ PMC_MOSCRCF_Shift, 4   @ bitWidth 3 (Main RC Oscillator Frequency Selection)  
        .equ PMC_MOSCXTST_Shift, 8   @ bitWidth 8 (Main Crystal Oscillator Startup Time)  
        .equ PMC_KEY_Shift, 16   @ bitWidth 8 (Write Access Password)  
        .equ PMC_MOSCSEL_Shift, 24   @ bitWidth 1 (Main Clock Oscillator Selection)  
        .equ PMC_CFDEN_Shift, 25   @ bitWidth 1 (Clock Failure Detector Enable)  
        .equ PMC_XT32KFME_Shift, 26   @ bitWidth 1 (32.768 kHz Crystal Oscillator Frequency Monitoring Enable)  
 
    .equ PMC_CKGR_MCFR, PMC_BASE + 0x0024 @ (Main Clock Frequency Register) 
        .equ PMC_MAINF_Shift, 0   @ bitWidth 16 (Main Clock Frequency)  
        .equ PMC_MAINFRDY_Shift, 16   @ bitWidth 1 (Main Clock Frequency Measure Ready)  
        .equ PMC_RCMEAS_Shift, 20   @ bitWidth 1 (RC Oscillator Frequency Measure write-only)  
        .equ PMC_CCSS_Shift, 24   @ bitWidth 1 (Counter Clock Source Selection)  
 
    .equ PMC_CKGR_PLLAR, PMC_BASE + 0x0028 @ (PLLA Register) 
        .equ PMC_DIVA_Shift, 0   @ bitWidth 8 (PLLA Front End Divider)  
        .equ PMC_PLLACOUNT_Shift, 8   @ bitWidth 6 (PLLA Counter)  
        .equ PMC_MULA_Shift, 16   @ bitWidth 11 (PLLA Multiplier)  
        .equ PMC_ONE_Shift, 29   @ bitWidth 1 (Must Be Set to 1)  
 
    .equ PMC_MCKR, PMC_BASE + 0x0030 @ (Master Clock Register) 
        .equ PMC_CSS_Shift, 0   @ bitWidth 2 (Master Clock Source Selection)  
        .equ PMC_PRES_Shift, 4   @ bitWidth 3 (Processor Clock Prescaler)  
        .equ PMC_MDIV_Shift, 8   @ bitWidth 2 (Master Clock Division)  
        .equ PMC_UPLLDIV2_Shift, 13   @ bitWidth 1 (UPLL Divider by 2)  
 
    .equ PMC_USB, PMC_BASE + 0x0038 @ (USB Clock Register) 
        .equ PMC_USBS_Shift, 0   @ bitWidth 1 (USB Input Clock Selection)  
        .equ PMC_USBDIV_Shift, 8   @ bitWidth 4 (Divider for USB_48M)  
 
    .equ PMC_PCK[%s], PMC_BASE + 0x40 @ (Programmable Clock Register) 
        .equ PMC_CSS_Shift, 0   @ bitWidth 3 (Programmable Clock Source Selection)  
        .equ PMC_PRES_Shift, 4   @ bitWidth 8 (Programmable Clock Prescaler)  
 
    .equ PMC_IER, PMC_BASE + 0x0060 @ (Interrupt Enable Register) 
        .equ PMC_MOSCXTS_Shift, 0   @ bitWidth 1 (Main Crystal Oscillator Status Interrupt Enable)  
        .equ PMC_LOCKA_Shift, 1   @ bitWidth 1 (PLLA Lock Interrupt Enable)  
        .equ PMC_MCKRDY_Shift, 3   @ bitWidth 1 (Master Clock Ready Interrupt Enable)  
        .equ PMC_LOCKU_Shift, 6   @ bitWidth 1 (UTMI PLL Lock Interrupt Enable)  
        .equ PMC_PCKRDY0_Shift, 8   @ bitWidth 1 (Programmable Clock Ready 0 Interrupt Enable)  
        .equ PMC_PCKRDY1_Shift, 9   @ bitWidth 1 (Programmable Clock Ready 1 Interrupt Enable)  
        .equ PMC_PCKRDY2_Shift, 10   @ bitWidth 1 (Programmable Clock Ready 2 Interrupt Enable)  
        .equ PMC_PCKRDY3_Shift, 11   @ bitWidth 1 (Programmable Clock Ready 3 Interrupt Enable)  
        .equ PMC_PCKRDY4_Shift, 12   @ bitWidth 1 (Programmable Clock Ready 4 Interrupt Enable)  
        .equ PMC_PCKRDY5_Shift, 13   @ bitWidth 1 (Programmable Clock Ready 5 Interrupt Enable)  
        .equ PMC_PCKRDY6_Shift, 14   @ bitWidth 1 (Programmable Clock Ready 6 Interrupt Enable)  
        .equ PMC_MOSCSELS_Shift, 16   @ bitWidth 1 (Main Clock Source Oscillator Selection Status Interrupt Enable)  
        .equ PMC_MOSCRCS_Shift, 17   @ bitWidth 1 (Main RC Oscillator Status Interrupt Enable)  
        .equ PMC_CFDEV_Shift, 18   @ bitWidth 1 (Clock Failure Detector Event Interrupt Enable)  
        .equ PMC_XT32KERR_Shift, 21   @ bitWidth 1 (32.768 kHz Crystal Oscillator Error Interrupt Enable)  
 
    .equ PMC_IDR, PMC_BASE + 0x0064 @ (Interrupt Disable Register) 
        .equ PMC_MOSCXTS_Shift, 0   @ bitWidth 1 (Main Crystal Oscillator Status Interrupt Disable)  
        .equ PMC_LOCKA_Shift, 1   @ bitWidth 1 (PLLA Lock Interrupt Disable)  
        .equ PMC_MCKRDY_Shift, 3   @ bitWidth 1 (Master Clock Ready Interrupt Disable)  
        .equ PMC_LOCKU_Shift, 6   @ bitWidth 1 (UTMI PLL Lock Interrupt Disable)  
        .equ PMC_PCKRDY0_Shift, 8   @ bitWidth 1 (Programmable Clock Ready 0 Interrupt Disable)  
        .equ PMC_PCKRDY1_Shift, 9   @ bitWidth 1 (Programmable Clock Ready 1 Interrupt Disable)  
        .equ PMC_PCKRDY2_Shift, 10   @ bitWidth 1 (Programmable Clock Ready 2 Interrupt Disable)  
        .equ PMC_PCKRDY3_Shift, 11   @ bitWidth 1 (Programmable Clock Ready 3 Interrupt Disable)  
        .equ PMC_PCKRDY4_Shift, 12   @ bitWidth 1 (Programmable Clock Ready 4 Interrupt Disable)  
        .equ PMC_PCKRDY5_Shift, 13   @ bitWidth 1 (Programmable Clock Ready 5 Interrupt Disable)  
        .equ PMC_PCKRDY6_Shift, 14   @ bitWidth 1 (Programmable Clock Ready 6 Interrupt Disable)  
        .equ PMC_MOSCSELS_Shift, 16   @ bitWidth 1 (Main Clock Source Oscillator Selection Status Interrupt Disable)  
        .equ PMC_MOSCRCS_Shift, 17   @ bitWidth 1 (Main RC Status Interrupt Disable)  
        .equ PMC_CFDEV_Shift, 18   @ bitWidth 1 (Clock Failure Detector Event Interrupt Disable)  
        .equ PMC_XT32KERR_Shift, 21   @ bitWidth 1 (32.768 kHz Crystal Oscillator Error Interrupt Disable)  
 
    .equ PMC_SR, PMC_BASE + 0x0068 @ (Status Register) 
        .equ PMC_MOSCXTS_Shift, 0   @ bitWidth 1 (Main Crystal Oscillator Status)  
        .equ PMC_LOCKA_Shift, 1   @ bitWidth 1 (PLLA Lock Status)  
        .equ PMC_MCKRDY_Shift, 3   @ bitWidth 1 (Master Clock Status)  
        .equ PMC_LOCKU_Shift, 6   @ bitWidth 1 (UTMI PLL Lock Status)  
        .equ PMC_OSCSELS_Shift, 7   @ bitWidth 1 (Slow Clock Source Oscillator Selection)  
        .equ PMC_PCKRDY0_Shift, 8   @ bitWidth 1 (Programmable Clock Ready 0 Status)  
        .equ PMC_PCKRDY1_Shift, 9   @ bitWidth 1 (Programmable Clock Ready 1 Status)  
        .equ PMC_PCKRDY2_Shift, 10   @ bitWidth 1 (Programmable Clock Ready 2 Status)  
        .equ PMC_PCKRDY3_Shift, 11   @ bitWidth 1 (Programmable Clock Ready 3 Status)  
        .equ PMC_PCKRDY4_Shift, 12   @ bitWidth 1 (Programmable Clock Ready 4 Status)  
        .equ PMC_PCKRDY5_Shift, 13   @ bitWidth 1 (Programmable Clock Ready 5 Status)  
        .equ PMC_PCKRDY6_Shift, 14   @ bitWidth 1 (Programmable Clock Ready 6 Status)  
        .equ PMC_MOSCSELS_Shift, 16   @ bitWidth 1 (Main Clock Source Oscillator Selection Status)  
        .equ PMC_MOSCRCS_Shift, 17   @ bitWidth 1 (Main RC Oscillator Status)  
        .equ PMC_CFDEV_Shift, 18   @ bitWidth 1 (Clock Failure Detector Event)  
        .equ PMC_CFDS_Shift, 19   @ bitWidth 1 (Clock Failure Detector Status)  
        .equ PMC_FOS_Shift, 20   @ bitWidth 1 (Clock Failure Detector Fault Output Status)  
        .equ PMC_XT32KERR_Shift, 21   @ bitWidth 1 (Slow Crystal Oscillator Error)  
 
    .equ PMC_IMR, PMC_BASE + 0x006C @ (Interrupt Mask Register) 
        .equ PMC_MOSCXTS_Shift, 0   @ bitWidth 1 (Main Crystal Oscillator Status Interrupt Mask)  
        .equ PMC_LOCKA_Shift, 1   @ bitWidth 1 (PLLA Lock Interrupt Mask)  
        .equ PMC_MCKRDY_Shift, 3   @ bitWidth 1 (Master Clock Ready Interrupt Mask)  
        .equ PMC_LOCKU_Shift, 6   @ bitWidth 1 (UTMI PLL Lock Interrupt Mask)  
        .equ PMC_PCKRDY0_Shift, 8   @ bitWidth 1 (Programmable Clock Ready 0 Interrupt Mask)  
        .equ PMC_PCKRDY1_Shift, 9   @ bitWidth 1 (Programmable Clock Ready 1 Interrupt Mask)  
        .equ PMC_PCKRDY2_Shift, 10   @ bitWidth 1 (Programmable Clock Ready 2 Interrupt Mask)  
        .equ PMC_PCKRDY3_Shift, 11   @ bitWidth 1 (Programmable Clock Ready 3 Interrupt Mask)  
        .equ PMC_PCKRDY4_Shift, 12   @ bitWidth 1 (Programmable Clock Ready 4 Interrupt Mask)  
        .equ PMC_PCKRDY5_Shift, 13   @ bitWidth 1 (Programmable Clock Ready 5 Interrupt Mask)  
        .equ PMC_PCKRDY6_Shift, 14   @ bitWidth 1 (Programmable Clock Ready 6 Interrupt Mask)  
        .equ PMC_MOSCSELS_Shift, 16   @ bitWidth 1 (Main Clock Source Oscillator Selection Status Interrupt Mask)  
        .equ PMC_MOSCRCS_Shift, 17   @ bitWidth 1 (Main RC Status Interrupt Mask)  
        .equ PMC_CFDEV_Shift, 18   @ bitWidth 1 (Clock Failure Detector Event Interrupt Mask)  
        .equ PMC_XT32KERR_Shift, 21   @ bitWidth 1 (32.768 kHz Crystal Oscillator Error Interrupt Mask)  
 
    .equ PMC_FSMR, PMC_BASE + 0x0070 @ (Fast Startup Mode Register) 
        .equ PMC_FSTT0_Shift, 0   @ bitWidth 1 (Fast Startup Input Enable 0)  
        .equ PMC_FSTT1_Shift, 1   @ bitWidth 1 (Fast Startup Input Enable 1)  
        .equ PMC_FSTT2_Shift, 2   @ bitWidth 1 (Fast Startup Input Enable 2)  
        .equ PMC_FSTT3_Shift, 3   @ bitWidth 1 (Fast Startup Input Enable 3)  
        .equ PMC_FSTT4_Shift, 4   @ bitWidth 1 (Fast Startup Input Enable 4)  
        .equ PMC_FSTT5_Shift, 5   @ bitWidth 1 (Fast Startup Input Enable 5)  
        .equ PMC_FSTT6_Shift, 6   @ bitWidth 1 (Fast Startup Input Enable 6)  
        .equ PMC_FSTT7_Shift, 7   @ bitWidth 1 (Fast Startup Input Enable 7)  
        .equ PMC_FSTT8_Shift, 8   @ bitWidth 1 (Fast Startup Input Enable 8)  
        .equ PMC_FSTT9_Shift, 9   @ bitWidth 1 (Fast Startup Input Enable 9)  
        .equ PMC_FSTT10_Shift, 10   @ bitWidth 1 (Fast Startup Input Enable 10)  
        .equ PMC_FSTT11_Shift, 11   @ bitWidth 1 (Fast Startup Input Enable 11)  
        .equ PMC_FSTT12_Shift, 12   @ bitWidth 1 (Fast Startup Input Enable 12)  
        .equ PMC_FSTT13_Shift, 13   @ bitWidth 1 (Fast Startup Input Enable 13)  
        .equ PMC_FSTT14_Shift, 14   @ bitWidth 1 (Fast Startup Input Enable 14)  
        .equ PMC_FSTT15_Shift, 15   @ bitWidth 1 (Fast Startup Input Enable 15)  
        .equ PMC_RTTAL_Shift, 16   @ bitWidth 1 (RTT Alarm Enable)  
        .equ PMC_RTCAL_Shift, 17   @ bitWidth 1 (RTC Alarm Enable)  
        .equ PMC_USBAL_Shift, 18   @ bitWidth 1 (USB Alarm Enable)  
        .equ PMC_LPM_Shift, 20   @ bitWidth 1 (Low-power Mode)  
        .equ PMC_FLPM_Shift, 21   @ bitWidth 2 (Flash Low-power Mode)  
        .equ PMC_FFLPM_Shift, 23   @ bitWidth 1 (Force Flash Low-power Mode)  
 
    .equ PMC_FSPR, PMC_BASE + 0x0074 @ (Fast Startup Polarity Register) 
        .equ PMC_FSTP0_Shift, 0   @ bitWidth 1 (Fast Startup Input Polarity 0)  
        .equ PMC_FSTP1_Shift, 1   @ bitWidth 1 (Fast Startup Input Polarity 1)  
        .equ PMC_FSTP2_Shift, 2   @ bitWidth 1 (Fast Startup Input Polarity 2)  
        .equ PMC_FSTP3_Shift, 3   @ bitWidth 1 (Fast Startup Input Polarity 3)  
        .equ PMC_FSTP4_Shift, 4   @ bitWidth 1 (Fast Startup Input Polarity 4)  
        .equ PMC_FSTP5_Shift, 5   @ bitWidth 1 (Fast Startup Input Polarity 5)  
        .equ PMC_FSTP6_Shift, 6   @ bitWidth 1 (Fast Startup Input Polarity 6)  
        .equ PMC_FSTP7_Shift, 7   @ bitWidth 1 (Fast Startup Input Polarity 7)  
        .equ PMC_FSTP8_Shift, 8   @ bitWidth 1 (Fast Startup Input Polarity 8)  
        .equ PMC_FSTP9_Shift, 9   @ bitWidth 1 (Fast Startup Input Polarity 9)  
        .equ PMC_FSTP10_Shift, 10   @ bitWidth 1 (Fast Startup Input Polarity 10)  
        .equ PMC_FSTP11_Shift, 11   @ bitWidth 1 (Fast Startup Input Polarity 11)  
        .equ PMC_FSTP12_Shift, 12   @ bitWidth 1 (Fast Startup Input Polarity 12)  
        .equ PMC_FSTP13_Shift, 13   @ bitWidth 1 (Fast Startup Input Polarity 13)  
        .equ PMC_FSTP14_Shift, 14   @ bitWidth 1 (Fast Startup Input Polarity 14)  
        .equ PMC_FSTP15_Shift, 15   @ bitWidth 1 (Fast Startup Input Polarity 15)  
 
    .equ PMC_FOCR, PMC_BASE + 0x0078 @ (Fault Output Clear Register) 
        .equ PMC_FOCLR_Shift, 0   @ bitWidth 1 (Fault Output Clear)  
 
    .equ PMC_WPMR, PMC_BASE + 0x00E4 @ (Write Protection Mode Register) 
        .equ PMC_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ PMC_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ PMC_WPSR, PMC_BASE + 0x00E8 @ (Write Protection Status Register) 
        .equ PMC_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ PMC_WPVSRC_Shift, 8   @ bitWidth 16 (Write Protection Violation Source)  
 
    .equ PMC_PCER1, PMC_BASE + 0x0100 @ (Peripheral Clock Enable Register 1) 
        .equ PMC_PID32_Shift, 0   @ bitWidth 1 (Peripheral Clock 32 Enable)  
        .equ PMC_PID33_Shift, 1   @ bitWidth 1 (Peripheral Clock 33 Enable)  
        .equ PMC_PID34_Shift, 2   @ bitWidth 1 (Peripheral Clock 34 Enable)  
        .equ PMC_PID35_Shift, 3   @ bitWidth 1 (Peripheral Clock 35 Enable)  
        .equ PMC_PID37_Shift, 5   @ bitWidth 1 (Peripheral Clock 37 Enable)  
        .equ PMC_PID39_Shift, 7   @ bitWidth 1 (Peripheral Clock 39 Enable)  
        .equ PMC_PID40_Shift, 8   @ bitWidth 1 (Peripheral Clock 40 Enable)  
        .equ PMC_PID41_Shift, 9   @ bitWidth 1 (Peripheral Clock 41 Enable)  
        .equ PMC_PID42_Shift, 10   @ bitWidth 1 (Peripheral Clock 42 Enable)  
        .equ PMC_PID43_Shift, 11   @ bitWidth 1 (Peripheral Clock 43 Enable)  
        .equ PMC_PID44_Shift, 12   @ bitWidth 1 (Peripheral Clock 44 Enable)  
        .equ PMC_PID45_Shift, 13   @ bitWidth 1 (Peripheral Clock 45 Enable)  
        .equ PMC_PID46_Shift, 14   @ bitWidth 1 (Peripheral Clock 46 Enable)  
        .equ PMC_PID47_Shift, 15   @ bitWidth 1 (Peripheral Clock 47 Enable)  
        .equ PMC_PID48_Shift, 16   @ bitWidth 1 (Peripheral Clock 48 Enable)  
        .equ PMC_PID49_Shift, 17   @ bitWidth 1 (Peripheral Clock 49 Enable)  
        .equ PMC_PID50_Shift, 18   @ bitWidth 1 (Peripheral Clock 50 Enable)  
        .equ PMC_PID51_Shift, 19   @ bitWidth 1 (Peripheral Clock 51 Enable)  
        .equ PMC_PID52_Shift, 20   @ bitWidth 1 (Peripheral Clock 52 Enable)  
        .equ PMC_PID53_Shift, 21   @ bitWidth 1 (Peripheral Clock 53 Enable)  
        .equ PMC_PID56_Shift, 24   @ bitWidth 1 (Peripheral Clock 56 Enable)  
        .equ PMC_PID57_Shift, 25   @ bitWidth 1 (Peripheral Clock 57 Enable)  
        .equ PMC_PID58_Shift, 26   @ bitWidth 1 (Peripheral Clock 58 Enable)  
        .equ PMC_PID59_Shift, 27   @ bitWidth 1 (Peripheral Clock 59 Enable)  
        .equ PMC_PID60_Shift, 28   @ bitWidth 1 (Peripheral Clock 60 Enable)  
 
    .equ PMC_PCDR1, PMC_BASE + 0x0104 @ (Peripheral Clock Disable Register 1) 
        .equ PMC_PID32_Shift, 0   @ bitWidth 1 (Peripheral Clock 32 Disable)  
        .equ PMC_PID33_Shift, 1   @ bitWidth 1 (Peripheral Clock 33 Disable)  
        .equ PMC_PID34_Shift, 2   @ bitWidth 1 (Peripheral Clock 34 Disable)  
        .equ PMC_PID35_Shift, 3   @ bitWidth 1 (Peripheral Clock 35 Disable)  
        .equ PMC_PID37_Shift, 5   @ bitWidth 1 (Peripheral Clock 37 Disable)  
        .equ PMC_PID39_Shift, 7   @ bitWidth 1 (Peripheral Clock 39 Disable)  
        .equ PMC_PID40_Shift, 8   @ bitWidth 1 (Peripheral Clock 40 Disable)  
        .equ PMC_PID41_Shift, 9   @ bitWidth 1 (Peripheral Clock 41 Disable)  
        .equ PMC_PID42_Shift, 10   @ bitWidth 1 (Peripheral Clock 42 Disable)  
        .equ PMC_PID43_Shift, 11   @ bitWidth 1 (Peripheral Clock 43 Disable)  
        .equ PMC_PID44_Shift, 12   @ bitWidth 1 (Peripheral Clock 44 Disable)  
        .equ PMC_PID45_Shift, 13   @ bitWidth 1 (Peripheral Clock 45 Disable)  
        .equ PMC_PID46_Shift, 14   @ bitWidth 1 (Peripheral Clock 46 Disable)  
        .equ PMC_PID47_Shift, 15   @ bitWidth 1 (Peripheral Clock 47 Disable)  
        .equ PMC_PID48_Shift, 16   @ bitWidth 1 (Peripheral Clock 48 Disable)  
        .equ PMC_PID49_Shift, 17   @ bitWidth 1 (Peripheral Clock 49 Disable)  
        .equ PMC_PID50_Shift, 18   @ bitWidth 1 (Peripheral Clock 50 Disable)  
        .equ PMC_PID51_Shift, 19   @ bitWidth 1 (Peripheral Clock 51 Disable)  
        .equ PMC_PID52_Shift, 20   @ bitWidth 1 (Peripheral Clock 52 Disable)  
        .equ PMC_PID53_Shift, 21   @ bitWidth 1 (Peripheral Clock 53 Disable)  
        .equ PMC_PID56_Shift, 24   @ bitWidth 1 (Peripheral Clock 56 Disable)  
        .equ PMC_PID57_Shift, 25   @ bitWidth 1 (Peripheral Clock 57 Disable)  
        .equ PMC_PID58_Shift, 26   @ bitWidth 1 (Peripheral Clock 58 Disable)  
        .equ PMC_PID59_Shift, 27   @ bitWidth 1 (Peripheral Clock 59 Disable)  
        .equ PMC_PID60_Shift, 28   @ bitWidth 1 (Peripheral Clock 60 Disable)  
 
    .equ PMC_PCSR1, PMC_BASE + 0x0108 @ (Peripheral Clock Status Register 1) 
        .equ PMC_PID32_Shift, 0   @ bitWidth 1 (Peripheral Clock 32 Status)  
        .equ PMC_PID33_Shift, 1   @ bitWidth 1 (Peripheral Clock 33 Status)  
        .equ PMC_PID34_Shift, 2   @ bitWidth 1 (Peripheral Clock 34 Status)  
        .equ PMC_PID35_Shift, 3   @ bitWidth 1 (Peripheral Clock 35 Status)  
        .equ PMC_PID37_Shift, 5   @ bitWidth 1 (Peripheral Clock 37 Status)  
        .equ PMC_PID39_Shift, 7   @ bitWidth 1 (Peripheral Clock 39 Status)  
        .equ PMC_PID40_Shift, 8   @ bitWidth 1 (Peripheral Clock 40 Status)  
        .equ PMC_PID41_Shift, 9   @ bitWidth 1 (Peripheral Clock 41 Status)  
        .equ PMC_PID42_Shift, 10   @ bitWidth 1 (Peripheral Clock 42 Status)  
        .equ PMC_PID43_Shift, 11   @ bitWidth 1 (Peripheral Clock 43 Status)  
        .equ PMC_PID44_Shift, 12   @ bitWidth 1 (Peripheral Clock 44 Status)  
        .equ PMC_PID45_Shift, 13   @ bitWidth 1 (Peripheral Clock 45 Status)  
        .equ PMC_PID46_Shift, 14   @ bitWidth 1 (Peripheral Clock 46 Status)  
        .equ PMC_PID47_Shift, 15   @ bitWidth 1 (Peripheral Clock 47 Status)  
        .equ PMC_PID48_Shift, 16   @ bitWidth 1 (Peripheral Clock 48 Status)  
        .equ PMC_PID49_Shift, 17   @ bitWidth 1 (Peripheral Clock 49 Status)  
        .equ PMC_PID50_Shift, 18   @ bitWidth 1 (Peripheral Clock 50 Status)  
        .equ PMC_PID51_Shift, 19   @ bitWidth 1 (Peripheral Clock 51 Status)  
        .equ PMC_PID52_Shift, 20   @ bitWidth 1 (Peripheral Clock 52 Status)  
        .equ PMC_PID53_Shift, 21   @ bitWidth 1 (Peripheral Clock 53 Status)  
        .equ PMC_PID56_Shift, 24   @ bitWidth 1 (Peripheral Clock 56 Status)  
        .equ PMC_PID57_Shift, 25   @ bitWidth 1 (Peripheral Clock 57 Status)  
        .equ PMC_PID58_Shift, 26   @ bitWidth 1 (Peripheral Clock 58 Status)  
        .equ PMC_PID59_Shift, 27   @ bitWidth 1 (Peripheral Clock 59 Status)  
        .equ PMC_PID60_Shift, 28   @ bitWidth 1 (Peripheral Clock 60 Status)  
 
    .equ PMC_PCR, PMC_BASE + 0x010C @ (Peripheral Control Register) 
        .equ PMC_PID_Shift, 0   @ bitWidth 7 (Peripheral ID)  
        .equ PMC_GCLKCSS_Shift, 8   @ bitWidth 3 (Generic Clock Source Selection)  
        .equ PMC_CMD_Shift, 12   @ bitWidth 1 (Command)  
        .equ PMC_GCLKDIV_Shift, 20   @ bitWidth 8 (Generic Clock Division Ratio)  
        .equ PMC_EN_Shift, 28   @ bitWidth 1 (Enable)  
        .equ PMC_GCLKEN_Shift, 29   @ bitWidth 1 (Generic Clock Enable)  
 
    .equ PMC_OCR, PMC_BASE + 0x0110 @ (Oscillator Calibration Register) 
        .equ PMC_CAL4_Shift, 0   @ bitWidth 7 (Main RC Oscillator Calibration Bits for 4 MHz)  
        .equ PMC_SEL4_Shift, 7   @ bitWidth 1 (Selection of Main RC Oscillator Calibration Bits for 4 MHz)  
        .equ PMC_CAL8_Shift, 8   @ bitWidth 7 (Main RC Oscillator Calibration Bits for 8 MHz)  
        .equ PMC_SEL8_Shift, 15   @ bitWidth 1 (Selection of Main RC Oscillator Calibration Bits for 8 MHz)  
        .equ PMC_CAL12_Shift, 16   @ bitWidth 7 (Main RC Oscillator Calibration Bits for 12 MHz)  
        .equ PMC_SEL12_Shift, 23   @ bitWidth 1 (Selection of Main RC Oscillator Calibration Bits for 12 MHz)  
 
    .equ PMC_SLPWK_ER0, PMC_BASE + 0x0114 @ (SleepWalking Enable Register 0) 
        .equ PMC_PID7_Shift, 7   @ bitWidth 1 (Peripheral 7 SleepWalking Enable)  
        .equ PMC_PID8_Shift, 8   @ bitWidth 1 (Peripheral 8 SleepWalking Enable)  
        .equ PMC_PID9_Shift, 9   @ bitWidth 1 (Peripheral 9 SleepWalking Enable)  
        .equ PMC_PID10_Shift, 10   @ bitWidth 1 (Peripheral 10 SleepWalking Enable)  
        .equ PMC_PID11_Shift, 11   @ bitWidth 1 (Peripheral 11 SleepWalking Enable)  
        .equ PMC_PID12_Shift, 12   @ bitWidth 1 (Peripheral 12 SleepWalking Enable)  
        .equ PMC_PID13_Shift, 13   @ bitWidth 1 (Peripheral 13 SleepWalking Enable)  
        .equ PMC_PID14_Shift, 14   @ bitWidth 1 (Peripheral 14 SleepWalking Enable)  
        .equ PMC_PID15_Shift, 15   @ bitWidth 1 (Peripheral 15 SleepWalking Enable)  
        .equ PMC_PID16_Shift, 16   @ bitWidth 1 (Peripheral 16 SleepWalking Enable)  
        .equ PMC_PID17_Shift, 17   @ bitWidth 1 (Peripheral 17 SleepWalking Enable)  
        .equ PMC_PID18_Shift, 18   @ bitWidth 1 (Peripheral 18 SleepWalking Enable)  
        .equ PMC_PID19_Shift, 19   @ bitWidth 1 (Peripheral 19 SleepWalking Enable)  
        .equ PMC_PID20_Shift, 20   @ bitWidth 1 (Peripheral 20 SleepWalking Enable)  
        .equ PMC_PID21_Shift, 21   @ bitWidth 1 (Peripheral 21 SleepWalking Enable)  
        .equ PMC_PID22_Shift, 22   @ bitWidth 1 (Peripheral 22 SleepWalking Enable)  
        .equ PMC_PID23_Shift, 23   @ bitWidth 1 (Peripheral 23 SleepWalking Enable)  
        .equ PMC_PID24_Shift, 24   @ bitWidth 1 (Peripheral 24 SleepWalking Enable)  
        .equ PMC_PID25_Shift, 25   @ bitWidth 1 (Peripheral 25 SleepWalking Enable)  
        .equ PMC_PID26_Shift, 26   @ bitWidth 1 (Peripheral 26 SleepWalking Enable)  
        .equ PMC_PID27_Shift, 27   @ bitWidth 1 (Peripheral 27 SleepWalking Enable)  
        .equ PMC_PID28_Shift, 28   @ bitWidth 1 (Peripheral 28 SleepWalking Enable)  
        .equ PMC_PID29_Shift, 29   @ bitWidth 1 (Peripheral 29 SleepWalking Enable)  
        .equ PMC_PID30_Shift, 30   @ bitWidth 1 (Peripheral 30 SleepWalking Enable)  
        .equ PMC_PID31_Shift, 31   @ bitWidth 1 (Peripheral 31 SleepWalking Enable)  
 
    .equ PMC_SLPWK_DR0, PMC_BASE + 0x0118 @ (SleepWalking Disable Register 0) 
        .equ PMC_PID7_Shift, 7   @ bitWidth 1 (Peripheral 7 SleepWalking Disable)  
        .equ PMC_PID8_Shift, 8   @ bitWidth 1 (Peripheral 8 SleepWalking Disable)  
        .equ PMC_PID9_Shift, 9   @ bitWidth 1 (Peripheral 9 SleepWalking Disable)  
        .equ PMC_PID10_Shift, 10   @ bitWidth 1 (Peripheral 10 SleepWalking Disable)  
        .equ PMC_PID11_Shift, 11   @ bitWidth 1 (Peripheral 11 SleepWalking Disable)  
        .equ PMC_PID12_Shift, 12   @ bitWidth 1 (Peripheral 12 SleepWalking Disable)  
        .equ PMC_PID13_Shift, 13   @ bitWidth 1 (Peripheral 13 SleepWalking Disable)  
        .equ PMC_PID14_Shift, 14   @ bitWidth 1 (Peripheral 14 SleepWalking Disable)  
        .equ PMC_PID15_Shift, 15   @ bitWidth 1 (Peripheral 15 SleepWalking Disable)  
        .equ PMC_PID16_Shift, 16   @ bitWidth 1 (Peripheral 16 SleepWalking Disable)  
        .equ PMC_PID17_Shift, 17   @ bitWidth 1 (Peripheral 17 SleepWalking Disable)  
        .equ PMC_PID18_Shift, 18   @ bitWidth 1 (Peripheral 18 SleepWalking Disable)  
        .equ PMC_PID19_Shift, 19   @ bitWidth 1 (Peripheral 19 SleepWalking Disable)  
        .equ PMC_PID20_Shift, 20   @ bitWidth 1 (Peripheral 20 SleepWalking Disable)  
        .equ PMC_PID21_Shift, 21   @ bitWidth 1 (Peripheral 21 SleepWalking Disable)  
        .equ PMC_PID22_Shift, 22   @ bitWidth 1 (Peripheral 22 SleepWalking Disable)  
        .equ PMC_PID23_Shift, 23   @ bitWidth 1 (Peripheral 23 SleepWalking Disable)  
        .equ PMC_PID24_Shift, 24   @ bitWidth 1 (Peripheral 24 SleepWalking Disable)  
        .equ PMC_PID25_Shift, 25   @ bitWidth 1 (Peripheral 25 SleepWalking Disable)  
        .equ PMC_PID26_Shift, 26   @ bitWidth 1 (Peripheral 26 SleepWalking Disable)  
        .equ PMC_PID27_Shift, 27   @ bitWidth 1 (Peripheral 27 SleepWalking Disable)  
        .equ PMC_PID28_Shift, 28   @ bitWidth 1 (Peripheral 28 SleepWalking Disable)  
        .equ PMC_PID29_Shift, 29   @ bitWidth 1 (Peripheral 29 SleepWalking Disable)  
        .equ PMC_PID30_Shift, 30   @ bitWidth 1 (Peripheral 30 SleepWalking Disable)  
        .equ PMC_PID31_Shift, 31   @ bitWidth 1 (Peripheral 31 SleepWalking Disable)  
 
    .equ PMC_SLPWK_SR0, PMC_BASE + 0x011C @ (SleepWalking Status Register 0) 
        .equ PMC_PID7_Shift, 7   @ bitWidth 1 (Peripheral 7 SleepWalking Status)  
        .equ PMC_PID8_Shift, 8   @ bitWidth 1 (Peripheral 8 SleepWalking Status)  
        .equ PMC_PID9_Shift, 9   @ bitWidth 1 (Peripheral 9 SleepWalking Status)  
        .equ PMC_PID10_Shift, 10   @ bitWidth 1 (Peripheral 10 SleepWalking Status)  
        .equ PMC_PID11_Shift, 11   @ bitWidth 1 (Peripheral 11 SleepWalking Status)  
        .equ PMC_PID12_Shift, 12   @ bitWidth 1 (Peripheral 12 SleepWalking Status)  
        .equ PMC_PID13_Shift, 13   @ bitWidth 1 (Peripheral 13 SleepWalking Status)  
        .equ PMC_PID14_Shift, 14   @ bitWidth 1 (Peripheral 14 SleepWalking Status)  
        .equ PMC_PID15_Shift, 15   @ bitWidth 1 (Peripheral 15 SleepWalking Status)  
        .equ PMC_PID16_Shift, 16   @ bitWidth 1 (Peripheral 16 SleepWalking Status)  
        .equ PMC_PID17_Shift, 17   @ bitWidth 1 (Peripheral 17 SleepWalking Status)  
        .equ PMC_PID18_Shift, 18   @ bitWidth 1 (Peripheral 18 SleepWalking Status)  
        .equ PMC_PID19_Shift, 19   @ bitWidth 1 (Peripheral 19 SleepWalking Status)  
        .equ PMC_PID20_Shift, 20   @ bitWidth 1 (Peripheral 20 SleepWalking Status)  
        .equ PMC_PID21_Shift, 21   @ bitWidth 1 (Peripheral 21 SleepWalking Status)  
        .equ PMC_PID22_Shift, 22   @ bitWidth 1 (Peripheral 22 SleepWalking Status)  
        .equ PMC_PID23_Shift, 23   @ bitWidth 1 (Peripheral 23 SleepWalking Status)  
        .equ PMC_PID24_Shift, 24   @ bitWidth 1 (Peripheral 24 SleepWalking Status)  
        .equ PMC_PID25_Shift, 25   @ bitWidth 1 (Peripheral 25 SleepWalking Status)  
        .equ PMC_PID26_Shift, 26   @ bitWidth 1 (Peripheral 26 SleepWalking Status)  
        .equ PMC_PID27_Shift, 27   @ bitWidth 1 (Peripheral 27 SleepWalking Status)  
        .equ PMC_PID28_Shift, 28   @ bitWidth 1 (Peripheral 28 SleepWalking Status)  
        .equ PMC_PID29_Shift, 29   @ bitWidth 1 (Peripheral 29 SleepWalking Status)  
        .equ PMC_PID30_Shift, 30   @ bitWidth 1 (Peripheral 30 SleepWalking Status)  
        .equ PMC_PID31_Shift, 31   @ bitWidth 1 (Peripheral 31 SleepWalking Status)  
 
    .equ PMC_SLPWK_ASR0, PMC_BASE + 0x0120 @ (SleepWalking Activity Status Register 0) 
        .equ PMC_PID7_Shift, 7   @ bitWidth 1 (Peripheral 7 Activity Status)  
        .equ PMC_PID8_Shift, 8   @ bitWidth 1 (Peripheral 8 Activity Status)  
        .equ PMC_PID9_Shift, 9   @ bitWidth 1 (Peripheral 9 Activity Status)  
        .equ PMC_PID10_Shift, 10   @ bitWidth 1 (Peripheral 10 Activity Status)  
        .equ PMC_PID11_Shift, 11   @ bitWidth 1 (Peripheral 11 Activity Status)  
        .equ PMC_PID12_Shift, 12   @ bitWidth 1 (Peripheral 12 Activity Status)  
        .equ PMC_PID13_Shift, 13   @ bitWidth 1 (Peripheral 13 Activity Status)  
        .equ PMC_PID14_Shift, 14   @ bitWidth 1 (Peripheral 14 Activity Status)  
        .equ PMC_PID15_Shift, 15   @ bitWidth 1 (Peripheral 15 Activity Status)  
        .equ PMC_PID16_Shift, 16   @ bitWidth 1 (Peripheral 16 Activity Status)  
        .equ PMC_PID17_Shift, 17   @ bitWidth 1 (Peripheral 17 Activity Status)  
        .equ PMC_PID18_Shift, 18   @ bitWidth 1 (Peripheral 18 Activity Status)  
        .equ PMC_PID19_Shift, 19   @ bitWidth 1 (Peripheral 19 Activity Status)  
        .equ PMC_PID20_Shift, 20   @ bitWidth 1 (Peripheral 20 Activity Status)  
        .equ PMC_PID21_Shift, 21   @ bitWidth 1 (Peripheral 21 Activity Status)  
        .equ PMC_PID22_Shift, 22   @ bitWidth 1 (Peripheral 22 Activity Status)  
        .equ PMC_PID23_Shift, 23   @ bitWidth 1 (Peripheral 23 Activity Status)  
        .equ PMC_PID24_Shift, 24   @ bitWidth 1 (Peripheral 24 Activity Status)  
        .equ PMC_PID25_Shift, 25   @ bitWidth 1 (Peripheral 25 Activity Status)  
        .equ PMC_PID26_Shift, 26   @ bitWidth 1 (Peripheral 26 Activity Status)  
        .equ PMC_PID27_Shift, 27   @ bitWidth 1 (Peripheral 27 Activity Status)  
        .equ PMC_PID28_Shift, 28   @ bitWidth 1 (Peripheral 28 Activity Status)  
        .equ PMC_PID29_Shift, 29   @ bitWidth 1 (Peripheral 29 Activity Status)  
        .equ PMC_PID30_Shift, 30   @ bitWidth 1 (Peripheral 30 Activity Status)  
        .equ PMC_PID31_Shift, 31   @ bitWidth 1 (Peripheral 31 Activity Status)  
 
    .equ PMC_PMMR, PMC_BASE + 0x0130 @ (PLL Maximum Multiplier Value Register) 
        .equ PMC_PLLA_MMAX_Shift, 0   @ bitWidth 11 (PLLA Maximum Allowed Multiplier Value)  
 
    .equ PMC_SLPWK_ER1, PMC_BASE + 0x0134 @ (SleepWalking Enable Register 1) 
        .equ PMC_PID32_Shift, 0   @ bitWidth 1 (Peripheral 32 SleepWalking Enable)  
        .equ PMC_PID33_Shift, 1   @ bitWidth 1 (Peripheral 33 SleepWalking Enable)  
        .equ PMC_PID34_Shift, 2   @ bitWidth 1 (Peripheral 34 SleepWalking Enable)  
        .equ PMC_PID35_Shift, 3   @ bitWidth 1 (Peripheral 35 SleepWalking Enable)  
        .equ PMC_PID37_Shift, 5   @ bitWidth 1 (Peripheral 37 SleepWalking Enable)  
        .equ PMC_PID39_Shift, 7   @ bitWidth 1 (Peripheral 39 SleepWalking Enable)  
        .equ PMC_PID40_Shift, 8   @ bitWidth 1 (Peripheral 40 SleepWalking Enable)  
        .equ PMC_PID41_Shift, 9   @ bitWidth 1 (Peripheral 41 SleepWalking Enable)  
        .equ PMC_PID42_Shift, 10   @ bitWidth 1 (Peripheral 42 SleepWalking Enable)  
        .equ PMC_PID43_Shift, 11   @ bitWidth 1 (Peripheral 43 SleepWalking Enable)  
        .equ PMC_PID44_Shift, 12   @ bitWidth 1 (Peripheral 44 SleepWalking Enable)  
        .equ PMC_PID45_Shift, 13   @ bitWidth 1 (Peripheral 45 SleepWalking Enable)  
        .equ PMC_PID46_Shift, 14   @ bitWidth 1 (Peripheral 46 SleepWalking Enable)  
        .equ PMC_PID47_Shift, 15   @ bitWidth 1 (Peripheral 47 SleepWalking Enable)  
        .equ PMC_PID48_Shift, 16   @ bitWidth 1 (Peripheral 48 SleepWalking Enable)  
        .equ PMC_PID49_Shift, 17   @ bitWidth 1 (Peripheral 49 SleepWalking Enable)  
        .equ PMC_PID50_Shift, 18   @ bitWidth 1 (Peripheral 50 SleepWalking Enable)  
        .equ PMC_PID51_Shift, 19   @ bitWidth 1 (Peripheral 51 SleepWalking Enable)  
        .equ PMC_PID52_Shift, 20   @ bitWidth 1 (Peripheral 52 SleepWalking Enable)  
        .equ PMC_PID53_Shift, 21   @ bitWidth 1 (Peripheral 53 SleepWalking Enable)  
        .equ PMC_PID56_Shift, 24   @ bitWidth 1 (Peripheral 56 SleepWalking Enable)  
        .equ PMC_PID57_Shift, 25   @ bitWidth 1 (Peripheral 57 SleepWalking Enable)  
        .equ PMC_PID58_Shift, 26   @ bitWidth 1 (Peripheral 58 SleepWalking Enable)  
        .equ PMC_PID59_Shift, 27   @ bitWidth 1 (Peripheral 59 SleepWalking Enable)  
        .equ PMC_PID60_Shift, 28   @ bitWidth 1 (Peripheral 60 SleepWalking Enable)  
 
    .equ PMC_SLPWK_DR1, PMC_BASE + 0x0138 @ (SleepWalking Disable Register 1) 
        .equ PMC_PID32_Shift, 0   @ bitWidth 1 (Peripheral 32 SleepWalking Disable)  
        .equ PMC_PID33_Shift, 1   @ bitWidth 1 (Peripheral 33 SleepWalking Disable)  
        .equ PMC_PID34_Shift, 2   @ bitWidth 1 (Peripheral 34 SleepWalking Disable)  
        .equ PMC_PID35_Shift, 3   @ bitWidth 1 (Peripheral 35 SleepWalking Disable)  
        .equ PMC_PID37_Shift, 5   @ bitWidth 1 (Peripheral 37 SleepWalking Disable)  
        .equ PMC_PID39_Shift, 7   @ bitWidth 1 (Peripheral 39 SleepWalking Disable)  
        .equ PMC_PID40_Shift, 8   @ bitWidth 1 (Peripheral 40 SleepWalking Disable)  
        .equ PMC_PID41_Shift, 9   @ bitWidth 1 (Peripheral 41 SleepWalking Disable)  
        .equ PMC_PID42_Shift, 10   @ bitWidth 1 (Peripheral 42 SleepWalking Disable)  
        .equ PMC_PID43_Shift, 11   @ bitWidth 1 (Peripheral 43 SleepWalking Disable)  
        .equ PMC_PID44_Shift, 12   @ bitWidth 1 (Peripheral 44 SleepWalking Disable)  
        .equ PMC_PID45_Shift, 13   @ bitWidth 1 (Peripheral 45 SleepWalking Disable)  
        .equ PMC_PID46_Shift, 14   @ bitWidth 1 (Peripheral 46 SleepWalking Disable)  
        .equ PMC_PID47_Shift, 15   @ bitWidth 1 (Peripheral 47 SleepWalking Disable)  
        .equ PMC_PID48_Shift, 16   @ bitWidth 1 (Peripheral 48 SleepWalking Disable)  
        .equ PMC_PID49_Shift, 17   @ bitWidth 1 (Peripheral 49 SleepWalking Disable)  
        .equ PMC_PID50_Shift, 18   @ bitWidth 1 (Peripheral 50 SleepWalking Disable)  
        .equ PMC_PID51_Shift, 19   @ bitWidth 1 (Peripheral 51 SleepWalking Disable)  
        .equ PMC_PID52_Shift, 20   @ bitWidth 1 (Peripheral 52 SleepWalking Disable)  
        .equ PMC_PID53_Shift, 21   @ bitWidth 1 (Peripheral 53 SleepWalking Disable)  
        .equ PMC_PID56_Shift, 24   @ bitWidth 1 (Peripheral 56 SleepWalking Disable)  
        .equ PMC_PID57_Shift, 25   @ bitWidth 1 (Peripheral 57 SleepWalking Disable)  
        .equ PMC_PID58_Shift, 26   @ bitWidth 1 (Peripheral 58 SleepWalking Disable)  
        .equ PMC_PID59_Shift, 27   @ bitWidth 1 (Peripheral 59 SleepWalking Disable)  
        .equ PMC_PID60_Shift, 28   @ bitWidth 1 (Peripheral 60 SleepWalking Disable)  
 
    .equ PMC_SLPWK_SR1, PMC_BASE + 0x013C @ (SleepWalking Status Register 1) 
        .equ PMC_PID32_Shift, 0   @ bitWidth 1 (Peripheral 32 SleepWalking Status)  
        .equ PMC_PID33_Shift, 1   @ bitWidth 1 (Peripheral 33 SleepWalking Status)  
        .equ PMC_PID34_Shift, 2   @ bitWidth 1 (Peripheral 34 SleepWalking Status)  
        .equ PMC_PID35_Shift, 3   @ bitWidth 1 (Peripheral 35 SleepWalking Status)  
        .equ PMC_PID37_Shift, 5   @ bitWidth 1 (Peripheral 37 SleepWalking Status)  
        .equ PMC_PID39_Shift, 7   @ bitWidth 1 (Peripheral 39 SleepWalking Status)  
        .equ PMC_PID40_Shift, 8   @ bitWidth 1 (Peripheral 40 SleepWalking Status)  
        .equ PMC_PID41_Shift, 9   @ bitWidth 1 (Peripheral 41 SleepWalking Status)  
        .equ PMC_PID42_Shift, 10   @ bitWidth 1 (Peripheral 42 SleepWalking Status)  
        .equ PMC_PID43_Shift, 11   @ bitWidth 1 (Peripheral 43 SleepWalking Status)  
        .equ PMC_PID44_Shift, 12   @ bitWidth 1 (Peripheral 44 SleepWalking Status)  
        .equ PMC_PID45_Shift, 13   @ bitWidth 1 (Peripheral 45 SleepWalking Status)  
        .equ PMC_PID46_Shift, 14   @ bitWidth 1 (Peripheral 46 SleepWalking Status)  
        .equ PMC_PID47_Shift, 15   @ bitWidth 1 (Peripheral 47 SleepWalking Status)  
        .equ PMC_PID48_Shift, 16   @ bitWidth 1 (Peripheral 48 SleepWalking Status)  
        .equ PMC_PID49_Shift, 17   @ bitWidth 1 (Peripheral 49 SleepWalking Status)  
        .equ PMC_PID50_Shift, 18   @ bitWidth 1 (Peripheral 50 SleepWalking Status)  
        .equ PMC_PID51_Shift, 19   @ bitWidth 1 (Peripheral 51 SleepWalking Status)  
        .equ PMC_PID52_Shift, 20   @ bitWidth 1 (Peripheral 52 SleepWalking Status)  
        .equ PMC_PID53_Shift, 21   @ bitWidth 1 (Peripheral 53 SleepWalking Status)  
        .equ PMC_PID56_Shift, 24   @ bitWidth 1 (Peripheral 56 SleepWalking Status)  
        .equ PMC_PID57_Shift, 25   @ bitWidth 1 (Peripheral 57 SleepWalking Status)  
        .equ PMC_PID58_Shift, 26   @ bitWidth 1 (Peripheral 58 SleepWalking Status)  
        .equ PMC_PID59_Shift, 27   @ bitWidth 1 (Peripheral 59 SleepWalking Status)  
        .equ PMC_PID60_Shift, 28   @ bitWidth 1 (Peripheral 60 SleepWalking Status)  
 
    .equ PMC_SLPWK_ASR1, PMC_BASE + 0x0140 @ (SleepWalking Activity Status Register 1) 
        .equ PMC_PID32_Shift, 0   @ bitWidth 1 (Peripheral 32 Activity Status)  
        .equ PMC_PID33_Shift, 1   @ bitWidth 1 (Peripheral 33 Activity Status)  
        .equ PMC_PID34_Shift, 2   @ bitWidth 1 (Peripheral 34 Activity Status)  
        .equ PMC_PID35_Shift, 3   @ bitWidth 1 (Peripheral 35 Activity Status)  
        .equ PMC_PID37_Shift, 5   @ bitWidth 1 (Peripheral 37 Activity Status)  
        .equ PMC_PID39_Shift, 7   @ bitWidth 1 (Peripheral 39 Activity Status)  
        .equ PMC_PID40_Shift, 8   @ bitWidth 1 (Peripheral 40 Activity Status)  
        .equ PMC_PID41_Shift, 9   @ bitWidth 1 (Peripheral 41 Activity Status)  
        .equ PMC_PID42_Shift, 10   @ bitWidth 1 (Peripheral 42 Activity Status)  
        .equ PMC_PID43_Shift, 11   @ bitWidth 1 (Peripheral 43 Activity Status)  
        .equ PMC_PID44_Shift, 12   @ bitWidth 1 (Peripheral 44 Activity Status)  
        .equ PMC_PID45_Shift, 13   @ bitWidth 1 (Peripheral 45 Activity Status)  
        .equ PMC_PID46_Shift, 14   @ bitWidth 1 (Peripheral 46 Activity Status)  
        .equ PMC_PID47_Shift, 15   @ bitWidth 1 (Peripheral 47 Activity Status)  
        .equ PMC_PID48_Shift, 16   @ bitWidth 1 (Peripheral 48 Activity Status)  
        .equ PMC_PID49_Shift, 17   @ bitWidth 1 (Peripheral 49 Activity Status)  
        .equ PMC_PID50_Shift, 18   @ bitWidth 1 (Peripheral 50 Activity Status)  
        .equ PMC_PID51_Shift, 19   @ bitWidth 1 (Peripheral 51 Activity Status)  
        .equ PMC_PID52_Shift, 20   @ bitWidth 1 (Peripheral 52 Activity Status)  
        .equ PMC_PID53_Shift, 21   @ bitWidth 1 (Peripheral 53 Activity Status)  
        .equ PMC_PID56_Shift, 24   @ bitWidth 1 (Peripheral 56 Activity Status)  
        .equ PMC_PID57_Shift, 25   @ bitWidth 1 (Peripheral 57 Activity Status)  
        .equ PMC_PID58_Shift, 26   @ bitWidth 1 (Peripheral 58 Activity Status)  
        .equ PMC_PID59_Shift, 27   @ bitWidth 1 (Peripheral 59 Activity Status)  
        .equ PMC_PID60_Shift, 28   @ bitWidth 1 (Peripheral 60 Activity Status)  
 
    .equ PMC_SLPWK_AIPR, PMC_BASE + 0x0144 @ (SleepWalking Activity In Progress Register) 
        .equ PMC_AIP_Shift, 0   @ bitWidth 1 (Activity In Progress)  
 

@=========================== PWM0 ===========================@
.equ PWM0_BASE, 0x40020000 @ (Pulse Width Modulation Controller) 
    .equ PWM0_CLK, PWM0_BASE + 0x00 @ (PWM Clock Register) 
        .equ PWM0_DIVA_Shift, 0   @ bitWidth 8 (CLKA Divide Factor)  
        .equ PWM0_PREA_Shift, 8   @ bitWidth 4 (CLKA Source Clock Selection)  
        .equ PWM0_DIVB_Shift, 16   @ bitWidth 8 (CLKB Divide Factor)  
        .equ PWM0_PREB_Shift, 24   @ bitWidth 4 (CLKB Source Clock Selection)  
 
    .equ PWM0_ENA, PWM0_BASE + 0x04 @ (PWM Enable Register) 
        .equ PWM0_CHID0_Shift, 0   @ bitWidth 1 (Channel ID)  
        .equ PWM0_CHID1_Shift, 1   @ bitWidth 1 (Channel ID)  
        .equ PWM0_CHID2_Shift, 2   @ bitWidth 1 (Channel ID)  
        .equ PWM0_CHID3_Shift, 3   @ bitWidth 1 (Channel ID)  
 
    .equ PWM0_DIS, PWM0_BASE + 0x08 @ (PWM Disable Register) 
        .equ PWM0_CHID0_Shift, 0   @ bitWidth 1 (Channel ID)  
        .equ PWM0_CHID1_Shift, 1   @ bitWidth 1 (Channel ID)  
        .equ PWM0_CHID2_Shift, 2   @ bitWidth 1 (Channel ID)  
        .equ PWM0_CHID3_Shift, 3   @ bitWidth 1 (Channel ID)  
 
    .equ PWM0_SR, PWM0_BASE + 0x0C @ (PWM Status Register) 
        .equ PWM0_CHID0_Shift, 0   @ bitWidth 1 (Channel ID)  
        .equ PWM0_CHID1_Shift, 1   @ bitWidth 1 (Channel ID)  
        .equ PWM0_CHID2_Shift, 2   @ bitWidth 1 (Channel ID)  
        .equ PWM0_CHID3_Shift, 3   @ bitWidth 1 (Channel ID)  
 
    .equ PWM0_IER1, PWM0_BASE + 0x10 @ (PWM Interrupt Enable Register 1) 
        .equ PWM0_CHID0_Shift, 0   @ bitWidth 1 (Counter Event on Channel 0 Interrupt Enable)  
        .equ PWM0_CHID1_Shift, 1   @ bitWidth 1 (Counter Event on Channel 1 Interrupt Enable)  
        .equ PWM0_CHID2_Shift, 2   @ bitWidth 1 (Counter Event on Channel 2 Interrupt Enable)  
        .equ PWM0_CHID3_Shift, 3   @ bitWidth 1 (Counter Event on Channel 3 Interrupt Enable)  
        .equ PWM0_FCHID0_Shift, 16   @ bitWidth 1 (Fault Protection Trigger on Channel 0 Interrupt Enable)  
        .equ PWM0_FCHID1_Shift, 17   @ bitWidth 1 (Fault Protection Trigger on Channel 1 Interrupt Enable)  
        .equ PWM0_FCHID2_Shift, 18   @ bitWidth 1 (Fault Protection Trigger on Channel 2 Interrupt Enable)  
        .equ PWM0_FCHID3_Shift, 19   @ bitWidth 1 (Fault Protection Trigger on Channel 3 Interrupt Enable)  
 
    .equ PWM0_IDR1, PWM0_BASE + 0x14 @ (PWM Interrupt Disable Register 1) 
        .equ PWM0_CHID0_Shift, 0   @ bitWidth 1 (Counter Event on Channel 0 Interrupt Disable)  
        .equ PWM0_CHID1_Shift, 1   @ bitWidth 1 (Counter Event on Channel 1 Interrupt Disable)  
        .equ PWM0_CHID2_Shift, 2   @ bitWidth 1 (Counter Event on Channel 2 Interrupt Disable)  
        .equ PWM0_CHID3_Shift, 3   @ bitWidth 1 (Counter Event on Channel 3 Interrupt Disable)  
        .equ PWM0_FCHID0_Shift, 16   @ bitWidth 1 (Fault Protection Trigger on Channel 0 Interrupt Disable)  
        .equ PWM0_FCHID1_Shift, 17   @ bitWidth 1 (Fault Protection Trigger on Channel 1 Interrupt Disable)  
        .equ PWM0_FCHID2_Shift, 18   @ bitWidth 1 (Fault Protection Trigger on Channel 2 Interrupt Disable)  
        .equ PWM0_FCHID3_Shift, 19   @ bitWidth 1 (Fault Protection Trigger on Channel 3 Interrupt Disable)  
 
    .equ PWM0_IMR1, PWM0_BASE + 0x18 @ (PWM Interrupt Mask Register 1) 
        .equ PWM0_CHID0_Shift, 0   @ bitWidth 1 (Counter Event on Channel 0 Interrupt Mask)  
        .equ PWM0_CHID1_Shift, 1   @ bitWidth 1 (Counter Event on Channel 1 Interrupt Mask)  
        .equ PWM0_CHID2_Shift, 2   @ bitWidth 1 (Counter Event on Channel 2 Interrupt Mask)  
        .equ PWM0_CHID3_Shift, 3   @ bitWidth 1 (Counter Event on Channel 3 Interrupt Mask)  
        .equ PWM0_FCHID0_Shift, 16   @ bitWidth 1 (Fault Protection Trigger on Channel 0 Interrupt Mask)  
        .equ PWM0_FCHID1_Shift, 17   @ bitWidth 1 (Fault Protection Trigger on Channel 1 Interrupt Mask)  
        .equ PWM0_FCHID2_Shift, 18   @ bitWidth 1 (Fault Protection Trigger on Channel 2 Interrupt Mask)  
        .equ PWM0_FCHID3_Shift, 19   @ bitWidth 1 (Fault Protection Trigger on Channel 3 Interrupt Mask)  
 
    .equ PWM0_ISR1, PWM0_BASE + 0x1C @ (PWM Interrupt Status Register 1) 
        .equ PWM0_CHID0_Shift, 0   @ bitWidth 1 (Counter Event on Channel 0)  
        .equ PWM0_CHID1_Shift, 1   @ bitWidth 1 (Counter Event on Channel 1)  
        .equ PWM0_CHID2_Shift, 2   @ bitWidth 1 (Counter Event on Channel 2)  
        .equ PWM0_CHID3_Shift, 3   @ bitWidth 1 (Counter Event on Channel 3)  
        .equ PWM0_FCHID0_Shift, 16   @ bitWidth 1 (Fault Protection Trigger on Channel 0)  
        .equ PWM0_FCHID1_Shift, 17   @ bitWidth 1 (Fault Protection Trigger on Channel 1)  
        .equ PWM0_FCHID2_Shift, 18   @ bitWidth 1 (Fault Protection Trigger on Channel 2)  
        .equ PWM0_FCHID3_Shift, 19   @ bitWidth 1 (Fault Protection Trigger on Channel 3)  
 
    .equ PWM0_SCM, PWM0_BASE + 0x20 @ (PWM Sync Channels Mode Register) 
        .equ PWM0_SYNC0_Shift, 0   @ bitWidth 1 (Synchronous Channel 0)  
        .equ PWM0_SYNC1_Shift, 1   @ bitWidth 1 (Synchronous Channel 1)  
        .equ PWM0_SYNC2_Shift, 2   @ bitWidth 1 (Synchronous Channel 2)  
        .equ PWM0_SYNC3_Shift, 3   @ bitWidth 1 (Synchronous Channel 3)  
        .equ PWM0_UPDM_Shift, 16   @ bitWidth 2 (Synchronous Channels Update Mode)  
        .equ PWM0_PTRM_Shift, 20   @ bitWidth 1 (DMA Controller Transfer Request Mode)  
        .equ PWM0_PTRCS_Shift, 21   @ bitWidth 3 (DMA Controller Transfer Request Comparison Selection)  
 
    .equ PWM0_DMAR, PWM0_BASE + 0x24 @ (PWM DMA Register) 
        .equ PWM0_DMADUTY_Shift, 0   @ bitWidth 24 (Duty-Cycle Holding Register for DMA Access)  
 
    .equ PWM0_SCUC, PWM0_BASE + 0x28 @ (PWM Sync Channels Update Control Register) 
        .equ PWM0_UPDULOCK_Shift, 0   @ bitWidth 1 (Synchronous Channels Update Unlock)  
 
    .equ PWM0_SCUP, PWM0_BASE + 0x2C @ (PWM Sync Channels Update Period Register) 
        .equ PWM0_UPR_Shift, 0   @ bitWidth 4 (Update Period)  
        .equ PWM0_UPRCNT_Shift, 4   @ bitWidth 4 (Update Period Counter)  
 
    .equ PWM0_SCUPUPD, PWM0_BASE + 0x30 @ (PWM Sync Channels Update Period Update Register) 
        .equ PWM0_UPRUPD_Shift, 0   @ bitWidth 4 (Update Period Update)  
 
    .equ PWM0_IER2, PWM0_BASE + 0x34 @ (PWM Interrupt Enable Register 2) 
        .equ PWM0_WRDY_Shift, 0   @ bitWidth 1 (Write Ready for Synchronous Channels Update Interrupt Enable)  
        .equ PWM0_UNRE_Shift, 3   @ bitWidth 1 (Synchronous Channels Update Underrun Error Interrupt Enable)  
        .equ PWM0_CMPM0_Shift, 8   @ bitWidth 1 (Comparison 0 Match Interrupt Enable)  
        .equ PWM0_CMPM1_Shift, 9   @ bitWidth 1 (Comparison 1 Match Interrupt Enable)  
        .equ PWM0_CMPM2_Shift, 10   @ bitWidth 1 (Comparison 2 Match Interrupt Enable)  
        .equ PWM0_CMPM3_Shift, 11   @ bitWidth 1 (Comparison 3 Match Interrupt Enable)  
        .equ PWM0_CMPM4_Shift, 12   @ bitWidth 1 (Comparison 4 Match Interrupt Enable)  
        .equ PWM0_CMPM5_Shift, 13   @ bitWidth 1 (Comparison 5 Match Interrupt Enable)  
        .equ PWM0_CMPM6_Shift, 14   @ bitWidth 1 (Comparison 6 Match Interrupt Enable)  
        .equ PWM0_CMPM7_Shift, 15   @ bitWidth 1 (Comparison 7 Match Interrupt Enable)  
        .equ PWM0_CMPU0_Shift, 16   @ bitWidth 1 (Comparison 0 Update Interrupt Enable)  
        .equ PWM0_CMPU1_Shift, 17   @ bitWidth 1 (Comparison 1 Update Interrupt Enable)  
        .equ PWM0_CMPU2_Shift, 18   @ bitWidth 1 (Comparison 2 Update Interrupt Enable)  
        .equ PWM0_CMPU3_Shift, 19   @ bitWidth 1 (Comparison 3 Update Interrupt Enable)  
        .equ PWM0_CMPU4_Shift, 20   @ bitWidth 1 (Comparison 4 Update Interrupt Enable)  
        .equ PWM0_CMPU5_Shift, 21   @ bitWidth 1 (Comparison 5 Update Interrupt Enable)  
        .equ PWM0_CMPU6_Shift, 22   @ bitWidth 1 (Comparison 6 Update Interrupt Enable)  
        .equ PWM0_CMPU7_Shift, 23   @ bitWidth 1 (Comparison 7 Update Interrupt Enable)  
 
    .equ PWM0_IDR2, PWM0_BASE + 0x38 @ (PWM Interrupt Disable Register 2) 
        .equ PWM0_WRDY_Shift, 0   @ bitWidth 1 (Write Ready for Synchronous Channels Update Interrupt Disable)  
        .equ PWM0_UNRE_Shift, 3   @ bitWidth 1 (Synchronous Channels Update Underrun Error Interrupt Disable)  
        .equ PWM0_CMPM0_Shift, 8   @ bitWidth 1 (Comparison 0 Match Interrupt Disable)  
        .equ PWM0_CMPM1_Shift, 9   @ bitWidth 1 (Comparison 1 Match Interrupt Disable)  
        .equ PWM0_CMPM2_Shift, 10   @ bitWidth 1 (Comparison 2 Match Interrupt Disable)  
        .equ PWM0_CMPM3_Shift, 11   @ bitWidth 1 (Comparison 3 Match Interrupt Disable)  
        .equ PWM0_CMPM4_Shift, 12   @ bitWidth 1 (Comparison 4 Match Interrupt Disable)  
        .equ PWM0_CMPM5_Shift, 13   @ bitWidth 1 (Comparison 5 Match Interrupt Disable)  
        .equ PWM0_CMPM6_Shift, 14   @ bitWidth 1 (Comparison 6 Match Interrupt Disable)  
        .equ PWM0_CMPM7_Shift, 15   @ bitWidth 1 (Comparison 7 Match Interrupt Disable)  
        .equ PWM0_CMPU0_Shift, 16   @ bitWidth 1 (Comparison 0 Update Interrupt Disable)  
        .equ PWM0_CMPU1_Shift, 17   @ bitWidth 1 (Comparison 1 Update Interrupt Disable)  
        .equ PWM0_CMPU2_Shift, 18   @ bitWidth 1 (Comparison 2 Update Interrupt Disable)  
        .equ PWM0_CMPU3_Shift, 19   @ bitWidth 1 (Comparison 3 Update Interrupt Disable)  
        .equ PWM0_CMPU4_Shift, 20   @ bitWidth 1 (Comparison 4 Update Interrupt Disable)  
        .equ PWM0_CMPU5_Shift, 21   @ bitWidth 1 (Comparison 5 Update Interrupt Disable)  
        .equ PWM0_CMPU6_Shift, 22   @ bitWidth 1 (Comparison 6 Update Interrupt Disable)  
        .equ PWM0_CMPU7_Shift, 23   @ bitWidth 1 (Comparison 7 Update Interrupt Disable)  
 
    .equ PWM0_IMR2, PWM0_BASE + 0x3C @ (PWM Interrupt Mask Register 2) 
        .equ PWM0_WRDY_Shift, 0   @ bitWidth 1 (Write Ready for Synchronous Channels Update Interrupt Mask)  
        .equ PWM0_UNRE_Shift, 3   @ bitWidth 1 (Synchronous Channels Update Underrun Error Interrupt Mask)  
        .equ PWM0_CMPM0_Shift, 8   @ bitWidth 1 (Comparison 0 Match Interrupt Mask)  
        .equ PWM0_CMPM1_Shift, 9   @ bitWidth 1 (Comparison 1 Match Interrupt Mask)  
        .equ PWM0_CMPM2_Shift, 10   @ bitWidth 1 (Comparison 2 Match Interrupt Mask)  
        .equ PWM0_CMPM3_Shift, 11   @ bitWidth 1 (Comparison 3 Match Interrupt Mask)  
        .equ PWM0_CMPM4_Shift, 12   @ bitWidth 1 (Comparison 4 Match Interrupt Mask)  
        .equ PWM0_CMPM5_Shift, 13   @ bitWidth 1 (Comparison 5 Match Interrupt Mask)  
        .equ PWM0_CMPM6_Shift, 14   @ bitWidth 1 (Comparison 6 Match Interrupt Mask)  
        .equ PWM0_CMPM7_Shift, 15   @ bitWidth 1 (Comparison 7 Match Interrupt Mask)  
        .equ PWM0_CMPU0_Shift, 16   @ bitWidth 1 (Comparison 0 Update Interrupt Mask)  
        .equ PWM0_CMPU1_Shift, 17   @ bitWidth 1 (Comparison 1 Update Interrupt Mask)  
        .equ PWM0_CMPU2_Shift, 18   @ bitWidth 1 (Comparison 2 Update Interrupt Mask)  
        .equ PWM0_CMPU3_Shift, 19   @ bitWidth 1 (Comparison 3 Update Interrupt Mask)  
        .equ PWM0_CMPU4_Shift, 20   @ bitWidth 1 (Comparison 4 Update Interrupt Mask)  
        .equ PWM0_CMPU5_Shift, 21   @ bitWidth 1 (Comparison 5 Update Interrupt Mask)  
        .equ PWM0_CMPU6_Shift, 22   @ bitWidth 1 (Comparison 6 Update Interrupt Mask)  
        .equ PWM0_CMPU7_Shift, 23   @ bitWidth 1 (Comparison 7 Update Interrupt Mask)  
 
    .equ PWM0_ISR2, PWM0_BASE + 0x40 @ (PWM Interrupt Status Register 2) 
        .equ PWM0_WRDY_Shift, 0   @ bitWidth 1 (Write Ready for Synchronous Channels Update)  
        .equ PWM0_UNRE_Shift, 3   @ bitWidth 1 (Synchronous Channels Update Underrun Error)  
        .equ PWM0_CMPM0_Shift, 8   @ bitWidth 1 (Comparison 0 Match)  
        .equ PWM0_CMPM1_Shift, 9   @ bitWidth 1 (Comparison 1 Match)  
        .equ PWM0_CMPM2_Shift, 10   @ bitWidth 1 (Comparison 2 Match)  
        .equ PWM0_CMPM3_Shift, 11   @ bitWidth 1 (Comparison 3 Match)  
        .equ PWM0_CMPM4_Shift, 12   @ bitWidth 1 (Comparison 4 Match)  
        .equ PWM0_CMPM5_Shift, 13   @ bitWidth 1 (Comparison 5 Match)  
        .equ PWM0_CMPM6_Shift, 14   @ bitWidth 1 (Comparison 6 Match)  
        .equ PWM0_CMPM7_Shift, 15   @ bitWidth 1 (Comparison 7 Match)  
        .equ PWM0_CMPU0_Shift, 16   @ bitWidth 1 (Comparison 0 Update)  
        .equ PWM0_CMPU1_Shift, 17   @ bitWidth 1 (Comparison 1 Update)  
        .equ PWM0_CMPU2_Shift, 18   @ bitWidth 1 (Comparison 2 Update)  
        .equ PWM0_CMPU3_Shift, 19   @ bitWidth 1 (Comparison 3 Update)  
        .equ PWM0_CMPU4_Shift, 20   @ bitWidth 1 (Comparison 4 Update)  
        .equ PWM0_CMPU5_Shift, 21   @ bitWidth 1 (Comparison 5 Update)  
        .equ PWM0_CMPU6_Shift, 22   @ bitWidth 1 (Comparison 6 Update)  
        .equ PWM0_CMPU7_Shift, 23   @ bitWidth 1 (Comparison 7 Update)  
 
    .equ PWM0_OOV, PWM0_BASE + 0x44 @ (PWM Output Override Value Register) 
        .equ PWM0_OOVH0_Shift, 0   @ bitWidth 1 (Output Override Value for PWMH output of the channel 0)  
        .equ PWM0_OOVH1_Shift, 1   @ bitWidth 1 (Output Override Value for PWMH output of the channel 1)  
        .equ PWM0_OOVH2_Shift, 2   @ bitWidth 1 (Output Override Value for PWMH output of the channel 2)  
        .equ PWM0_OOVH3_Shift, 3   @ bitWidth 1 (Output Override Value for PWMH output of the channel 3)  
        .equ PWM0_OOVL0_Shift, 16   @ bitWidth 1 (Output Override Value for PWML output of the channel 0)  
        .equ PWM0_OOVL1_Shift, 17   @ bitWidth 1 (Output Override Value for PWML output of the channel 1)  
        .equ PWM0_OOVL2_Shift, 18   @ bitWidth 1 (Output Override Value for PWML output of the channel 2)  
        .equ PWM0_OOVL3_Shift, 19   @ bitWidth 1 (Output Override Value for PWML output of the channel 3)  
 
    .equ PWM0_OS, PWM0_BASE + 0x48 @ (PWM Output Selection Register) 
        .equ PWM0_OSH0_Shift, 0   @ bitWidth 1 (Output Selection for PWMH output of the channel 0)  
        .equ PWM0_OSH1_Shift, 1   @ bitWidth 1 (Output Selection for PWMH output of the channel 1)  
        .equ PWM0_OSH2_Shift, 2   @ bitWidth 1 (Output Selection for PWMH output of the channel 2)  
        .equ PWM0_OSH3_Shift, 3   @ bitWidth 1 (Output Selection for PWMH output of the channel 3)  
        .equ PWM0_OSL0_Shift, 16   @ bitWidth 1 (Output Selection for PWML output of the channel 0)  
        .equ PWM0_OSL1_Shift, 17   @ bitWidth 1 (Output Selection for PWML output of the channel 1)  
        .equ PWM0_OSL2_Shift, 18   @ bitWidth 1 (Output Selection for PWML output of the channel 2)  
        .equ PWM0_OSL3_Shift, 19   @ bitWidth 1 (Output Selection for PWML output of the channel 3)  
 
    .equ PWM0_OSS, PWM0_BASE + 0x4C @ (PWM Output Selection Set Register) 
        .equ PWM0_OSSH0_Shift, 0   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 0)  
        .equ PWM0_OSSH1_Shift, 1   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 1)  
        .equ PWM0_OSSH2_Shift, 2   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 2)  
        .equ PWM0_OSSH3_Shift, 3   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 3)  
        .equ PWM0_OSSL0_Shift, 16   @ bitWidth 1 (Output Selection Set for PWML output of the channel 0)  
        .equ PWM0_OSSL1_Shift, 17   @ bitWidth 1 (Output Selection Set for PWML output of the channel 1)  
        .equ PWM0_OSSL2_Shift, 18   @ bitWidth 1 (Output Selection Set for PWML output of the channel 2)  
        .equ PWM0_OSSL3_Shift, 19   @ bitWidth 1 (Output Selection Set for PWML output of the channel 3)  
 
    .equ PWM0_OSC, PWM0_BASE + 0x50 @ (PWM Output Selection Clear Register) 
        .equ PWM0_OSCH0_Shift, 0   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 0)  
        .equ PWM0_OSCH1_Shift, 1   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 1)  
        .equ PWM0_OSCH2_Shift, 2   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 2)  
        .equ PWM0_OSCH3_Shift, 3   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 3)  
        .equ PWM0_OSCL0_Shift, 16   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 0)  
        .equ PWM0_OSCL1_Shift, 17   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 1)  
        .equ PWM0_OSCL2_Shift, 18   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 2)  
        .equ PWM0_OSCL3_Shift, 19   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 3)  
 
    .equ PWM0_OSSUPD, PWM0_BASE + 0x54 @ (PWM Output Selection Set Update Register) 
        .equ PWM0_OSSUPH0_Shift, 0   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 0)  
        .equ PWM0_OSSUPH1_Shift, 1   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 1)  
        .equ PWM0_OSSUPH2_Shift, 2   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 2)  
        .equ PWM0_OSSUPH3_Shift, 3   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 3)  
        .equ PWM0_OSSUPL0_Shift, 16   @ bitWidth 1 (Output Selection Set for PWML output of the channel 0)  
        .equ PWM0_OSSUPL1_Shift, 17   @ bitWidth 1 (Output Selection Set for PWML output of the channel 1)  
        .equ PWM0_OSSUPL2_Shift, 18   @ bitWidth 1 (Output Selection Set for PWML output of the channel 2)  
        .equ PWM0_OSSUPL3_Shift, 19   @ bitWidth 1 (Output Selection Set for PWML output of the channel 3)  
 
    .equ PWM0_OSCUPD, PWM0_BASE + 0x58 @ (PWM Output Selection Clear Update Register) 
        .equ PWM0_OSCUPH0_Shift, 0   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 0)  
        .equ PWM0_OSCUPH1_Shift, 1   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 1)  
        .equ PWM0_OSCUPH2_Shift, 2   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 2)  
        .equ PWM0_OSCUPH3_Shift, 3   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 3)  
        .equ PWM0_OSCUPL0_Shift, 16   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 0)  
        .equ PWM0_OSCUPL1_Shift, 17   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 1)  
        .equ PWM0_OSCUPL2_Shift, 18   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 2)  
        .equ PWM0_OSCUPL3_Shift, 19   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 3)  
 
    .equ PWM0_FMR, PWM0_BASE + 0x5C @ (PWM Fault Mode Register) 
        .equ PWM0_FPOL_Shift, 0   @ bitWidth 8 (Fault Polarity)  
        .equ PWM0_FMOD_Shift, 8   @ bitWidth 8 (Fault Activation Mode)  
        .equ PWM0_FFIL_Shift, 16   @ bitWidth 8 (Fault Filtering)  
 
    .equ PWM0_FSR, PWM0_BASE + 0x60 @ (PWM Fault Status Register) 
        .equ PWM0_FIV_Shift, 0   @ bitWidth 8 (Fault Input Value)  
        .equ PWM0_FS_Shift, 8   @ bitWidth 8 (Fault Status)  
 
    .equ PWM0_FCR, PWM0_BASE + 0x64 @ (PWM Fault Clear Register) 
        .equ PWM0_FCLR_Shift, 0   @ bitWidth 8 (Fault Clear)  
 
    .equ PWM0_FPV1, PWM0_BASE + 0x68 @ (PWM Fault Protection Value Register 1) 
        .equ PWM0_FPVH0_Shift, 0   @ bitWidth 1 (Fault Protection Value for PWMH output on channel 0)  
        .equ PWM0_FPVH1_Shift, 1   @ bitWidth 1 (Fault Protection Value for PWMH output on channel 1)  
        .equ PWM0_FPVH2_Shift, 2   @ bitWidth 1 (Fault Protection Value for PWMH output on channel 2)  
        .equ PWM0_FPVH3_Shift, 3   @ bitWidth 1 (Fault Protection Value for PWMH output on channel 3)  
        .equ PWM0_FPVL0_Shift, 16   @ bitWidth 1 (Fault Protection Value for PWML output on channel 0)  
        .equ PWM0_FPVL1_Shift, 17   @ bitWidth 1 (Fault Protection Value for PWML output on channel 1)  
        .equ PWM0_FPVL2_Shift, 18   @ bitWidth 1 (Fault Protection Value for PWML output on channel 2)  
        .equ PWM0_FPVL3_Shift, 19   @ bitWidth 1 (Fault Protection Value for PWML output on channel 3)  
 
    .equ PWM0_FPE, PWM0_BASE + 0x6C @ (PWM Fault Protection Enable Register) 
        .equ PWM0_FPE0_Shift, 0   @ bitWidth 8 (Fault Protection Enable for channel 0)  
        .equ PWM0_FPE1_Shift, 8   @ bitWidth 8 (Fault Protection Enable for channel 1)  
        .equ PWM0_FPE2_Shift, 16   @ bitWidth 8 (Fault Protection Enable for channel 2)  
        .equ PWM0_FPE3_Shift, 24   @ bitWidth 8 (Fault Protection Enable for channel 3)  
 
    .equ PWM0_ELMR[%s], PWM0_BASE + 0x7C @ (PWM Event Line 0 Mode Register 0) 
        .equ PWM0_CSEL0_Shift, 0   @ bitWidth 1 (Comparison 0 Selection)  
        .equ PWM0_CSEL1_Shift, 1   @ bitWidth 1 (Comparison 1 Selection)  
        .equ PWM0_CSEL2_Shift, 2   @ bitWidth 1 (Comparison 2 Selection)  
        .equ PWM0_CSEL3_Shift, 3   @ bitWidth 1 (Comparison 3 Selection)  
        .equ PWM0_CSEL4_Shift, 4   @ bitWidth 1 (Comparison 4 Selection)  
        .equ PWM0_CSEL5_Shift, 5   @ bitWidth 1 (Comparison 5 Selection)  
        .equ PWM0_CSEL6_Shift, 6   @ bitWidth 1 (Comparison 6 Selection)  
        .equ PWM0_CSEL7_Shift, 7   @ bitWidth 1 (Comparison 7 Selection)  
 
    .equ PWM0_SSPR, PWM0_BASE + 0xA0 @ (PWM Spread Spectrum Register) 
        .equ PWM0_SPRD_Shift, 0   @ bitWidth 24 (Spread Spectrum Limit Value)  
        .equ PWM0_SPRDM_Shift, 24   @ bitWidth 1 (Spread Spectrum Counter Mode)  
 
    .equ PWM0_SSPUP, PWM0_BASE + 0xA4 @ (PWM Spread Spectrum Update Register) 
        .equ PWM0_SPRDUP_Shift, 0   @ bitWidth 24 (Spread Spectrum Limit Value Update)  
 
    .equ PWM0_SMMR, PWM0_BASE + 0xB0 @ (PWM Stepper Motor Mode Register) 
        .equ PWM0_GCEN0_Shift, 0   @ bitWidth 1 (Gray Count ENable)  
        .equ PWM0_GCEN1_Shift, 1   @ bitWidth 1 (Gray Count ENable)  
        .equ PWM0_DOWN0_Shift, 16   @ bitWidth 1 (DOWN Count)  
        .equ PWM0_DOWN1_Shift, 17   @ bitWidth 1 (DOWN Count)  
 
    .equ PWM0_FPV2, PWM0_BASE + 0xC0 @ (PWM Fault Protection Value 2 Register) 
        .equ PWM0_FPZH0_Shift, 0   @ bitWidth 1 (Fault Protection to Hi-Z for PWMH output on channel 0)  
        .equ PWM0_FPZH1_Shift, 1   @ bitWidth 1 (Fault Protection to Hi-Z for PWMH output on channel 1)  
        .equ PWM0_FPZH2_Shift, 2   @ bitWidth 1 (Fault Protection to Hi-Z for PWMH output on channel 2)  
        .equ PWM0_FPZH3_Shift, 3   @ bitWidth 1 (Fault Protection to Hi-Z for PWMH output on channel 3)  
        .equ PWM0_FPZL0_Shift, 16   @ bitWidth 1 (Fault Protection to Hi-Z for PWML output on channel 0)  
        .equ PWM0_FPZL1_Shift, 17   @ bitWidth 1 (Fault Protection to Hi-Z for PWML output on channel 1)  
        .equ PWM0_FPZL2_Shift, 18   @ bitWidth 1 (Fault Protection to Hi-Z for PWML output on channel 2)  
        .equ PWM0_FPZL3_Shift, 19   @ bitWidth 1 (Fault Protection to Hi-Z for PWML output on channel 3)  
 
    .equ PWM0_WPCR, PWM0_BASE + 0xE4 @ (PWM Write Protection Control Register) 
        .equ PWM0_WPCMD_Shift, 0   @ bitWidth 2 (Write Protection Command)  
        .equ PWM0_WPRG0_Shift, 2   @ bitWidth 1 (Write Protection Register Group 0)  
        .equ PWM0_WPRG1_Shift, 3   @ bitWidth 1 (Write Protection Register Group 1)  
        .equ PWM0_WPRG2_Shift, 4   @ bitWidth 1 (Write Protection Register Group 2)  
        .equ PWM0_WPRG3_Shift, 5   @ bitWidth 1 (Write Protection Register Group 3)  
        .equ PWM0_WPRG4_Shift, 6   @ bitWidth 1 (Write Protection Register Group 4)  
        .equ PWM0_WPRG5_Shift, 7   @ bitWidth 1 (Write Protection Register Group 5)  
        .equ PWM0_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ PWM0_WPSR, PWM0_BASE + 0xE8 @ (PWM Write Protection Status Register) 
        .equ PWM0_WPSWS0_Shift, 0   @ bitWidth 1 (Write Protect SW Status)  
        .equ PWM0_WPSWS1_Shift, 1   @ bitWidth 1 (Write Protect SW Status)  
        .equ PWM0_WPSWS2_Shift, 2   @ bitWidth 1 (Write Protect SW Status)  
        .equ PWM0_WPSWS3_Shift, 3   @ bitWidth 1 (Write Protect SW Status)  
        .equ PWM0_WPSWS4_Shift, 4   @ bitWidth 1 (Write Protect SW Status)  
        .equ PWM0_WPSWS5_Shift, 5   @ bitWidth 1 (Write Protect SW Status)  
        .equ PWM0_WPVS_Shift, 7   @ bitWidth 1 (Write Protect Violation Status)  
        .equ PWM0_WPHWS0_Shift, 8   @ bitWidth 1 (Write Protect HW Status)  
        .equ PWM0_WPHWS1_Shift, 9   @ bitWidth 1 (Write Protect HW Status)  
        .equ PWM0_WPHWS2_Shift, 10   @ bitWidth 1 (Write Protect HW Status)  
        .equ PWM0_WPHWS3_Shift, 11   @ bitWidth 1 (Write Protect HW Status)  
        .equ PWM0_WPHWS4_Shift, 12   @ bitWidth 1 (Write Protect HW Status)  
        .equ PWM0_WPHWS5_Shift, 13   @ bitWidth 1 (Write Protect HW Status)  
        .equ PWM0_WPVSRC_Shift, 16   @ bitWidth 16 (Write Protect Violation Source)  
 
    .equ PWM0_CMUPD0, PWM0_BASE + 0x400 @ (PWM Channel Mode Update Register ch_num = 0) 
        .equ PWM0_CPOLUP_Shift, 9   @ bitWidth 1 (Channel Polarity Update)  
        .equ PWM0_CPOLINVUP_Shift, 13   @ bitWidth 1 (Channel Polarity Inversion Update)  
 
    .equ PWM0_CMUPD1, PWM0_BASE + 0x420 @ (PWM Channel Mode Update Register ch_num = 1) 
        .equ PWM0_CPOLUP_Shift, 9   @ bitWidth 1 (Channel Polarity Update)  
        .equ PWM0_CPOLINVUP_Shift, 13   @ bitWidth 1 (Channel Polarity Inversion Update)  
 
    .equ PWM0_ETRG1, PWM0_BASE + 0x42C @ (PWM External Trigger Register trg_num = 1) 
        .equ PWM0_MAXCNT_Shift, 0   @ bitWidth 24 (Maximum Counter value)  
        .equ PWM0_TRGMODE_Shift, 24   @ bitWidth 2 (External Trigger Mode)  
        .equ PWM0_TRGEDGE_Shift, 28   @ bitWidth 1 (Edge Selection)  
        .equ PWM0_TRGFILT_Shift, 29   @ bitWidth 1 (Filtered input)  
        .equ PWM0_TRGSRC_Shift, 30   @ bitWidth 1 (Trigger Source)  
        .equ PWM0_RFEN_Shift, 31   @ bitWidth 1 (Recoverable Fault Enable)  
 
    .equ PWM0_LEBR1, PWM0_BASE + 0x430 @ (PWM Leading-Edge Blanking Register trg_num = 1) 
        .equ PWM0_LEBDELAY_Shift, 0   @ bitWidth 7 (Leading-Edge Blanking Delay for TRGINx)  
        .equ PWM0_PWMLFEN_Shift, 16   @ bitWidth 1 (PWML Falling Edge Enable)  
        .equ PWM0_PWMLREN_Shift, 17   @ bitWidth 1 (PWML Rising Edge Enable)  
        .equ PWM0_PWMHFEN_Shift, 18   @ bitWidth 1 (PWMH Falling Edge Enable)  
        .equ PWM0_PWMHREN_Shift, 19   @ bitWidth 1 (PWMH Rising Edge Enable)  
 
    .equ PWM0_CMUPD2, PWM0_BASE + 0x440 @ (PWM Channel Mode Update Register ch_num = 2) 
        .equ PWM0_CPOLUP_Shift, 9   @ bitWidth 1 (Channel Polarity Update)  
        .equ PWM0_CPOLINVUP_Shift, 13   @ bitWidth 1 (Channel Polarity Inversion Update)  
 
    .equ PWM0_ETRG2, PWM0_BASE + 0x44C @ (PWM External Trigger Register trg_num = 2) 
        .equ PWM0_MAXCNT_Shift, 0   @ bitWidth 24 (Maximum Counter value)  
        .equ PWM0_TRGMODE_Shift, 24   @ bitWidth 2 (External Trigger Mode)  
        .equ PWM0_TRGEDGE_Shift, 28   @ bitWidth 1 (Edge Selection)  
        .equ PWM0_TRGFILT_Shift, 29   @ bitWidth 1 (Filtered input)  
        .equ PWM0_TRGSRC_Shift, 30   @ bitWidth 1 (Trigger Source)  
        .equ PWM0_RFEN_Shift, 31   @ bitWidth 1 (Recoverable Fault Enable)  
 
    .equ PWM0_LEBR2, PWM0_BASE + 0x450 @ (PWM Leading-Edge Blanking Register trg_num = 2) 
        .equ PWM0_LEBDELAY_Shift, 0   @ bitWidth 7 (Leading-Edge Blanking Delay for TRGINx)  
        .equ PWM0_PWMLFEN_Shift, 16   @ bitWidth 1 (PWML Falling Edge Enable)  
        .equ PWM0_PWMLREN_Shift, 17   @ bitWidth 1 (PWML Rising Edge Enable)  
        .equ PWM0_PWMHFEN_Shift, 18   @ bitWidth 1 (PWMH Falling Edge Enable)  
        .equ PWM0_PWMHREN_Shift, 19   @ bitWidth 1 (PWMH Rising Edge Enable)  
 
    .equ PWM0_CMUPD3, PWM0_BASE + 0x460 @ (PWM Channel Mode Update Register ch_num = 3) 
        .equ PWM0_CPOLUP_Shift, 9   @ bitWidth 1 (Channel Polarity Update)  
        .equ PWM0_CPOLINVUP_Shift, 13   @ bitWidth 1 (Channel Polarity Inversion Update)  
 

@=========================== PWM1 ===========================@
.equ PWM1_BASE, 0x4005C000 @ (Pulse Width Modulation Controller) 
    .equ PWM1_CLK, PWM1_BASE + 0x00 @ (PWM Clock Register) 
        .equ PWM1_DIVA_Shift, 0   @ bitWidth 8 (CLKA Divide Factor)  
        .equ PWM1_PREA_Shift, 8   @ bitWidth 4 (CLKA Source Clock Selection)  
        .equ PWM1_DIVB_Shift, 16   @ bitWidth 8 (CLKB Divide Factor)  
        .equ PWM1_PREB_Shift, 24   @ bitWidth 4 (CLKB Source Clock Selection)  
 
    .equ PWM1_ENA, PWM1_BASE + 0x04 @ (PWM Enable Register) 
        .equ PWM1_CHID0_Shift, 0   @ bitWidth 1 (Channel ID)  
        .equ PWM1_CHID1_Shift, 1   @ bitWidth 1 (Channel ID)  
        .equ PWM1_CHID2_Shift, 2   @ bitWidth 1 (Channel ID)  
        .equ PWM1_CHID3_Shift, 3   @ bitWidth 1 (Channel ID)  
 
    .equ PWM1_DIS, PWM1_BASE + 0x08 @ (PWM Disable Register) 
        .equ PWM1_CHID0_Shift, 0   @ bitWidth 1 (Channel ID)  
        .equ PWM1_CHID1_Shift, 1   @ bitWidth 1 (Channel ID)  
        .equ PWM1_CHID2_Shift, 2   @ bitWidth 1 (Channel ID)  
        .equ PWM1_CHID3_Shift, 3   @ bitWidth 1 (Channel ID)  
 
    .equ PWM1_SR, PWM1_BASE + 0x0C @ (PWM Status Register) 
        .equ PWM1_CHID0_Shift, 0   @ bitWidth 1 (Channel ID)  
        .equ PWM1_CHID1_Shift, 1   @ bitWidth 1 (Channel ID)  
        .equ PWM1_CHID2_Shift, 2   @ bitWidth 1 (Channel ID)  
        .equ PWM1_CHID3_Shift, 3   @ bitWidth 1 (Channel ID)  
 
    .equ PWM1_IER1, PWM1_BASE + 0x10 @ (PWM Interrupt Enable Register 1) 
        .equ PWM1_CHID0_Shift, 0   @ bitWidth 1 (Counter Event on Channel 0 Interrupt Enable)  
        .equ PWM1_CHID1_Shift, 1   @ bitWidth 1 (Counter Event on Channel 1 Interrupt Enable)  
        .equ PWM1_CHID2_Shift, 2   @ bitWidth 1 (Counter Event on Channel 2 Interrupt Enable)  
        .equ PWM1_CHID3_Shift, 3   @ bitWidth 1 (Counter Event on Channel 3 Interrupt Enable)  
        .equ PWM1_FCHID0_Shift, 16   @ bitWidth 1 (Fault Protection Trigger on Channel 0 Interrupt Enable)  
        .equ PWM1_FCHID1_Shift, 17   @ bitWidth 1 (Fault Protection Trigger on Channel 1 Interrupt Enable)  
        .equ PWM1_FCHID2_Shift, 18   @ bitWidth 1 (Fault Protection Trigger on Channel 2 Interrupt Enable)  
        .equ PWM1_FCHID3_Shift, 19   @ bitWidth 1 (Fault Protection Trigger on Channel 3 Interrupt Enable)  
 
    .equ PWM1_IDR1, PWM1_BASE + 0x14 @ (PWM Interrupt Disable Register 1) 
        .equ PWM1_CHID0_Shift, 0   @ bitWidth 1 (Counter Event on Channel 0 Interrupt Disable)  
        .equ PWM1_CHID1_Shift, 1   @ bitWidth 1 (Counter Event on Channel 1 Interrupt Disable)  
        .equ PWM1_CHID2_Shift, 2   @ bitWidth 1 (Counter Event on Channel 2 Interrupt Disable)  
        .equ PWM1_CHID3_Shift, 3   @ bitWidth 1 (Counter Event on Channel 3 Interrupt Disable)  
        .equ PWM1_FCHID0_Shift, 16   @ bitWidth 1 (Fault Protection Trigger on Channel 0 Interrupt Disable)  
        .equ PWM1_FCHID1_Shift, 17   @ bitWidth 1 (Fault Protection Trigger on Channel 1 Interrupt Disable)  
        .equ PWM1_FCHID2_Shift, 18   @ bitWidth 1 (Fault Protection Trigger on Channel 2 Interrupt Disable)  
        .equ PWM1_FCHID3_Shift, 19   @ bitWidth 1 (Fault Protection Trigger on Channel 3 Interrupt Disable)  
 
    .equ PWM1_IMR1, PWM1_BASE + 0x18 @ (PWM Interrupt Mask Register 1) 
        .equ PWM1_CHID0_Shift, 0   @ bitWidth 1 (Counter Event on Channel 0 Interrupt Mask)  
        .equ PWM1_CHID1_Shift, 1   @ bitWidth 1 (Counter Event on Channel 1 Interrupt Mask)  
        .equ PWM1_CHID2_Shift, 2   @ bitWidth 1 (Counter Event on Channel 2 Interrupt Mask)  
        .equ PWM1_CHID3_Shift, 3   @ bitWidth 1 (Counter Event on Channel 3 Interrupt Mask)  
        .equ PWM1_FCHID0_Shift, 16   @ bitWidth 1 (Fault Protection Trigger on Channel 0 Interrupt Mask)  
        .equ PWM1_FCHID1_Shift, 17   @ bitWidth 1 (Fault Protection Trigger on Channel 1 Interrupt Mask)  
        .equ PWM1_FCHID2_Shift, 18   @ bitWidth 1 (Fault Protection Trigger on Channel 2 Interrupt Mask)  
        .equ PWM1_FCHID3_Shift, 19   @ bitWidth 1 (Fault Protection Trigger on Channel 3 Interrupt Mask)  
 
    .equ PWM1_ISR1, PWM1_BASE + 0x1C @ (PWM Interrupt Status Register 1) 
        .equ PWM1_CHID0_Shift, 0   @ bitWidth 1 (Counter Event on Channel 0)  
        .equ PWM1_CHID1_Shift, 1   @ bitWidth 1 (Counter Event on Channel 1)  
        .equ PWM1_CHID2_Shift, 2   @ bitWidth 1 (Counter Event on Channel 2)  
        .equ PWM1_CHID3_Shift, 3   @ bitWidth 1 (Counter Event on Channel 3)  
        .equ PWM1_FCHID0_Shift, 16   @ bitWidth 1 (Fault Protection Trigger on Channel 0)  
        .equ PWM1_FCHID1_Shift, 17   @ bitWidth 1 (Fault Protection Trigger on Channel 1)  
        .equ PWM1_FCHID2_Shift, 18   @ bitWidth 1 (Fault Protection Trigger on Channel 2)  
        .equ PWM1_FCHID3_Shift, 19   @ bitWidth 1 (Fault Protection Trigger on Channel 3)  
 
    .equ PWM1_SCM, PWM1_BASE + 0x20 @ (PWM Sync Channels Mode Register) 
        .equ PWM1_SYNC0_Shift, 0   @ bitWidth 1 (Synchronous Channel 0)  
        .equ PWM1_SYNC1_Shift, 1   @ bitWidth 1 (Synchronous Channel 1)  
        .equ PWM1_SYNC2_Shift, 2   @ bitWidth 1 (Synchronous Channel 2)  
        .equ PWM1_SYNC3_Shift, 3   @ bitWidth 1 (Synchronous Channel 3)  
        .equ PWM1_UPDM_Shift, 16   @ bitWidth 2 (Synchronous Channels Update Mode)  
        .equ PWM1_PTRM_Shift, 20   @ bitWidth 1 (DMA Controller Transfer Request Mode)  
        .equ PWM1_PTRCS_Shift, 21   @ bitWidth 3 (DMA Controller Transfer Request Comparison Selection)  
 
    .equ PWM1_DMAR, PWM1_BASE + 0x24 @ (PWM DMA Register) 
        .equ PWM1_DMADUTY_Shift, 0   @ bitWidth 24 (Duty-Cycle Holding Register for DMA Access)  
 
    .equ PWM1_SCUC, PWM1_BASE + 0x28 @ (PWM Sync Channels Update Control Register) 
        .equ PWM1_UPDULOCK_Shift, 0   @ bitWidth 1 (Synchronous Channels Update Unlock)  
 
    .equ PWM1_SCUP, PWM1_BASE + 0x2C @ (PWM Sync Channels Update Period Register) 
        .equ PWM1_UPR_Shift, 0   @ bitWidth 4 (Update Period)  
        .equ PWM1_UPRCNT_Shift, 4   @ bitWidth 4 (Update Period Counter)  
 
    .equ PWM1_SCUPUPD, PWM1_BASE + 0x30 @ (PWM Sync Channels Update Period Update Register) 
        .equ PWM1_UPRUPD_Shift, 0   @ bitWidth 4 (Update Period Update)  
 
    .equ PWM1_IER2, PWM1_BASE + 0x34 @ (PWM Interrupt Enable Register 2) 
        .equ PWM1_WRDY_Shift, 0   @ bitWidth 1 (Write Ready for Synchronous Channels Update Interrupt Enable)  
        .equ PWM1_UNRE_Shift, 3   @ bitWidth 1 (Synchronous Channels Update Underrun Error Interrupt Enable)  
        .equ PWM1_CMPM0_Shift, 8   @ bitWidth 1 (Comparison 0 Match Interrupt Enable)  
        .equ PWM1_CMPM1_Shift, 9   @ bitWidth 1 (Comparison 1 Match Interrupt Enable)  
        .equ PWM1_CMPM2_Shift, 10   @ bitWidth 1 (Comparison 2 Match Interrupt Enable)  
        .equ PWM1_CMPM3_Shift, 11   @ bitWidth 1 (Comparison 3 Match Interrupt Enable)  
        .equ PWM1_CMPM4_Shift, 12   @ bitWidth 1 (Comparison 4 Match Interrupt Enable)  
        .equ PWM1_CMPM5_Shift, 13   @ bitWidth 1 (Comparison 5 Match Interrupt Enable)  
        .equ PWM1_CMPM6_Shift, 14   @ bitWidth 1 (Comparison 6 Match Interrupt Enable)  
        .equ PWM1_CMPM7_Shift, 15   @ bitWidth 1 (Comparison 7 Match Interrupt Enable)  
        .equ PWM1_CMPU0_Shift, 16   @ bitWidth 1 (Comparison 0 Update Interrupt Enable)  
        .equ PWM1_CMPU1_Shift, 17   @ bitWidth 1 (Comparison 1 Update Interrupt Enable)  
        .equ PWM1_CMPU2_Shift, 18   @ bitWidth 1 (Comparison 2 Update Interrupt Enable)  
        .equ PWM1_CMPU3_Shift, 19   @ bitWidth 1 (Comparison 3 Update Interrupt Enable)  
        .equ PWM1_CMPU4_Shift, 20   @ bitWidth 1 (Comparison 4 Update Interrupt Enable)  
        .equ PWM1_CMPU5_Shift, 21   @ bitWidth 1 (Comparison 5 Update Interrupt Enable)  
        .equ PWM1_CMPU6_Shift, 22   @ bitWidth 1 (Comparison 6 Update Interrupt Enable)  
        .equ PWM1_CMPU7_Shift, 23   @ bitWidth 1 (Comparison 7 Update Interrupt Enable)  
 
    .equ PWM1_IDR2, PWM1_BASE + 0x38 @ (PWM Interrupt Disable Register 2) 
        .equ PWM1_WRDY_Shift, 0   @ bitWidth 1 (Write Ready for Synchronous Channels Update Interrupt Disable)  
        .equ PWM1_UNRE_Shift, 3   @ bitWidth 1 (Synchronous Channels Update Underrun Error Interrupt Disable)  
        .equ PWM1_CMPM0_Shift, 8   @ bitWidth 1 (Comparison 0 Match Interrupt Disable)  
        .equ PWM1_CMPM1_Shift, 9   @ bitWidth 1 (Comparison 1 Match Interrupt Disable)  
        .equ PWM1_CMPM2_Shift, 10   @ bitWidth 1 (Comparison 2 Match Interrupt Disable)  
        .equ PWM1_CMPM3_Shift, 11   @ bitWidth 1 (Comparison 3 Match Interrupt Disable)  
        .equ PWM1_CMPM4_Shift, 12   @ bitWidth 1 (Comparison 4 Match Interrupt Disable)  
        .equ PWM1_CMPM5_Shift, 13   @ bitWidth 1 (Comparison 5 Match Interrupt Disable)  
        .equ PWM1_CMPM6_Shift, 14   @ bitWidth 1 (Comparison 6 Match Interrupt Disable)  
        .equ PWM1_CMPM7_Shift, 15   @ bitWidth 1 (Comparison 7 Match Interrupt Disable)  
        .equ PWM1_CMPU0_Shift, 16   @ bitWidth 1 (Comparison 0 Update Interrupt Disable)  
        .equ PWM1_CMPU1_Shift, 17   @ bitWidth 1 (Comparison 1 Update Interrupt Disable)  
        .equ PWM1_CMPU2_Shift, 18   @ bitWidth 1 (Comparison 2 Update Interrupt Disable)  
        .equ PWM1_CMPU3_Shift, 19   @ bitWidth 1 (Comparison 3 Update Interrupt Disable)  
        .equ PWM1_CMPU4_Shift, 20   @ bitWidth 1 (Comparison 4 Update Interrupt Disable)  
        .equ PWM1_CMPU5_Shift, 21   @ bitWidth 1 (Comparison 5 Update Interrupt Disable)  
        .equ PWM1_CMPU6_Shift, 22   @ bitWidth 1 (Comparison 6 Update Interrupt Disable)  
        .equ PWM1_CMPU7_Shift, 23   @ bitWidth 1 (Comparison 7 Update Interrupt Disable)  
 
    .equ PWM1_IMR2, PWM1_BASE + 0x3C @ (PWM Interrupt Mask Register 2) 
        .equ PWM1_WRDY_Shift, 0   @ bitWidth 1 (Write Ready for Synchronous Channels Update Interrupt Mask)  
        .equ PWM1_UNRE_Shift, 3   @ bitWidth 1 (Synchronous Channels Update Underrun Error Interrupt Mask)  
        .equ PWM1_CMPM0_Shift, 8   @ bitWidth 1 (Comparison 0 Match Interrupt Mask)  
        .equ PWM1_CMPM1_Shift, 9   @ bitWidth 1 (Comparison 1 Match Interrupt Mask)  
        .equ PWM1_CMPM2_Shift, 10   @ bitWidth 1 (Comparison 2 Match Interrupt Mask)  
        .equ PWM1_CMPM3_Shift, 11   @ bitWidth 1 (Comparison 3 Match Interrupt Mask)  
        .equ PWM1_CMPM4_Shift, 12   @ bitWidth 1 (Comparison 4 Match Interrupt Mask)  
        .equ PWM1_CMPM5_Shift, 13   @ bitWidth 1 (Comparison 5 Match Interrupt Mask)  
        .equ PWM1_CMPM6_Shift, 14   @ bitWidth 1 (Comparison 6 Match Interrupt Mask)  
        .equ PWM1_CMPM7_Shift, 15   @ bitWidth 1 (Comparison 7 Match Interrupt Mask)  
        .equ PWM1_CMPU0_Shift, 16   @ bitWidth 1 (Comparison 0 Update Interrupt Mask)  
        .equ PWM1_CMPU1_Shift, 17   @ bitWidth 1 (Comparison 1 Update Interrupt Mask)  
        .equ PWM1_CMPU2_Shift, 18   @ bitWidth 1 (Comparison 2 Update Interrupt Mask)  
        .equ PWM1_CMPU3_Shift, 19   @ bitWidth 1 (Comparison 3 Update Interrupt Mask)  
        .equ PWM1_CMPU4_Shift, 20   @ bitWidth 1 (Comparison 4 Update Interrupt Mask)  
        .equ PWM1_CMPU5_Shift, 21   @ bitWidth 1 (Comparison 5 Update Interrupt Mask)  
        .equ PWM1_CMPU6_Shift, 22   @ bitWidth 1 (Comparison 6 Update Interrupt Mask)  
        .equ PWM1_CMPU7_Shift, 23   @ bitWidth 1 (Comparison 7 Update Interrupt Mask)  
 
    .equ PWM1_ISR2, PWM1_BASE + 0x40 @ (PWM Interrupt Status Register 2) 
        .equ PWM1_WRDY_Shift, 0   @ bitWidth 1 (Write Ready for Synchronous Channels Update)  
        .equ PWM1_UNRE_Shift, 3   @ bitWidth 1 (Synchronous Channels Update Underrun Error)  
        .equ PWM1_CMPM0_Shift, 8   @ bitWidth 1 (Comparison 0 Match)  
        .equ PWM1_CMPM1_Shift, 9   @ bitWidth 1 (Comparison 1 Match)  
        .equ PWM1_CMPM2_Shift, 10   @ bitWidth 1 (Comparison 2 Match)  
        .equ PWM1_CMPM3_Shift, 11   @ bitWidth 1 (Comparison 3 Match)  
        .equ PWM1_CMPM4_Shift, 12   @ bitWidth 1 (Comparison 4 Match)  
        .equ PWM1_CMPM5_Shift, 13   @ bitWidth 1 (Comparison 5 Match)  
        .equ PWM1_CMPM6_Shift, 14   @ bitWidth 1 (Comparison 6 Match)  
        .equ PWM1_CMPM7_Shift, 15   @ bitWidth 1 (Comparison 7 Match)  
        .equ PWM1_CMPU0_Shift, 16   @ bitWidth 1 (Comparison 0 Update)  
        .equ PWM1_CMPU1_Shift, 17   @ bitWidth 1 (Comparison 1 Update)  
        .equ PWM1_CMPU2_Shift, 18   @ bitWidth 1 (Comparison 2 Update)  
        .equ PWM1_CMPU3_Shift, 19   @ bitWidth 1 (Comparison 3 Update)  
        .equ PWM1_CMPU4_Shift, 20   @ bitWidth 1 (Comparison 4 Update)  
        .equ PWM1_CMPU5_Shift, 21   @ bitWidth 1 (Comparison 5 Update)  
        .equ PWM1_CMPU6_Shift, 22   @ bitWidth 1 (Comparison 6 Update)  
        .equ PWM1_CMPU7_Shift, 23   @ bitWidth 1 (Comparison 7 Update)  
 
    .equ PWM1_OOV, PWM1_BASE + 0x44 @ (PWM Output Override Value Register) 
        .equ PWM1_OOVH0_Shift, 0   @ bitWidth 1 (Output Override Value for PWMH output of the channel 0)  
        .equ PWM1_OOVH1_Shift, 1   @ bitWidth 1 (Output Override Value for PWMH output of the channel 1)  
        .equ PWM1_OOVH2_Shift, 2   @ bitWidth 1 (Output Override Value for PWMH output of the channel 2)  
        .equ PWM1_OOVH3_Shift, 3   @ bitWidth 1 (Output Override Value for PWMH output of the channel 3)  
        .equ PWM1_OOVL0_Shift, 16   @ bitWidth 1 (Output Override Value for PWML output of the channel 0)  
        .equ PWM1_OOVL1_Shift, 17   @ bitWidth 1 (Output Override Value for PWML output of the channel 1)  
        .equ PWM1_OOVL2_Shift, 18   @ bitWidth 1 (Output Override Value for PWML output of the channel 2)  
        .equ PWM1_OOVL3_Shift, 19   @ bitWidth 1 (Output Override Value for PWML output of the channel 3)  
 
    .equ PWM1_OS, PWM1_BASE + 0x48 @ (PWM Output Selection Register) 
        .equ PWM1_OSH0_Shift, 0   @ bitWidth 1 (Output Selection for PWMH output of the channel 0)  
        .equ PWM1_OSH1_Shift, 1   @ bitWidth 1 (Output Selection for PWMH output of the channel 1)  
        .equ PWM1_OSH2_Shift, 2   @ bitWidth 1 (Output Selection for PWMH output of the channel 2)  
        .equ PWM1_OSH3_Shift, 3   @ bitWidth 1 (Output Selection for PWMH output of the channel 3)  
        .equ PWM1_OSL0_Shift, 16   @ bitWidth 1 (Output Selection for PWML output of the channel 0)  
        .equ PWM1_OSL1_Shift, 17   @ bitWidth 1 (Output Selection for PWML output of the channel 1)  
        .equ PWM1_OSL2_Shift, 18   @ bitWidth 1 (Output Selection for PWML output of the channel 2)  
        .equ PWM1_OSL3_Shift, 19   @ bitWidth 1 (Output Selection for PWML output of the channel 3)  
 
    .equ PWM1_OSS, PWM1_BASE + 0x4C @ (PWM Output Selection Set Register) 
        .equ PWM1_OSSH0_Shift, 0   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 0)  
        .equ PWM1_OSSH1_Shift, 1   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 1)  
        .equ PWM1_OSSH2_Shift, 2   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 2)  
        .equ PWM1_OSSH3_Shift, 3   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 3)  
        .equ PWM1_OSSL0_Shift, 16   @ bitWidth 1 (Output Selection Set for PWML output of the channel 0)  
        .equ PWM1_OSSL1_Shift, 17   @ bitWidth 1 (Output Selection Set for PWML output of the channel 1)  
        .equ PWM1_OSSL2_Shift, 18   @ bitWidth 1 (Output Selection Set for PWML output of the channel 2)  
        .equ PWM1_OSSL3_Shift, 19   @ bitWidth 1 (Output Selection Set for PWML output of the channel 3)  
 
    .equ PWM1_OSC, PWM1_BASE + 0x50 @ (PWM Output Selection Clear Register) 
        .equ PWM1_OSCH0_Shift, 0   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 0)  
        .equ PWM1_OSCH1_Shift, 1   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 1)  
        .equ PWM1_OSCH2_Shift, 2   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 2)  
        .equ PWM1_OSCH3_Shift, 3   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 3)  
        .equ PWM1_OSCL0_Shift, 16   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 0)  
        .equ PWM1_OSCL1_Shift, 17   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 1)  
        .equ PWM1_OSCL2_Shift, 18   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 2)  
        .equ PWM1_OSCL3_Shift, 19   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 3)  
 
    .equ PWM1_OSSUPD, PWM1_BASE + 0x54 @ (PWM Output Selection Set Update Register) 
        .equ PWM1_OSSUPH0_Shift, 0   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 0)  
        .equ PWM1_OSSUPH1_Shift, 1   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 1)  
        .equ PWM1_OSSUPH2_Shift, 2   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 2)  
        .equ PWM1_OSSUPH3_Shift, 3   @ bitWidth 1 (Output Selection Set for PWMH output of the channel 3)  
        .equ PWM1_OSSUPL0_Shift, 16   @ bitWidth 1 (Output Selection Set for PWML output of the channel 0)  
        .equ PWM1_OSSUPL1_Shift, 17   @ bitWidth 1 (Output Selection Set for PWML output of the channel 1)  
        .equ PWM1_OSSUPL2_Shift, 18   @ bitWidth 1 (Output Selection Set for PWML output of the channel 2)  
        .equ PWM1_OSSUPL3_Shift, 19   @ bitWidth 1 (Output Selection Set for PWML output of the channel 3)  
 
    .equ PWM1_OSCUPD, PWM1_BASE + 0x58 @ (PWM Output Selection Clear Update Register) 
        .equ PWM1_OSCUPH0_Shift, 0   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 0)  
        .equ PWM1_OSCUPH1_Shift, 1   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 1)  
        .equ PWM1_OSCUPH2_Shift, 2   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 2)  
        .equ PWM1_OSCUPH3_Shift, 3   @ bitWidth 1 (Output Selection Clear for PWMH output of the channel 3)  
        .equ PWM1_OSCUPL0_Shift, 16   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 0)  
        .equ PWM1_OSCUPL1_Shift, 17   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 1)  
        .equ PWM1_OSCUPL2_Shift, 18   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 2)  
        .equ PWM1_OSCUPL3_Shift, 19   @ bitWidth 1 (Output Selection Clear for PWML output of the channel 3)  
 
    .equ PWM1_FMR, PWM1_BASE + 0x5C @ (PWM Fault Mode Register) 
        .equ PWM1_FPOL_Shift, 0   @ bitWidth 8 (Fault Polarity)  
        .equ PWM1_FMOD_Shift, 8   @ bitWidth 8 (Fault Activation Mode)  
        .equ PWM1_FFIL_Shift, 16   @ bitWidth 8 (Fault Filtering)  
 
    .equ PWM1_FSR, PWM1_BASE + 0x60 @ (PWM Fault Status Register) 
        .equ PWM1_FIV_Shift, 0   @ bitWidth 8 (Fault Input Value)  
        .equ PWM1_FS_Shift, 8   @ bitWidth 8 (Fault Status)  
 
    .equ PWM1_FCR, PWM1_BASE + 0x64 @ (PWM Fault Clear Register) 
        .equ PWM1_FCLR_Shift, 0   @ bitWidth 8 (Fault Clear)  
 
    .equ PWM1_FPV1, PWM1_BASE + 0x68 @ (PWM Fault Protection Value Register 1) 
        .equ PWM1_FPVH0_Shift, 0   @ bitWidth 1 (Fault Protection Value for PWMH output on channel 0)  
        .equ PWM1_FPVH1_Shift, 1   @ bitWidth 1 (Fault Protection Value for PWMH output on channel 1)  
        .equ PWM1_FPVH2_Shift, 2   @ bitWidth 1 (Fault Protection Value for PWMH output on channel 2)  
        .equ PWM1_FPVH3_Shift, 3   @ bitWidth 1 (Fault Protection Value for PWMH output on channel 3)  
        .equ PWM1_FPVL0_Shift, 16   @ bitWidth 1 (Fault Protection Value for PWML output on channel 0)  
        .equ PWM1_FPVL1_Shift, 17   @ bitWidth 1 (Fault Protection Value for PWML output on channel 1)  
        .equ PWM1_FPVL2_Shift, 18   @ bitWidth 1 (Fault Protection Value for PWML output on channel 2)  
        .equ PWM1_FPVL3_Shift, 19   @ bitWidth 1 (Fault Protection Value for PWML output on channel 3)  
 
    .equ PWM1_FPE, PWM1_BASE + 0x6C @ (PWM Fault Protection Enable Register) 
        .equ PWM1_FPE0_Shift, 0   @ bitWidth 8 (Fault Protection Enable for channel 0)  
        .equ PWM1_FPE1_Shift, 8   @ bitWidth 8 (Fault Protection Enable for channel 1)  
        .equ PWM1_FPE2_Shift, 16   @ bitWidth 8 (Fault Protection Enable for channel 2)  
        .equ PWM1_FPE3_Shift, 24   @ bitWidth 8 (Fault Protection Enable for channel 3)  
 
    .equ PWM1_ELMR[%s], PWM1_BASE + 0x7C @ (PWM Event Line 0 Mode Register 0) 
        .equ PWM1_CSEL0_Shift, 0   @ bitWidth 1 (Comparison 0 Selection)  
        .equ PWM1_CSEL1_Shift, 1   @ bitWidth 1 (Comparison 1 Selection)  
        .equ PWM1_CSEL2_Shift, 2   @ bitWidth 1 (Comparison 2 Selection)  
        .equ PWM1_CSEL3_Shift, 3   @ bitWidth 1 (Comparison 3 Selection)  
        .equ PWM1_CSEL4_Shift, 4   @ bitWidth 1 (Comparison 4 Selection)  
        .equ PWM1_CSEL5_Shift, 5   @ bitWidth 1 (Comparison 5 Selection)  
        .equ PWM1_CSEL6_Shift, 6   @ bitWidth 1 (Comparison 6 Selection)  
        .equ PWM1_CSEL7_Shift, 7   @ bitWidth 1 (Comparison 7 Selection)  
 
    .equ PWM1_SSPR, PWM1_BASE + 0xA0 @ (PWM Spread Spectrum Register) 
        .equ PWM1_SPRD_Shift, 0   @ bitWidth 24 (Spread Spectrum Limit Value)  
        .equ PWM1_SPRDM_Shift, 24   @ bitWidth 1 (Spread Spectrum Counter Mode)  
 
    .equ PWM1_SSPUP, PWM1_BASE + 0xA4 @ (PWM Spread Spectrum Update Register) 
        .equ PWM1_SPRDUP_Shift, 0   @ bitWidth 24 (Spread Spectrum Limit Value Update)  
 
    .equ PWM1_SMMR, PWM1_BASE + 0xB0 @ (PWM Stepper Motor Mode Register) 
        .equ PWM1_GCEN0_Shift, 0   @ bitWidth 1 (Gray Count ENable)  
        .equ PWM1_GCEN1_Shift, 1   @ bitWidth 1 (Gray Count ENable)  
        .equ PWM1_DOWN0_Shift, 16   @ bitWidth 1 (DOWN Count)  
        .equ PWM1_DOWN1_Shift, 17   @ bitWidth 1 (DOWN Count)  
 
    .equ PWM1_FPV2, PWM1_BASE + 0xC0 @ (PWM Fault Protection Value 2 Register) 
        .equ PWM1_FPZH0_Shift, 0   @ bitWidth 1 (Fault Protection to Hi-Z for PWMH output on channel 0)  
        .equ PWM1_FPZH1_Shift, 1   @ bitWidth 1 (Fault Protection to Hi-Z for PWMH output on channel 1)  
        .equ PWM1_FPZH2_Shift, 2   @ bitWidth 1 (Fault Protection to Hi-Z for PWMH output on channel 2)  
        .equ PWM1_FPZH3_Shift, 3   @ bitWidth 1 (Fault Protection to Hi-Z for PWMH output on channel 3)  
        .equ PWM1_FPZL0_Shift, 16   @ bitWidth 1 (Fault Protection to Hi-Z for PWML output on channel 0)  
        .equ PWM1_FPZL1_Shift, 17   @ bitWidth 1 (Fault Protection to Hi-Z for PWML output on channel 1)  
        .equ PWM1_FPZL2_Shift, 18   @ bitWidth 1 (Fault Protection to Hi-Z for PWML output on channel 2)  
        .equ PWM1_FPZL3_Shift, 19   @ bitWidth 1 (Fault Protection to Hi-Z for PWML output on channel 3)  
 
    .equ PWM1_WPCR, PWM1_BASE + 0xE4 @ (PWM Write Protection Control Register) 
        .equ PWM1_WPCMD_Shift, 0   @ bitWidth 2 (Write Protection Command)  
        .equ PWM1_WPRG0_Shift, 2   @ bitWidth 1 (Write Protection Register Group 0)  
        .equ PWM1_WPRG1_Shift, 3   @ bitWidth 1 (Write Protection Register Group 1)  
        .equ PWM1_WPRG2_Shift, 4   @ bitWidth 1 (Write Protection Register Group 2)  
        .equ PWM1_WPRG3_Shift, 5   @ bitWidth 1 (Write Protection Register Group 3)  
        .equ PWM1_WPRG4_Shift, 6   @ bitWidth 1 (Write Protection Register Group 4)  
        .equ PWM1_WPRG5_Shift, 7   @ bitWidth 1 (Write Protection Register Group 5)  
        .equ PWM1_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ PWM1_WPSR, PWM1_BASE + 0xE8 @ (PWM Write Protection Status Register) 
        .equ PWM1_WPSWS0_Shift, 0   @ bitWidth 1 (Write Protect SW Status)  
        .equ PWM1_WPSWS1_Shift, 1   @ bitWidth 1 (Write Protect SW Status)  
        .equ PWM1_WPSWS2_Shift, 2   @ bitWidth 1 (Write Protect SW Status)  
        .equ PWM1_WPSWS3_Shift, 3   @ bitWidth 1 (Write Protect SW Status)  
        .equ PWM1_WPSWS4_Shift, 4   @ bitWidth 1 (Write Protect SW Status)  
        .equ PWM1_WPSWS5_Shift, 5   @ bitWidth 1 (Write Protect SW Status)  
        .equ PWM1_WPVS_Shift, 7   @ bitWidth 1 (Write Protect Violation Status)  
        .equ PWM1_WPHWS0_Shift, 8   @ bitWidth 1 (Write Protect HW Status)  
        .equ PWM1_WPHWS1_Shift, 9   @ bitWidth 1 (Write Protect HW Status)  
        .equ PWM1_WPHWS2_Shift, 10   @ bitWidth 1 (Write Protect HW Status)  
        .equ PWM1_WPHWS3_Shift, 11   @ bitWidth 1 (Write Protect HW Status)  
        .equ PWM1_WPHWS4_Shift, 12   @ bitWidth 1 (Write Protect HW Status)  
        .equ PWM1_WPHWS5_Shift, 13   @ bitWidth 1 (Write Protect HW Status)  
        .equ PWM1_WPVSRC_Shift, 16   @ bitWidth 16 (Write Protect Violation Source)  
 
    .equ PWM1_CMUPD0, PWM1_BASE + 0x400 @ (PWM Channel Mode Update Register ch_num = 0) 
        .equ PWM1_CPOLUP_Shift, 9   @ bitWidth 1 (Channel Polarity Update)  
        .equ PWM1_CPOLINVUP_Shift, 13   @ bitWidth 1 (Channel Polarity Inversion Update)  
 
    .equ PWM1_CMUPD1, PWM1_BASE + 0x420 @ (PWM Channel Mode Update Register ch_num = 1) 
        .equ PWM1_CPOLUP_Shift, 9   @ bitWidth 1 (Channel Polarity Update)  
        .equ PWM1_CPOLINVUP_Shift, 13   @ bitWidth 1 (Channel Polarity Inversion Update)  
 
    .equ PWM1_ETRG1, PWM1_BASE + 0x42C @ (PWM External Trigger Register trg_num = 1) 
        .equ PWM1_MAXCNT_Shift, 0   @ bitWidth 24 (Maximum Counter value)  
        .equ PWM1_TRGMODE_Shift, 24   @ bitWidth 2 (External Trigger Mode)  
        .equ PWM1_TRGEDGE_Shift, 28   @ bitWidth 1 (Edge Selection)  
        .equ PWM1_TRGFILT_Shift, 29   @ bitWidth 1 (Filtered input)  
        .equ PWM1_TRGSRC_Shift, 30   @ bitWidth 1 (Trigger Source)  
        .equ PWM1_RFEN_Shift, 31   @ bitWidth 1 (Recoverable Fault Enable)  
 
    .equ PWM1_LEBR1, PWM1_BASE + 0x430 @ (PWM Leading-Edge Blanking Register trg_num = 1) 
        .equ PWM1_LEBDELAY_Shift, 0   @ bitWidth 7 (Leading-Edge Blanking Delay for TRGINx)  
        .equ PWM1_PWMLFEN_Shift, 16   @ bitWidth 1 (PWML Falling Edge Enable)  
        .equ PWM1_PWMLREN_Shift, 17   @ bitWidth 1 (PWML Rising Edge Enable)  
        .equ PWM1_PWMHFEN_Shift, 18   @ bitWidth 1 (PWMH Falling Edge Enable)  
        .equ PWM1_PWMHREN_Shift, 19   @ bitWidth 1 (PWMH Rising Edge Enable)  
 
    .equ PWM1_CMUPD2, PWM1_BASE + 0x440 @ (PWM Channel Mode Update Register ch_num = 2) 
        .equ PWM1_CPOLUP_Shift, 9   @ bitWidth 1 (Channel Polarity Update)  
        .equ PWM1_CPOLINVUP_Shift, 13   @ bitWidth 1 (Channel Polarity Inversion Update)  
 
    .equ PWM1_ETRG2, PWM1_BASE + 0x44C @ (PWM External Trigger Register trg_num = 2) 
        .equ PWM1_MAXCNT_Shift, 0   @ bitWidth 24 (Maximum Counter value)  
        .equ PWM1_TRGMODE_Shift, 24   @ bitWidth 2 (External Trigger Mode)  
        .equ PWM1_TRGEDGE_Shift, 28   @ bitWidth 1 (Edge Selection)  
        .equ PWM1_TRGFILT_Shift, 29   @ bitWidth 1 (Filtered input)  
        .equ PWM1_TRGSRC_Shift, 30   @ bitWidth 1 (Trigger Source)  
        .equ PWM1_RFEN_Shift, 31   @ bitWidth 1 (Recoverable Fault Enable)  
 
    .equ PWM1_LEBR2, PWM1_BASE + 0x450 @ (PWM Leading-Edge Blanking Register trg_num = 2) 
        .equ PWM1_LEBDELAY_Shift, 0   @ bitWidth 7 (Leading-Edge Blanking Delay for TRGINx)  
        .equ PWM1_PWMLFEN_Shift, 16   @ bitWidth 1 (PWML Falling Edge Enable)  
        .equ PWM1_PWMLREN_Shift, 17   @ bitWidth 1 (PWML Rising Edge Enable)  
        .equ PWM1_PWMHFEN_Shift, 18   @ bitWidth 1 (PWMH Falling Edge Enable)  
        .equ PWM1_PWMHREN_Shift, 19   @ bitWidth 1 (PWMH Rising Edge Enable)  
 
    .equ PWM1_CMUPD3, PWM1_BASE + 0x460 @ (PWM Channel Mode Update Register ch_num = 3) 
        .equ PWM1_CPOLUP_Shift, 9   @ bitWidth 1 (Channel Polarity Update)  
        .equ PWM1_CPOLINVUP_Shift, 13   @ bitWidth 1 (Channel Polarity Inversion Update)  
 

@=========================== QSPI ===========================@
.equ QSPI_BASE, 0x4007C000 @ (Quad Serial Peripheral Interface) 
    .equ QSPI_CR, QSPI_BASE + 0x00 @ (Control Register) 
        .equ QSPI_QSPIEN_Shift, 0   @ bitWidth 1 (QSPI Enable)  
        .equ QSPI_QSPIDIS_Shift, 1   @ bitWidth 1 (QSPI Disable)  
        .equ QSPI_SWRST_Shift, 7   @ bitWidth 1 (QSPI Software Reset)  
        .equ QSPI_LASTXFER_Shift, 24   @ bitWidth 1 (Last Transfer)  
 
    .equ QSPI_MR, QSPI_BASE + 0x04 @ (Mode Register) 
        .equ QSPI_SMM_Shift, 0   @ bitWidth 1 (Serial Memory Mode)  
        .equ QSPI_LLB_Shift, 1   @ bitWidth 1 (Local Loopback Enable)  
        .equ QSPI_WDRBT_Shift, 2   @ bitWidth 1 (Wait Data Read Before Transfer)  
        .equ QSPI_CSMODE_Shift, 4   @ bitWidth 2 (Chip Select Mode)  
        .equ QSPI_NBBITS_Shift, 8   @ bitWidth 4 (Number Of Bits Per Transfer)  
        .equ QSPI_DLYBCT_Shift, 16   @ bitWidth 8 (Delay Between Consecutive Transfers)  
        .equ QSPI_DLYCS_Shift, 24   @ bitWidth 8 (Minimum Inactive QCS Delay)  
 
    .equ QSPI_RDR, QSPI_BASE + 0x08 @ (Receive Data Register) 
        .equ QSPI_RD_Shift, 0   @ bitWidth 16 (Receive Data)  
 
    .equ QSPI_TDR, QSPI_BASE + 0x0C @ (Transmit Data Register) 
        .equ QSPI_TD_Shift, 0   @ bitWidth 16 (Transmit Data)  
 
    .equ QSPI_SR, QSPI_BASE + 0x10 @ (Status Register) 
        .equ QSPI_RDRF_Shift, 0   @ bitWidth 1 (Receive Data Register Full cleared by reading SPI_RDR)  
        .equ QSPI_TDRE_Shift, 1   @ bitWidth 1 (Transmit Data Register Empty cleared by writing SPI_TDR)  
        .equ QSPI_TXEMPTY_Shift, 2   @ bitWidth 1 (Transmission Registers Empty cleared by writing SPI_TDR)  
        .equ QSPI_OVRES_Shift, 3   @ bitWidth 1 (Overrun Error Status cleared on read)  
        .equ QSPI_CSR_Shift, 8   @ bitWidth 1 (Chip Select Rise cleared on read)  
        .equ QSPI_CSS_Shift, 9   @ bitWidth 1 (Chip Select Status)  
        .equ QSPI_INSTRE_Shift, 10   @ bitWidth 1 (Instruction End Status cleared on read)  
        .equ QSPI_QSPIENS_Shift, 24   @ bitWidth 1 (QSPI Enable Status)  
 
    .equ QSPI_IER, QSPI_BASE + 0x14 @ (Interrupt Enable Register) 
        .equ QSPI_RDRF_Shift, 0   @ bitWidth 1 (Receive Data Register Full Interrupt Enable)  
        .equ QSPI_TDRE_Shift, 1   @ bitWidth 1 (Transmit Data Register Empty Interrupt Enable)  
        .equ QSPI_TXEMPTY_Shift, 2   @ bitWidth 1 (Transmission Registers Empty Enable)  
        .equ QSPI_OVRES_Shift, 3   @ bitWidth 1 (Overrun Error Interrupt Enable)  
        .equ QSPI_CSR_Shift, 8   @ bitWidth 1 (Chip Select Rise Interrupt Enable)  
        .equ QSPI_CSS_Shift, 9   @ bitWidth 1 (Chip Select Status Interrupt Enable)  
        .equ QSPI_INSTRE_Shift, 10   @ bitWidth 1 (Instruction End Interrupt Enable)  
 
    .equ QSPI_IDR, QSPI_BASE + 0x18 @ (Interrupt Disable Register) 
        .equ QSPI_RDRF_Shift, 0   @ bitWidth 1 (Receive Data Register Full Interrupt Disable)  
        .equ QSPI_TDRE_Shift, 1   @ bitWidth 1 (Transmit Data Register Empty Interrupt Disable)  
        .equ QSPI_TXEMPTY_Shift, 2   @ bitWidth 1 (Transmission Registers Empty Disable)  
        .equ QSPI_OVRES_Shift, 3   @ bitWidth 1 (Overrun Error Interrupt Disable)  
        .equ QSPI_CSR_Shift, 8   @ bitWidth 1 (Chip Select Rise Interrupt Disable)  
        .equ QSPI_CSS_Shift, 9   @ bitWidth 1 (Chip Select Status Interrupt Disable)  
        .equ QSPI_INSTRE_Shift, 10   @ bitWidth 1 (Instruction End Interrupt Disable)  
 
    .equ QSPI_IMR, QSPI_BASE + 0x1C @ (Interrupt Mask Register) 
        .equ QSPI_RDRF_Shift, 0   @ bitWidth 1 (Receive Data Register Full Interrupt Mask)  
        .equ QSPI_TDRE_Shift, 1   @ bitWidth 1 (Transmit Data Register Empty Interrupt Mask)  
        .equ QSPI_TXEMPTY_Shift, 2   @ bitWidth 1 (Transmission Registers Empty Mask)  
        .equ QSPI_OVRES_Shift, 3   @ bitWidth 1 (Overrun Error Interrupt Mask)  
        .equ QSPI_CSR_Shift, 8   @ bitWidth 1 (Chip Select Rise Interrupt Mask)  
        .equ QSPI_CSS_Shift, 9   @ bitWidth 1 (Chip Select Status Interrupt Mask)  
        .equ QSPI_INSTRE_Shift, 10   @ bitWidth 1 (Instruction End Interrupt Mask)  
 
    .equ QSPI_SCR, QSPI_BASE + 0x20 @ (Serial Clock Register) 
        .equ QSPI_CPOL_Shift, 0   @ bitWidth 1 (Clock Polarity)  
        .equ QSPI_CPHA_Shift, 1   @ bitWidth 1 (Clock Phase)  
        .equ QSPI_SCBR_Shift, 8   @ bitWidth 8 (Serial Clock Baud Rate)  
        .equ QSPI_DLYBS_Shift, 16   @ bitWidth 8 (Delay Before QSCK)  
 
    .equ QSPI_IAR, QSPI_BASE + 0x30 @ (Instruction Address Register) 
        .equ QSPI_ADDR_Shift, 0   @ bitWidth 32 (Address)  
 
    .equ QSPI_ICR, QSPI_BASE + 0x34 @ (Instruction Code Register) 
        .equ QSPI_INST_Shift, 0   @ bitWidth 8 (Instruction Code)  
        .equ QSPI_OPT_Shift, 16   @ bitWidth 8 (Option Code)  
 
    .equ QSPI_IFR, QSPI_BASE + 0x38 @ (Instruction Frame Register) 
        .equ QSPI_WIDTH_Shift, 0   @ bitWidth 3 (Width of Instruction Code, Address, Option Code and Data)  
        .equ QSPI_INSTEN_Shift, 4   @ bitWidth 1 (Instruction Enable)  
        .equ QSPI_ADDREN_Shift, 5   @ bitWidth 1 (Address Enable)  
        .equ QSPI_OPTEN_Shift, 6   @ bitWidth 1 (Option Enable)  
        .equ QSPI_DATAEN_Shift, 7   @ bitWidth 1 (Data Enable)  
        .equ QSPI_OPTL_Shift, 8   @ bitWidth 2 (Option Code Length)  
        .equ QSPI_ADDRL_Shift, 10   @ bitWidth 1 (Address Length)  
        .equ QSPI_TFRTYP_Shift, 12   @ bitWidth 2 (Data Transfer Type)  
        .equ QSPI_CRM_Shift, 14   @ bitWidth 1 (Continuous Read Mode)  
        .equ QSPI_NBDUM_Shift, 16   @ bitWidth 5 (Number Of Dummy Cycles)  
 
    .equ QSPI_SMR, QSPI_BASE + 0x40 @ (Scrambling Mode Register) 
        .equ QSPI_SCREN_Shift, 0   @ bitWidth 1 (Scrambling/Unscrambling Enable)  
        .equ QSPI_RVDIS_Shift, 1   @ bitWidth 1 (Scrambling/Unscrambling Random Value Disable)  
 
    .equ QSPI_SKR, QSPI_BASE + 0x44 @ (Scrambling Key Register) 
        .equ QSPI_USRK_Shift, 0   @ bitWidth 32 (Scrambling User Key)  
 
    .equ QSPI_WPMR, QSPI_BASE + 0xE4 @ (Write Protection Mode Register) 
        .equ QSPI_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ QSPI_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ QSPI_WPSR, QSPI_BASE + 0xE8 @ (Write Protection Status Register) 
        .equ QSPI_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ QSPI_WPVSRC_Shift, 8   @ bitWidth 8 (Write Protection Violation Source)  
 

@=========================== RSTC ===========================@
.equ RSTC_BASE, 0x400E1800 @ (Reset Controller) 
    .equ RSTC_CR, RSTC_BASE + 0x00 @ (Control Register) 
        .equ RSTC_PROCRST_Shift, 0   @ bitWidth 1 (Processor Reset)  
        .equ RSTC_EXTRST_Shift, 3   @ bitWidth 1 (External Reset)  
        .equ RSTC_KEY_Shift, 24   @ bitWidth 8 (System Reset Key)  
 
    .equ RSTC_SR, RSTC_BASE + 0x04 @ (Status Register) 
        .equ RSTC_URSTS_Shift, 0   @ bitWidth 1 (User Reset Status)  
        .equ RSTC_RSTTYP_Shift, 8   @ bitWidth 3 (Reset Type)  
        .equ RSTC_NRSTL_Shift, 16   @ bitWidth 1 (NRST Pin Level)  
        .equ RSTC_SRCMP_Shift, 17   @ bitWidth 1 (Software Reset Command in Progress)  
 
    .equ RSTC_MR, RSTC_BASE + 0x08 @ (Mode Register) 
        .equ RSTC_URSTEN_Shift, 0   @ bitWidth 1 (User Reset Enable)  
        .equ RSTC_URSTIEN_Shift, 4   @ bitWidth 1 (User Reset Interrupt Enable)  
        .equ RSTC_ERSTL_Shift, 8   @ bitWidth 4 (External Reset Length)  
        .equ RSTC_KEY_Shift, 24   @ bitWidth 8 (Write Access Password)  
 

@=========================== RSWDT ===========================@
.equ RSWDT_BASE, 0x400E1900 @ (Reinforced Safety Watchdog Timer) 
    .equ RSWDT_CR, RSWDT_BASE + 0x00 @ (Control Register) 
        .equ RSWDT_WDRSTT_Shift, 0   @ bitWidth 1 (Watchdog Restart)  
        .equ RSWDT_KEY_Shift, 24   @ bitWidth 8 (Password)  
 
    .equ RSWDT_MR, RSWDT_BASE + 0x04 @ (Mode Register) 
        .equ RSWDT_WDV_Shift, 0   @ bitWidth 12 (Watchdog Counter Value)  
        .equ RSWDT_WDFIEN_Shift, 12   @ bitWidth 1 (Watchdog Fault Interrupt Enable)  
        .equ RSWDT_WDRSTEN_Shift, 13   @ bitWidth 1 (Watchdog Reset Enable)  
        .equ RSWDT_WDDIS_Shift, 15   @ bitWidth 1 (Watchdog Disable)  
        .equ RSWDT_ALLONES_Shift, 16   @ bitWidth 12 (Must Always Be Written with 0xFFF)  
        .equ RSWDT_WDDBGHLT_Shift, 28   @ bitWidth 1 (Watchdog Debug Halt)  
        .equ RSWDT_WDIDLEHLT_Shift, 29   @ bitWidth 1 (Watchdog Idle Halt)  
 
    .equ RSWDT_SR, RSWDT_BASE + 0x08 @ (Status Register) 
        .equ RSWDT_WDUNF_Shift, 0   @ bitWidth 1 (Watchdog Underflow)  
 

@=========================== RTC ===========================@
.equ RTC_BASE, 0x400E1860 @ (Real-time Clock) 
    .equ RTC_CR, RTC_BASE + 0x00 @ (Control Register) 
        .equ RTC_UPDTIM_Shift, 0   @ bitWidth 1 (Update Request Time Register)  
        .equ RTC_UPDCAL_Shift, 1   @ bitWidth 1 (Update Request Calendar Register)  
        .equ RTC_TIMEVSEL_Shift, 8   @ bitWidth 2 (Time Event Selection)  
        .equ RTC_CALEVSEL_Shift, 16   @ bitWidth 2 (Calendar Event Selection)  
 
    .equ RTC_MR, RTC_BASE + 0x04 @ (Mode Register) 
        .equ RTC_HRMOD_Shift, 0   @ bitWidth 1 (12-/24-hour Mode)  
        .equ RTC_PERSIAN_Shift, 1   @ bitWidth 1 (PERSIAN Calendar)  
        .equ RTC_NEGPPM_Shift, 4   @ bitWidth 1 (NEGative PPM Correction)  
        .equ RTC_CORRECTION_Shift, 8   @ bitWidth 7 (Slow Clock Correction)  
        .equ RTC_HIGHPPM_Shift, 15   @ bitWidth 1 (HIGH PPM Correction)  
        .equ RTC_OUT0_Shift, 16   @ bitWidth 3 (RTCOUT0 OutputSource Selection)  
        .equ RTC_OUT1_Shift, 20   @ bitWidth 3 (RTCOUT1 Output Source Selection)  
        .equ RTC_THIGH_Shift, 24   @ bitWidth 3 (High Duration of the Output Pulse)  
        .equ RTC_TPERIOD_Shift, 28   @ bitWidth 2 (Period of the Output Pulse)  
 
    .equ RTC_TIMR, RTC_BASE + 0x08 @ (Time Register) 
        .equ RTC_SEC_Shift, 0   @ bitWidth 7 (Current Second)  
        .equ RTC_MIN_Shift, 8   @ bitWidth 7 (Current Minute)  
        .equ RTC_HOUR_Shift, 16   @ bitWidth 6 (Current Hour)  
        .equ RTC_AMPM_Shift, 22   @ bitWidth 1 (Ante Meridiem Post Meridiem Indicator)  
 
    .equ RTC_CALR, RTC_BASE + 0x0C @ (Calendar Register) 
        .equ RTC_CENT_Shift, 0   @ bitWidth 7 (Current Century)  
        .equ RTC_YEAR_Shift, 8   @ bitWidth 8 (Current Year)  
        .equ RTC_MONTH_Shift, 16   @ bitWidth 5 (Current Month)  
        .equ RTC_DAY_Shift, 21   @ bitWidth 3 (Current Day in Current Week)  
        .equ RTC_DATE_Shift, 24   @ bitWidth 6 (Current Day in Current Month)  
 
    .equ RTC_TIMALR, RTC_BASE + 0x10 @ (Time Alarm Register) 
        .equ RTC_SEC_Shift, 0   @ bitWidth 7 (Second Alarm)  
        .equ RTC_SECEN_Shift, 7   @ bitWidth 1 (Second Alarm Enable)  
        .equ RTC_MIN_Shift, 8   @ bitWidth 7 (Minute Alarm)  
        .equ RTC_MINEN_Shift, 15   @ bitWidth 1 (Minute Alarm Enable)  
        .equ RTC_HOUR_Shift, 16   @ bitWidth 6 (Hour Alarm)  
        .equ RTC_AMPM_Shift, 22   @ bitWidth 1 (AM/PM Indicator)  
        .equ RTC_HOUREN_Shift, 23   @ bitWidth 1 (Hour Alarm Enable)  
 
    .equ RTC_CALALR, RTC_BASE + 0x14 @ (Calendar Alarm Register) 
        .equ RTC_MONTH_Shift, 16   @ bitWidth 5 (Month Alarm)  
        .equ RTC_MTHEN_Shift, 23   @ bitWidth 1 (Month Alarm Enable)  
        .equ RTC_DATE_Shift, 24   @ bitWidth 6 (Date Alarm)  
        .equ RTC_DATEEN_Shift, 31   @ bitWidth 1 (Date Alarm Enable)  
 
    .equ RTC_SR, RTC_BASE + 0x18 @ (Status Register) 
        .equ RTC_ACKUPD_Shift, 0   @ bitWidth 1 (Acknowledge for Update)  
        .equ RTC_ALARM_Shift, 1   @ bitWidth 1 (Alarm Flag)  
        .equ RTC_SEC_Shift, 2   @ bitWidth 1 (Second Event)  
        .equ RTC_TIMEV_Shift, 3   @ bitWidth 1 (Time Event)  
        .equ RTC_CALEV_Shift, 4   @ bitWidth 1 (Calendar Event)  
        .equ RTC_TDERR_Shift, 5   @ bitWidth 1 (Time and/or Date Free Running Error)  
 
    .equ RTC_SCCR, RTC_BASE + 0x1C @ (Status Clear Command Register) 
        .equ RTC_ACKCLR_Shift, 0   @ bitWidth 1 (Acknowledge Clear)  
        .equ RTC_ALRCLR_Shift, 1   @ bitWidth 1 (Alarm Clear)  
        .equ RTC_SECCLR_Shift, 2   @ bitWidth 1 (Second Clear)  
        .equ RTC_TIMCLR_Shift, 3   @ bitWidth 1 (Time Clear)  
        .equ RTC_CALCLR_Shift, 4   @ bitWidth 1 (Calendar Clear)  
        .equ RTC_TDERRCLR_Shift, 5   @ bitWidth 1 (Time and/or Date Free Running Error Clear)  
 
    .equ RTC_IER, RTC_BASE + 0x20 @ (Interrupt Enable Register) 
        .equ RTC_ACKEN_Shift, 0   @ bitWidth 1 (Acknowledge Update Interrupt Enable)  
        .equ RTC_ALREN_Shift, 1   @ bitWidth 1 (Alarm Interrupt Enable)  
        .equ RTC_SECEN_Shift, 2   @ bitWidth 1 (Second Event Interrupt Enable)  
        .equ RTC_TIMEN_Shift, 3   @ bitWidth 1 (Time Event Interrupt Enable)  
        .equ RTC_CALEN_Shift, 4   @ bitWidth 1 (Calendar Event Interrupt Enable)  
        .equ RTC_TDERREN_Shift, 5   @ bitWidth 1 (Time and/or Date Error Interrupt Enable)  
 
    .equ RTC_IDR, RTC_BASE + 0x24 @ (Interrupt Disable Register) 
        .equ RTC_ACKDIS_Shift, 0   @ bitWidth 1 (Acknowledge Update Interrupt Disable)  
        .equ RTC_ALRDIS_Shift, 1   @ bitWidth 1 (Alarm Interrupt Disable)  
        .equ RTC_SECDIS_Shift, 2   @ bitWidth 1 (Second Event Interrupt Disable)  
        .equ RTC_TIMDIS_Shift, 3   @ bitWidth 1 (Time Event Interrupt Disable)  
        .equ RTC_CALDIS_Shift, 4   @ bitWidth 1 (Calendar Event Interrupt Disable)  
        .equ RTC_TDERRDIS_Shift, 5   @ bitWidth 1 (Time and/or Date Error Interrupt Disable)  
 
    .equ RTC_IMR, RTC_BASE + 0x28 @ (Interrupt Mask Register) 
        .equ RTC_ACK_Shift, 0   @ bitWidth 1 (Acknowledge Update Interrupt Mask)  
        .equ RTC_ALR_Shift, 1   @ bitWidth 1 (Alarm Interrupt Mask)  
        .equ RTC_SEC_Shift, 2   @ bitWidth 1 (Second Event Interrupt Mask)  
        .equ RTC_TIM_Shift, 3   @ bitWidth 1 (Time Event Interrupt Mask)  
        .equ RTC_CAL_Shift, 4   @ bitWidth 1 (Calendar Event Interrupt Mask)  
        .equ RTC_TDERR_Shift, 5   @ bitWidth 1 (Time and/or Date Error Mask)  
 
    .equ RTC_VER, RTC_BASE + 0x2C @ (Valid Entry Register) 
        .equ RTC_NVTIM_Shift, 0   @ bitWidth 1 (Non-valid Time)  
        .equ RTC_NVCAL_Shift, 1   @ bitWidth 1 (Non-valid Calendar)  
        .equ RTC_NVTIMALR_Shift, 2   @ bitWidth 1 (Non-valid Time Alarm)  
        .equ RTC_NVCALALR_Shift, 3   @ bitWidth 1 (Non-valid Calendar Alarm)  
 

@=========================== RTT ===========================@
.equ RTT_BASE, 0x400E1830 @ (Real-time Timer) 
    .equ RTT_MR, RTT_BASE + 0x00 @ (Mode Register) 
        .equ RTT_RTPRES_Shift, 0   @ bitWidth 16 (Real-time Timer Prescaler Value)  
        .equ RTT_ALMIEN_Shift, 16   @ bitWidth 1 (Alarm Interrupt Enable)  
        .equ RTT_RTTINCIEN_Shift, 17   @ bitWidth 1 (Real-time Timer Increment Interrupt Enable)  
        .equ RTT_RTTRST_Shift, 18   @ bitWidth 1 (Real-time Timer Restart)  
        .equ RTT_RTTDIS_Shift, 20   @ bitWidth 1 (Real-time Timer Disable)  
        .equ RTT_RTC1HZ_Shift, 24   @ bitWidth 1 (Real-Time Clock 1Hz Clock Selection)  
 
    .equ RTT_AR, RTT_BASE + 0x04 @ (Alarm Register) 
        .equ RTT_ALMV_Shift, 0   @ bitWidth 32 (Alarm Value)  
 
    .equ RTT_VR, RTT_BASE + 0x08 @ (Value Register) 
        .equ RTT_CRTV_Shift, 0   @ bitWidth 32 (Current Real-time Value)  
 
    .equ RTT_SR, RTT_BASE + 0x0C @ (Status Register) 
        .equ RTT_ALMS_Shift, 0   @ bitWidth 1 (Real-time Alarm Status cleared on read)  
        .equ RTT_RTTINC_Shift, 1   @ bitWidth 1 (Prescaler Roll-over Status cleared on read)  
 

@=========================== SPI0 ===========================@
.equ SPI0_BASE, 0x40008000 @ (Serial Peripheral Interface) 
    .equ SPI0_CR, SPI0_BASE + 0x00 @ (Control Register) 
        .equ SPI0_SPIEN_Shift, 0   @ bitWidth 1 (SPI Enable)  
        .equ SPI0_SPIDIS_Shift, 1   @ bitWidth 1 (SPI Disable)  
        .equ SPI0_SWRST_Shift, 7   @ bitWidth 1 (SPI Software Reset)  
        .equ SPI0_LASTXFER_Shift, 24   @ bitWidth 1 (Last Transfer)  
        .equ SPI0_REQCLR_Shift, 12   @ bitWidth 1 (Request to Clear the Comparison Trigger)  
        .equ SPI0_TXFCLR_Shift, 16   @ bitWidth 1 (Transmit FIFO Clear)  
        .equ SPI0_RXFCLR_Shift, 17   @ bitWidth 1 (Receive FIFO Clear)  
        .equ SPI0_FIFOEN_Shift, 30   @ bitWidth 1 (FIFO Enable)  
        .equ SPI0_FIFODIS_Shift, 31   @ bitWidth 1 (FIFO Disable)  
 
    .equ SPI0_MR, SPI0_BASE + 0x04 @ (Mode Register) 
        .equ SPI0_MSTR_Shift, 0   @ bitWidth 1 (Master/Slave Mode)  
        .equ SPI0_PS_Shift, 1   @ bitWidth 1 (Peripheral Select)  
        .equ SPI0_PCSDEC_Shift, 2   @ bitWidth 1 (Chip Select Decode)  
        .equ SPI0_MODFDIS_Shift, 4   @ bitWidth 1 (Mode Fault Detection)  
        .equ SPI0_WDRBT_Shift, 5   @ bitWidth 1 (Wait Data Read Before Transfer)  
        .equ SPI0_LLB_Shift, 7   @ bitWidth 1 (Local Loopback Enable)  
        .equ SPI0_PCS_Shift, 16   @ bitWidth 4 (Peripheral Chip Select)  
        .equ SPI0_DLYBCS_Shift, 24   @ bitWidth 8 (Delay Between Chip Selects)  
 
    .equ SPI0_RDR, SPI0_BASE + 0x08 @ (Receive Data Register) 
        .equ SPI0_RD_Shift, 0   @ bitWidth 16 (Receive Data)  
        .equ SPI0_PCS_Shift, 16   @ bitWidth 4 (Peripheral Chip Select)  
 
    .equ SPI0_TDR, SPI0_BASE + 0x0C @ (Transmit Data Register) 
        .equ SPI0_TD_Shift, 0   @ bitWidth 16 (Transmit Data)  
        .equ SPI0_PCS_Shift, 16   @ bitWidth 4 (Peripheral Chip Select)  
        .equ SPI0_LASTXFER_Shift, 24   @ bitWidth 1 (Last Transfer)  
 
    .equ SPI0_SR, SPI0_BASE + 0x10 @ (Status Register) 
        .equ SPI0_RDRF_Shift, 0   @ bitWidth 1 (Receive Data Register Full cleared by reading SPI_RDR)  
        .equ SPI0_TDRE_Shift, 1   @ bitWidth 1 (Transmit Data Register Empty cleared by writing SPI_TDR)  
        .equ SPI0_MODF_Shift, 2   @ bitWidth 1 (Mode Fault Error cleared on read)  
        .equ SPI0_OVRES_Shift, 3   @ bitWidth 1 (Overrun Error Status cleared on read)  
        .equ SPI0_NSSR_Shift, 8   @ bitWidth 1 (NSS Rising cleared on read)  
        .equ SPI0_TXEMPTY_Shift, 9   @ bitWidth 1 (Transmission Registers Empty cleared by writing SPI_TDR)  
        .equ SPI0_UNDES_Shift, 10   @ bitWidth 1 (Underrun Error Status Slave mode only cleared on read)  
        .equ SPI0_SPIENS_Shift, 16   @ bitWidth 1 (SPI Enable Status)  
 
    .equ SPI0_IER, SPI0_BASE + 0x14 @ (Interrupt Enable Register) 
        .equ SPI0_RDRF_Shift, 0   @ bitWidth 1 (Receive Data Register Full Interrupt Enable)  
        .equ SPI0_TDRE_Shift, 1   @ bitWidth 1 (SPI Transmit Data Register Empty Interrupt Enable)  
        .equ SPI0_MODF_Shift, 2   @ bitWidth 1 (Mode Fault Error Interrupt Enable)  
        .equ SPI0_OVRES_Shift, 3   @ bitWidth 1 (Overrun Error Interrupt Enable)  
        .equ SPI0_NSSR_Shift, 8   @ bitWidth 1 (NSS Rising Interrupt Enable)  
        .equ SPI0_TXEMPTY_Shift, 9   @ bitWidth 1 (Transmission Registers Empty Enable)  
        .equ SPI0_UNDES_Shift, 10   @ bitWidth 1 (Underrun Error Interrupt Enable)  
 
    .equ SPI0_IDR, SPI0_BASE + 0x18 @ (Interrupt Disable Register) 
        .equ SPI0_RDRF_Shift, 0   @ bitWidth 1 (Receive Data Register Full Interrupt Disable)  
        .equ SPI0_TDRE_Shift, 1   @ bitWidth 1 (SPI Transmit Data Register Empty Interrupt Disable)  
        .equ SPI0_MODF_Shift, 2   @ bitWidth 1 (Mode Fault Error Interrupt Disable)  
        .equ SPI0_OVRES_Shift, 3   @ bitWidth 1 (Overrun Error Interrupt Disable)  
        .equ SPI0_NSSR_Shift, 8   @ bitWidth 1 (NSS Rising Interrupt Disable)  
        .equ SPI0_TXEMPTY_Shift, 9   @ bitWidth 1 (Transmission Registers Empty Disable)  
        .equ SPI0_UNDES_Shift, 10   @ bitWidth 1 (Underrun Error Interrupt Disable)  
 
    .equ SPI0_IMR, SPI0_BASE + 0x1C @ (Interrupt Mask Register) 
        .equ SPI0_RDRF_Shift, 0   @ bitWidth 1 (Receive Data Register Full Interrupt Mask)  
        .equ SPI0_TDRE_Shift, 1   @ bitWidth 1 (SPI Transmit Data Register Empty Interrupt Mask)  
        .equ SPI0_MODF_Shift, 2   @ bitWidth 1 (Mode Fault Error Interrupt Mask)  
        .equ SPI0_OVRES_Shift, 3   @ bitWidth 1 (Overrun Error Interrupt Mask)  
        .equ SPI0_NSSR_Shift, 8   @ bitWidth 1 (NSS Rising Interrupt Mask)  
        .equ SPI0_TXEMPTY_Shift, 9   @ bitWidth 1 (Transmission Registers Empty Mask)  
        .equ SPI0_UNDES_Shift, 10   @ bitWidth 1 (Underrun Error Interrupt Mask)  
 
    .equ SPI0_CSR[%s], SPI0_BASE + 0x30 @ (Chip Select Register 0) 
        .equ SPI0_CPOL_Shift, 0   @ bitWidth 1 (Clock Polarity)  
        .equ SPI0_NCPHA_Shift, 1   @ bitWidth 1 (Clock Phase)  
        .equ SPI0_CSNAAT_Shift, 2   @ bitWidth 1 (Chip Select Not Active After Transfer Ignored if CSAAT = 1)  
        .equ SPI0_CSAAT_Shift, 3   @ bitWidth 1 (Chip Select Active After Transfer)  
        .equ SPI0_BITS_Shift, 4   @ bitWidth 4 (Bits Per Transfer)  
        .equ SPI0_SCBR_Shift, 8   @ bitWidth 8 (Serial Clock Bit Rate)  
        .equ SPI0_DLYBS_Shift, 16   @ bitWidth 8 (Delay Before SPCK)  
        .equ SPI0_DLYBCT_Shift, 24   @ bitWidth 8 (Delay Between Consecutive Transfers)  
 
    .equ SPI0_WPMR, SPI0_BASE + 0xE4 @ (Write Protection Mode Register) 
        .equ SPI0_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ SPI0_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ SPI0_WPSR, SPI0_BASE + 0xE8 @ (Write Protection Status Register) 
        .equ SPI0_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ SPI0_WPVSRC_Shift, 8   @ bitWidth 8 (Write Protection Violation Source)  
 

@=========================== SSC ===========================@
.equ SSC_BASE, 0x40004000 @ (Synchronous Serial Controller) 
    .equ SSC_CR, SSC_BASE + 0x0 @ (Control Register) 
        .equ SSC_RXEN_Shift, 0   @ bitWidth 1 (Receive Enable)  
        .equ SSC_RXDIS_Shift, 1   @ bitWidth 1 (Receive Disable)  
        .equ SSC_TXEN_Shift, 8   @ bitWidth 1 (Transmit Enable)  
        .equ SSC_TXDIS_Shift, 9   @ bitWidth 1 (Transmit Disable)  
        .equ SSC_SWRST_Shift, 15   @ bitWidth 1 (Software Reset)  
 
    .equ SSC_CMR, SSC_BASE + 0x4 @ (Clock Mode Register) 
        .equ SSC_DIV_Shift, 0   @ bitWidth 12 (Clock Divider)  
 
    .equ SSC_RCMR, SSC_BASE + 0x10 @ (Receive Clock Mode Register) 
        .equ SSC_CKS_Shift, 0   @ bitWidth 2 (Receive Clock Selection)  
        .equ SSC_CKO_Shift, 2   @ bitWidth 3 (Receive Clock Output Mode Selection)  
        .equ SSC_CKI_Shift, 5   @ bitWidth 1 (Receive Clock Inversion)  
        .equ SSC_CKG_Shift, 6   @ bitWidth 2 (Receive Clock Gating Selection)  
        .equ SSC_START_Shift, 8   @ bitWidth 4 (Receive Start Selection)  
        .equ SSC_STOP_Shift, 12   @ bitWidth 1 (Receive Stop Selection)  
        .equ SSC_STTDLY_Shift, 16   @ bitWidth 8 (Receive Start Delay)  
        .equ SSC_PERIOD_Shift, 24   @ bitWidth 8 (Receive Period Divider Selection)  
 
    .equ SSC_RFMR, SSC_BASE + 0x14 @ (Receive Frame Mode Register) 
        .equ SSC_DATLEN_Shift, 0   @ bitWidth 5 (Data Length)  
        .equ SSC_LOOP_Shift, 5   @ bitWidth 1 (Loop Mode)  
        .equ SSC_MSBF_Shift, 7   @ bitWidth 1 (Most Significant Bit First)  
        .equ SSC_DATNB_Shift, 8   @ bitWidth 4 (Data Number per Frame)  
        .equ SSC_FSLEN_Shift, 16   @ bitWidth 4 (Receive Frame Sync Length)  
        .equ SSC_FSOS_Shift, 20   @ bitWidth 3 (Receive Frame Sync Output Selection)  
        .equ SSC_FSEDGE_Shift, 24   @ bitWidth 1 (Frame Sync Edge Detection)  
        .equ SSC_FSLEN_EXT_Shift, 28   @ bitWidth 4 (FSLEN Field Extension)  
 
    .equ SSC_TCMR, SSC_BASE + 0x18 @ (Transmit Clock Mode Register) 
        .equ SSC_CKS_Shift, 0   @ bitWidth 2 (Transmit Clock Selection)  
        .equ SSC_CKO_Shift, 2   @ bitWidth 3 (Transmit Clock Output Mode Selection)  
        .equ SSC_CKI_Shift, 5   @ bitWidth 1 (Transmit Clock Inversion)  
        .equ SSC_CKG_Shift, 6   @ bitWidth 2 (Transmit Clock Gating Selection)  
        .equ SSC_START_Shift, 8   @ bitWidth 4 (Transmit Start Selection)  
        .equ SSC_STTDLY_Shift, 16   @ bitWidth 8 (Transmit Start Delay)  
        .equ SSC_PERIOD_Shift, 24   @ bitWidth 8 (Transmit Period Divider Selection)  
 
    .equ SSC_TFMR, SSC_BASE + 0x1C @ (Transmit Frame Mode Register) 
        .equ SSC_DATLEN_Shift, 0   @ bitWidth 5 (Data Length)  
        .equ SSC_DATDEF_Shift, 5   @ bitWidth 1 (Data Default Value)  
        .equ SSC_MSBF_Shift, 7   @ bitWidth 1 (Most Significant Bit First)  
        .equ SSC_DATNB_Shift, 8   @ bitWidth 4 (Data Number per Frame)  
        .equ SSC_FSLEN_Shift, 16   @ bitWidth 4 (Transmit Frame Sync Length)  
        .equ SSC_FSOS_Shift, 20   @ bitWidth 3 (Transmit Frame Sync Output Selection)  
        .equ SSC_FSDEN_Shift, 23   @ bitWidth 1 (Frame Sync Data Enable)  
        .equ SSC_FSEDGE_Shift, 24   @ bitWidth 1 (Frame Sync Edge Detection)  
        .equ SSC_FSLEN_EXT_Shift, 28   @ bitWidth 4 (FSLEN Field Extension)  
 
    .equ SSC_RHR, SSC_BASE + 0x20 @ (Receive Holding Register) 
        .equ SSC_RDAT_Shift, 0   @ bitWidth 32 (Receive Data)  
 
    .equ SSC_THR, SSC_BASE + 0x24 @ (Transmit Holding Register) 
        .equ SSC_TDAT_Shift, 0   @ bitWidth 32 (Transmit Data)  
 
    .equ SSC_RSHR, SSC_BASE + 0x30 @ (Receive Sync. Holding Register) 
        .equ SSC_RSDAT_Shift, 0   @ bitWidth 16 (Receive Synchronization Data)  
 
    .equ SSC_TSHR, SSC_BASE + 0x34 @ (Transmit Sync. Holding Register) 
        .equ SSC_TSDAT_Shift, 0   @ bitWidth 16 (Transmit Synchronization Data)  
 
    .equ SSC_RC0R, SSC_BASE + 0x38 @ (Receive Compare 0 Register) 
        .equ SSC_CP0_Shift, 0   @ bitWidth 16 (Receive Compare Data 0)  
 
    .equ SSC_RC1R, SSC_BASE + 0x3C @ (Receive Compare 1 Register) 
        .equ SSC_CP1_Shift, 0   @ bitWidth 16 (Receive Compare Data 1)  
 
    .equ SSC_SR, SSC_BASE + 0x40 @ (Status Register) 
        .equ SSC_TXRDY_Shift, 0   @ bitWidth 1 (Transmit Ready)  
        .equ SSC_TXEMPTY_Shift, 1   @ bitWidth 1 (Transmit Empty)  
        .equ SSC_RXRDY_Shift, 4   @ bitWidth 1 (Receive Ready)  
        .equ SSC_OVRUN_Shift, 5   @ bitWidth 1 (Receive Overrun)  
        .equ SSC_CP0_Shift, 8   @ bitWidth 1 (Compare 0)  
        .equ SSC_CP1_Shift, 9   @ bitWidth 1 (Compare 1)  
        .equ SSC_TXSYN_Shift, 10   @ bitWidth 1 (Transmit Sync)  
        .equ SSC_RXSYN_Shift, 11   @ bitWidth 1 (Receive Sync)  
        .equ SSC_TXEN_Shift, 16   @ bitWidth 1 (Transmit Enable)  
        .equ SSC_RXEN_Shift, 17   @ bitWidth 1 (Receive Enable)  
 
    .equ SSC_IER, SSC_BASE + 0x44 @ (Interrupt Enable Register) 
        .equ SSC_TXRDY_Shift, 0   @ bitWidth 1 (Transmit Ready Interrupt Enable)  
        .equ SSC_TXEMPTY_Shift, 1   @ bitWidth 1 (Transmit Empty Interrupt Enable)  
        .equ SSC_RXRDY_Shift, 4   @ bitWidth 1 (Receive Ready Interrupt Enable)  
        .equ SSC_OVRUN_Shift, 5   @ bitWidth 1 (Receive Overrun Interrupt Enable)  
        .equ SSC_CP0_Shift, 8   @ bitWidth 1 (Compare 0 Interrupt Enable)  
        .equ SSC_CP1_Shift, 9   @ bitWidth 1 (Compare 1 Interrupt Enable)  
        .equ SSC_TXSYN_Shift, 10   @ bitWidth 1 (Tx Sync Interrupt Enable)  
        .equ SSC_RXSYN_Shift, 11   @ bitWidth 1 (Rx Sync Interrupt Enable)  
 
    .equ SSC_IDR, SSC_BASE + 0x48 @ (Interrupt Disable Register) 
        .equ SSC_TXRDY_Shift, 0   @ bitWidth 1 (Transmit Ready Interrupt Disable)  
        .equ SSC_TXEMPTY_Shift, 1   @ bitWidth 1 (Transmit Empty Interrupt Disable)  
        .equ SSC_RXRDY_Shift, 4   @ bitWidth 1 (Receive Ready Interrupt Disable)  
        .equ SSC_OVRUN_Shift, 5   @ bitWidth 1 (Receive Overrun Interrupt Disable)  
        .equ SSC_CP0_Shift, 8   @ bitWidth 1 (Compare 0 Interrupt Disable)  
        .equ SSC_CP1_Shift, 9   @ bitWidth 1 (Compare 1 Interrupt Disable)  
        .equ SSC_TXSYN_Shift, 10   @ bitWidth 1 (Tx Sync Interrupt Enable)  
        .equ SSC_RXSYN_Shift, 11   @ bitWidth 1 (Rx Sync Interrupt Enable)  
 
    .equ SSC_IMR, SSC_BASE + 0x4C @ (Interrupt Mask Register) 
        .equ SSC_TXRDY_Shift, 0   @ bitWidth 1 (Transmit Ready Interrupt Mask)  
        .equ SSC_TXEMPTY_Shift, 1   @ bitWidth 1 (Transmit Empty Interrupt Mask)  
        .equ SSC_RXRDY_Shift, 4   @ bitWidth 1 (Receive Ready Interrupt Mask)  
        .equ SSC_OVRUN_Shift, 5   @ bitWidth 1 (Receive Overrun Interrupt Mask)  
        .equ SSC_CP0_Shift, 8   @ bitWidth 1 (Compare 0 Interrupt Mask)  
        .equ SSC_CP1_Shift, 9   @ bitWidth 1 (Compare 1 Interrupt Mask)  
        .equ SSC_TXSYN_Shift, 10   @ bitWidth 1 (Tx Sync Interrupt Mask)  
        .equ SSC_RXSYN_Shift, 11   @ bitWidth 1 (Rx Sync Interrupt Mask)  
 
    .equ SSC_WPMR, SSC_BASE + 0xE4 @ (Write Protection Mode Register) 
        .equ SSC_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ SSC_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ SSC_WPSR, SSC_BASE + 0xE8 @ (Write Protection Status Register) 
        .equ SSC_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ SSC_WPVSRC_Shift, 8   @ bitWidth 16 (Write Protect Violation Source)  
 

@=========================== SUPC ===========================@
.equ SUPC_BASE, 0x400E1810 @ (Supply Controller) 
    .equ SUPC_CR, SUPC_BASE + 0x00 @ (Supply Controller Control Register) 
        .equ SUPC_VROFF_Shift, 2   @ bitWidth 1 (Voltage Regulator Off)  
        .equ SUPC_XTALSEL_Shift, 3   @ bitWidth 1 (Crystal Oscillator Select)  
        .equ SUPC_KEY_Shift, 24   @ bitWidth 8 (Password)  
 
    .equ SUPC_SMMR, SUPC_BASE + 0x04 @ (Supply Controller Supply Monitor Mode Register) 
        .equ SUPC_SMTH_Shift, 0   @ bitWidth 4 (Supply Monitor Threshold)  
        .equ SUPC_SMSMPL_Shift, 8   @ bitWidth 3 (Supply Monitor Sampling Period)  
        .equ SUPC_SMRSTEN_Shift, 12   @ bitWidth 1 (Supply Monitor Reset Enable)  
        .equ SUPC_SMIEN_Shift, 13   @ bitWidth 1 (Supply Monitor Interrupt Enable)  
 
    .equ SUPC_MR, SUPC_BASE + 0x08 @ (Supply Controller Mode Register) 
        .equ SUPC_BODRSTEN_Shift, 12   @ bitWidth 1 (Brownout Detector Reset Enable)  
        .equ SUPC_BODDIS_Shift, 13   @ bitWidth 1 (Brownout Detector Disable)  
        .equ SUPC_ONREG_Shift, 14   @ bitWidth 1 (Voltage Regulator Enable)  
        .equ SUPC_BKUPRETON_Shift, 17   @ bitWidth 1 (SRAM On In Backup Mode)  
        .equ SUPC_OSCBYPASS_Shift, 20   @ bitWidth 1 (Oscillator Bypass)  
        .equ SUPC_KEY_Shift, 24   @ bitWidth 8 (Password Key)  
 
    .equ SUPC_WUMR, SUPC_BASE + 0x0C @ (Supply Controller Wake-up Mode Register) 
        .equ SUPC_SMEN_Shift, 1   @ bitWidth 1 (Supply Monitor Wake-up Enable)  
        .equ SUPC_RTTEN_Shift, 2   @ bitWidth 1 (Real-time Timer Wake-up Enable)  
        .equ SUPC_RTCEN_Shift, 3   @ bitWidth 1 (Real-time Clock Wake-up Enable)  
        .equ SUPC_LPDBCEN0_Shift, 5   @ bitWidth 1 (Low-power Debouncer Enable WKUP0)  
        .equ SUPC_LPDBCEN1_Shift, 6   @ bitWidth 1 (Low-power Debouncer Enable WKUP1)  
        .equ SUPC_LPDBCCLR_Shift, 7   @ bitWidth 1 (Low-power Debouncer Clear)  
        .equ SUPC_WKUPDBC_Shift, 12   @ bitWidth 3 (Wake-up Inputs Debouncer Period)  
        .equ SUPC_LPDBC_Shift, 16   @ bitWidth 3 (Low-power Debouncer Period)  
 
    .equ SUPC_WUIR, SUPC_BASE + 0x10 @ (Supply Controller Wake-up Inputs Register) 
        .equ SUPC_WKUPEN0_Shift, 0   @ bitWidth 1 (Wake-up Input Enable 0 to 0)  
        .equ SUPC_WKUPEN1_Shift, 1   @ bitWidth 1 (Wake-up Input Enable 0 to 1)  
        .equ SUPC_WKUPEN2_Shift, 2   @ bitWidth 1 (Wake-up Input Enable 0 to 2)  
        .equ SUPC_WKUPEN3_Shift, 3   @ bitWidth 1 (Wake-up Input Enable 0 to 3)  
        .equ SUPC_WKUPEN4_Shift, 4   @ bitWidth 1 (Wake-up Input Enable 0 to 4)  
        .equ SUPC_WKUPEN5_Shift, 5   @ bitWidth 1 (Wake-up Input Enable 0 to 5)  
        .equ SUPC_WKUPEN6_Shift, 6   @ bitWidth 1 (Wake-up Input Enable 0 to 6)  
        .equ SUPC_WKUPEN7_Shift, 7   @ bitWidth 1 (Wake-up Input Enable 0 to 7)  
        .equ SUPC_WKUPEN8_Shift, 8   @ bitWidth 1 (Wake-up Input Enable 0 to 8)  
        .equ SUPC_WKUPEN9_Shift, 9   @ bitWidth 1 (Wake-up Input Enable 0 to 9)  
        .equ SUPC_WKUPEN10_Shift, 10   @ bitWidth 1 (Wake-up Input Enable 0 to 10)  
        .equ SUPC_WKUPEN11_Shift, 11   @ bitWidth 1 (Wake-up Input Enable 0 to 11)  
        .equ SUPC_WKUPEN12_Shift, 12   @ bitWidth 1 (Wake-up Input Enable 0 to 12)  
        .equ SUPC_WKUPEN13_Shift, 13   @ bitWidth 1 (Wake-up Input Enable 0 to 13)  
        .equ SUPC_WKUPT0_Shift, 16   @ bitWidth 1 (Wake-up Input Type 0 to 0)  
        .equ SUPC_WKUPT1_Shift, 17   @ bitWidth 1 (Wake-up Input Type 0 to 1)  
        .equ SUPC_WKUPT2_Shift, 18   @ bitWidth 1 (Wake-up Input Type 0 to 2)  
        .equ SUPC_WKUPT3_Shift, 19   @ bitWidth 1 (Wake-up Input Type 0 to 3)  
        .equ SUPC_WKUPT4_Shift, 20   @ bitWidth 1 (Wake-up Input Type 0 to 4)  
        .equ SUPC_WKUPT5_Shift, 21   @ bitWidth 1 (Wake-up Input Type 0 to 5)  
        .equ SUPC_WKUPT6_Shift, 22   @ bitWidth 1 (Wake-up Input Type 0 to 6)  
        .equ SUPC_WKUPT7_Shift, 23   @ bitWidth 1 (Wake-up Input Type 0 to 7)  
        .equ SUPC_WKUPT8_Shift, 24   @ bitWidth 1 (Wake-up Input Type 0 to 8)  
        .equ SUPC_WKUPT9_Shift, 25   @ bitWidth 1 (Wake-up Input Type 0 to 9)  
        .equ SUPC_WKUPT10_Shift, 26   @ bitWidth 1 (Wake-up Input Type 0 to 10)  
        .equ SUPC_WKUPT11_Shift, 27   @ bitWidth 1 (Wake-up Input Type 0 to 11)  
        .equ SUPC_WKUPT12_Shift, 28   @ bitWidth 1 (Wake-up Input Type 0 to 12)  
        .equ SUPC_WKUPT13_Shift, 29   @ bitWidth 1 (Wake-up Input Type 0 to 13)  
 
    .equ SUPC_SR, SUPC_BASE + 0x14 @ (Supply Controller Status Register) 
        .equ SUPC_WKUPS_Shift, 1   @ bitWidth 1 (WKUP Wake-up Status cleared on read)  
        .equ SUPC_SMWS_Shift, 2   @ bitWidth 1 (Supply Monitor Detection Wake-up Status cleared on read)  
        .equ SUPC_BODRSTS_Shift, 3   @ bitWidth 1 (Brownout Detector Reset Status cleared on read)  
        .equ SUPC_SMRSTS_Shift, 4   @ bitWidth 1 (Supply Monitor Reset Status cleared on read)  
        .equ SUPC_SMS_Shift, 5   @ bitWidth 1 (Supply Monitor Status cleared on read)  
        .equ SUPC_SMOS_Shift, 6   @ bitWidth 1 (Supply Monitor Output Status)  
        .equ SUPC_OSCSEL_Shift, 7   @ bitWidth 1 (32-kHz Oscillator Selection Status)  
        .equ SUPC_LPDBCS0_Shift, 13   @ bitWidth 1 (Low-power Debouncer Wake-up Status on WKUP0 cleared on read)  
        .equ SUPC_LPDBCS1_Shift, 14   @ bitWidth 1 (Low-power Debouncer Wake-up Status on WKUP1 cleared on read)  
        .equ SUPC_WKUPIS0_Shift, 16   @ bitWidth 1 (WKUPx Input Status cleared on read)  
        .equ SUPC_WKUPIS1_Shift, 17   @ bitWidth 1 (WKUPx Input Status cleared on read)  
        .equ SUPC_WKUPIS2_Shift, 18   @ bitWidth 1 (WKUPx Input Status cleared on read)  
        .equ SUPC_WKUPIS3_Shift, 19   @ bitWidth 1 (WKUPx Input Status cleared on read)  
        .equ SUPC_WKUPIS4_Shift, 20   @ bitWidth 1 (WKUPx Input Status cleared on read)  
        .equ SUPC_WKUPIS5_Shift, 21   @ bitWidth 1 (WKUPx Input Status cleared on read)  
        .equ SUPC_WKUPIS6_Shift, 22   @ bitWidth 1 (WKUPx Input Status cleared on read)  
        .equ SUPC_WKUPIS7_Shift, 23   @ bitWidth 1 (WKUPx Input Status cleared on read)  
        .equ SUPC_WKUPIS8_Shift, 24   @ bitWidth 1 (WKUPx Input Status cleared on read)  
        .equ SUPC_WKUPIS9_Shift, 25   @ bitWidth 1 (WKUPx Input Status cleared on read)  
        .equ SUPC_WKUPIS10_Shift, 26   @ bitWidth 1 (WKUPx Input Status cleared on read)  
        .equ SUPC_WKUPIS11_Shift, 27   @ bitWidth 1 (WKUPx Input Status cleared on read)  
        .equ SUPC_WKUPIS12_Shift, 28   @ bitWidth 1 (WKUPx Input Status cleared on read)  
        .equ SUPC_WKUPIS13_Shift, 29   @ bitWidth 1 (WKUPx Input Status cleared on read)  
 

@=========================== TC0 ===========================@
.equ TC0_BASE, 0x4000C000 @ (Timer Counter) 
    .equ TC0_BCR, TC0_BASE + 0xC0 @ (Block Control Register) 
        .equ TC0_SYNC_Shift, 0   @ bitWidth 1 (Synchro Command)  
 
    .equ TC0_BMR, TC0_BASE + 0xC4 @ (Block Mode Register) 
        .equ TC0_TC0XC0S_Shift, 0   @ bitWidth 2 (External Clock Signal 0 Selection)  
        .equ TC0_TC1XC1S_Shift, 2   @ bitWidth 2 (External Clock Signal 1 Selection)  
        .equ TC0_TC2XC2S_Shift, 4   @ bitWidth 2 (External Clock Signal 2 Selection)  
        .equ TC0_QDEN_Shift, 8   @ bitWidth 1 (Quadrature Decoder Enabled)  
        .equ TC0_POSEN_Shift, 9   @ bitWidth 1 (Position Enabled)  
        .equ TC0_SPEEDEN_Shift, 10   @ bitWidth 1 (Speed Enabled)  
        .equ TC0_QDTRANS_Shift, 11   @ bitWidth 1 (Quadrature Decoding Transparent)  
        .equ TC0_EDGPHA_Shift, 12   @ bitWidth 1 (Edge on PHA Count Mode)  
        .equ TC0_INVA_Shift, 13   @ bitWidth 1 (Inverted PHA)  
        .equ TC0_INVB_Shift, 14   @ bitWidth 1 (Inverted PHB)  
        .equ TC0_INVIDX_Shift, 15   @ bitWidth 1 (Inverted Index)  
        .equ TC0_SWAP_Shift, 16   @ bitWidth 1 (Swap PHA and PHB)  
        .equ TC0_IDXPHB_Shift, 17   @ bitWidth 1 (Index Pin is PHB Pin)  
        .equ TC0_MAXFILT_Shift, 20   @ bitWidth 6 (Maximum Filter)  
 
    .equ TC0_QIER, TC0_BASE + 0xC8 @ (QDEC Interrupt Enable Register) 
        .equ TC0_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC0_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC0_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
 
    .equ TC0_QIDR, TC0_BASE + 0xCC @ (QDEC Interrupt Disable Register) 
        .equ TC0_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC0_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC0_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
 
    .equ TC0_QIMR, TC0_BASE + 0xD0 @ (QDEC Interrupt Mask Register) 
        .equ TC0_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC0_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC0_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
 
    .equ TC0_QISR, TC0_BASE + 0xD4 @ (QDEC Interrupt Status Register) 
        .equ TC0_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC0_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC0_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
        .equ TC0_DIR_Shift, 8   @ bitWidth 1 (Direction)  
 
    .equ TC0_FMR, TC0_BASE + 0xD8 @ (Fault Mode Register) 
        .equ TC0_ENCF0_Shift, 0   @ bitWidth 1 (Enable Compare Fault Channel 0)  
        .equ TC0_ENCF1_Shift, 1   @ bitWidth 1 (Enable Compare Fault Channel 1)  
 
    .equ TC0_WPMR, TC0_BASE + 0xE4 @ (Write Protection Mode Register) 
        .equ TC0_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ TC0_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 

@=========================== TC1 ===========================@
.equ TC1_BASE, 0x40010000 @ (Timer Counter) 
    .equ TC1_BCR, TC1_BASE + 0xC0 @ (Block Control Register) 
        .equ TC1_SYNC_Shift, 0   @ bitWidth 1 (Synchro Command)  
 
    .equ TC1_BMR, TC1_BASE + 0xC4 @ (Block Mode Register) 
        .equ TC1_TC0XC0S_Shift, 0   @ bitWidth 2 (External Clock Signal 0 Selection)  
        .equ TC1_TC1XC1S_Shift, 2   @ bitWidth 2 (External Clock Signal 1 Selection)  
        .equ TC1_TC2XC2S_Shift, 4   @ bitWidth 2 (External Clock Signal 2 Selection)  
        .equ TC1_QDEN_Shift, 8   @ bitWidth 1 (Quadrature Decoder Enabled)  
        .equ TC1_POSEN_Shift, 9   @ bitWidth 1 (Position Enabled)  
        .equ TC1_SPEEDEN_Shift, 10   @ bitWidth 1 (Speed Enabled)  
        .equ TC1_QDTRANS_Shift, 11   @ bitWidth 1 (Quadrature Decoding Transparent)  
        .equ TC1_EDGPHA_Shift, 12   @ bitWidth 1 (Edge on PHA Count Mode)  
        .equ TC1_INVA_Shift, 13   @ bitWidth 1 (Inverted PHA)  
        .equ TC1_INVB_Shift, 14   @ bitWidth 1 (Inverted PHB)  
        .equ TC1_INVIDX_Shift, 15   @ bitWidth 1 (Inverted Index)  
        .equ TC1_SWAP_Shift, 16   @ bitWidth 1 (Swap PHA and PHB)  
        .equ TC1_IDXPHB_Shift, 17   @ bitWidth 1 (Index Pin is PHB Pin)  
        .equ TC1_MAXFILT_Shift, 20   @ bitWidth 6 (Maximum Filter)  
 
    .equ TC1_QIER, TC1_BASE + 0xC8 @ (QDEC Interrupt Enable Register) 
        .equ TC1_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC1_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC1_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
 
    .equ TC1_QIDR, TC1_BASE + 0xCC @ (QDEC Interrupt Disable Register) 
        .equ TC1_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC1_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC1_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
 
    .equ TC1_QIMR, TC1_BASE + 0xD0 @ (QDEC Interrupt Mask Register) 
        .equ TC1_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC1_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC1_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
 
    .equ TC1_QISR, TC1_BASE + 0xD4 @ (QDEC Interrupt Status Register) 
        .equ TC1_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC1_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC1_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
        .equ TC1_DIR_Shift, 8   @ bitWidth 1 (Direction)  
 
    .equ TC1_FMR, TC1_BASE + 0xD8 @ (Fault Mode Register) 
        .equ TC1_ENCF0_Shift, 0   @ bitWidth 1 (Enable Compare Fault Channel 0)  
        .equ TC1_ENCF1_Shift, 1   @ bitWidth 1 (Enable Compare Fault Channel 1)  
 
    .equ TC1_WPMR, TC1_BASE + 0xE4 @ (Write Protection Mode Register) 
        .equ TC1_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ TC1_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 

@=========================== TC2 ===========================@
.equ TC2_BASE, 0x40014000 @ (Timer Counter) 
    .equ TC2_BCR, TC2_BASE + 0xC0 @ (Block Control Register) 
        .equ TC2_SYNC_Shift, 0   @ bitWidth 1 (Synchro Command)  
 
    .equ TC2_BMR, TC2_BASE + 0xC4 @ (Block Mode Register) 
        .equ TC2_TC0XC0S_Shift, 0   @ bitWidth 2 (External Clock Signal 0 Selection)  
        .equ TC2_TC1XC1S_Shift, 2   @ bitWidth 2 (External Clock Signal 1 Selection)  
        .equ TC2_TC2XC2S_Shift, 4   @ bitWidth 2 (External Clock Signal 2 Selection)  
        .equ TC2_QDEN_Shift, 8   @ bitWidth 1 (Quadrature Decoder Enabled)  
        .equ TC2_POSEN_Shift, 9   @ bitWidth 1 (Position Enabled)  
        .equ TC2_SPEEDEN_Shift, 10   @ bitWidth 1 (Speed Enabled)  
        .equ TC2_QDTRANS_Shift, 11   @ bitWidth 1 (Quadrature Decoding Transparent)  
        .equ TC2_EDGPHA_Shift, 12   @ bitWidth 1 (Edge on PHA Count Mode)  
        .equ TC2_INVA_Shift, 13   @ bitWidth 1 (Inverted PHA)  
        .equ TC2_INVB_Shift, 14   @ bitWidth 1 (Inverted PHB)  
        .equ TC2_INVIDX_Shift, 15   @ bitWidth 1 (Inverted Index)  
        .equ TC2_SWAP_Shift, 16   @ bitWidth 1 (Swap PHA and PHB)  
        .equ TC2_IDXPHB_Shift, 17   @ bitWidth 1 (Index Pin is PHB Pin)  
        .equ TC2_MAXFILT_Shift, 20   @ bitWidth 6 (Maximum Filter)  
 
    .equ TC2_QIER, TC2_BASE + 0xC8 @ (QDEC Interrupt Enable Register) 
        .equ TC2_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC2_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC2_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
 
    .equ TC2_QIDR, TC2_BASE + 0xCC @ (QDEC Interrupt Disable Register) 
        .equ TC2_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC2_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC2_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
 
    .equ TC2_QIMR, TC2_BASE + 0xD0 @ (QDEC Interrupt Mask Register) 
        .equ TC2_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC2_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC2_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
 
    .equ TC2_QISR, TC2_BASE + 0xD4 @ (QDEC Interrupt Status Register) 
        .equ TC2_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC2_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC2_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
        .equ TC2_DIR_Shift, 8   @ bitWidth 1 (Direction)  
 
    .equ TC2_FMR, TC2_BASE + 0xD8 @ (Fault Mode Register) 
        .equ TC2_ENCF0_Shift, 0   @ bitWidth 1 (Enable Compare Fault Channel 0)  
        .equ TC2_ENCF1_Shift, 1   @ bitWidth 1 (Enable Compare Fault Channel 1)  
 
    .equ TC2_WPMR, TC2_BASE + 0xE4 @ (Write Protection Mode Register) 
        .equ TC2_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ TC2_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 

@=========================== TC3 ===========================@
.equ TC3_BASE, 0x40054000 @ (Timer Counter) 
    .equ TC3_BCR, TC3_BASE + 0xC0 @ (Block Control Register) 
        .equ TC3_SYNC_Shift, 0   @ bitWidth 1 (Synchro Command)  
 
    .equ TC3_BMR, TC3_BASE + 0xC4 @ (Block Mode Register) 
        .equ TC3_TC0XC0S_Shift, 0   @ bitWidth 2 (External Clock Signal 0 Selection)  
        .equ TC3_TC1XC1S_Shift, 2   @ bitWidth 2 (External Clock Signal 1 Selection)  
        .equ TC3_TC2XC2S_Shift, 4   @ bitWidth 2 (External Clock Signal 2 Selection)  
        .equ TC3_QDEN_Shift, 8   @ bitWidth 1 (Quadrature Decoder Enabled)  
        .equ TC3_POSEN_Shift, 9   @ bitWidth 1 (Position Enabled)  
        .equ TC3_SPEEDEN_Shift, 10   @ bitWidth 1 (Speed Enabled)  
        .equ TC3_QDTRANS_Shift, 11   @ bitWidth 1 (Quadrature Decoding Transparent)  
        .equ TC3_EDGPHA_Shift, 12   @ bitWidth 1 (Edge on PHA Count Mode)  
        .equ TC3_INVA_Shift, 13   @ bitWidth 1 (Inverted PHA)  
        .equ TC3_INVB_Shift, 14   @ bitWidth 1 (Inverted PHB)  
        .equ TC3_INVIDX_Shift, 15   @ bitWidth 1 (Inverted Index)  
        .equ TC3_SWAP_Shift, 16   @ bitWidth 1 (Swap PHA and PHB)  
        .equ TC3_IDXPHB_Shift, 17   @ bitWidth 1 (Index Pin is PHB Pin)  
        .equ TC3_MAXFILT_Shift, 20   @ bitWidth 6 (Maximum Filter)  
 
    .equ TC3_QIER, TC3_BASE + 0xC8 @ (QDEC Interrupt Enable Register) 
        .equ TC3_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC3_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC3_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
 
    .equ TC3_QIDR, TC3_BASE + 0xCC @ (QDEC Interrupt Disable Register) 
        .equ TC3_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC3_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC3_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
 
    .equ TC3_QIMR, TC3_BASE + 0xD0 @ (QDEC Interrupt Mask Register) 
        .equ TC3_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC3_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC3_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
 
    .equ TC3_QISR, TC3_BASE + 0xD4 @ (QDEC Interrupt Status Register) 
        .equ TC3_IDX_Shift, 0   @ bitWidth 1 (Index)  
        .equ TC3_DIRCHG_Shift, 1   @ bitWidth 1 (Direction Change)  
        .equ TC3_QERR_Shift, 2   @ bitWidth 1 (Quadrature Error)  
        .equ TC3_DIR_Shift, 8   @ bitWidth 1 (Direction)  
 
    .equ TC3_FMR, TC3_BASE + 0xD8 @ (Fault Mode Register) 
        .equ TC3_ENCF0_Shift, 0   @ bitWidth 1 (Enable Compare Fault Channel 0)  
        .equ TC3_ENCF1_Shift, 1   @ bitWidth 1 (Enable Compare Fault Channel 1)  
 
    .equ TC3_WPMR, TC3_BASE + 0xE4 @ (Write Protection Mode Register) 
        .equ TC3_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ TC3_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 

@=========================== TRNG ===========================@
.equ TRNG_BASE, 0x40070000 @ (True Random Number Generator) 
    .equ TRNG_CR, TRNG_BASE + 0x00 @ (Control Register) 
        .equ TRNG_ENABLE_Shift, 0   @ bitWidth 1 (Enables the TRNG to Provide Random Values)  
        .equ TRNG_KEY_Shift, 8   @ bitWidth 24 (Security Key)  
 
    .equ TRNG_IER, TRNG_BASE + 0x10 @ (Interrupt Enable Register) 
        .equ TRNG_DATRDY_Shift, 0   @ bitWidth 1 (Data Ready Interrupt Enable)  
 
    .equ TRNG_IDR, TRNG_BASE + 0x14 @ (Interrupt Disable Register) 
        .equ TRNG_DATRDY_Shift, 0   @ bitWidth 1 (Data Ready Interrupt Disable)  
 
    .equ TRNG_IMR, TRNG_BASE + 0x18 @ (Interrupt Mask Register) 
        .equ TRNG_DATRDY_Shift, 0   @ bitWidth 1 (Data Ready Interrupt Mask)  
 
    .equ TRNG_ISR, TRNG_BASE + 0x1C @ (Interrupt Status Register) 
        .equ TRNG_DATRDY_Shift, 0   @ bitWidth 1 (Data Ready)  
 
    .equ TRNG_ODATA, TRNG_BASE + 0x50 @ (Output Data Register) 
        .equ TRNG_ODATA_Shift, 0   @ bitWidth 32 (Output Data)  
 

@=========================== TWIHS0 ===========================@
.equ TWIHS0_BASE, 0x40018000 @ (Two-wire Interface High Speed) 
    .equ TWIHS0_CR, TWIHS0_BASE + 0x00 @ (Control Register) 
        .equ TWIHS0_START_Shift, 0   @ bitWidth 1 (Send a START Condition)  
        .equ TWIHS0_STOP_Shift, 1   @ bitWidth 1 (Send a STOP Condition)  
        .equ TWIHS0_MSEN_Shift, 2   @ bitWidth 1 (TWIHS Master Mode Enabled)  
        .equ TWIHS0_MSDIS_Shift, 3   @ bitWidth 1 (TWIHS Master Mode Disabled)  
        .equ TWIHS0_SVEN_Shift, 4   @ bitWidth 1 (TWIHS Slave Mode Enabled)  
        .equ TWIHS0_SVDIS_Shift, 5   @ bitWidth 1 (TWIHS Slave Mode Disabled)  
        .equ TWIHS0_QUICK_Shift, 6   @ bitWidth 1 (SMBus Quick Command)  
        .equ TWIHS0_SWRST_Shift, 7   @ bitWidth 1 (Software Reset)  
        .equ TWIHS0_HSEN_Shift, 8   @ bitWidth 1 (TWIHS High-Speed Mode Enabled)  
        .equ TWIHS0_HSDIS_Shift, 9   @ bitWidth 1 (TWIHS High-Speed Mode Disabled)  
        .equ TWIHS0_SMBEN_Shift, 10   @ bitWidth 1 (SMBus Mode Enabled)  
        .equ TWIHS0_SMBDIS_Shift, 11   @ bitWidth 1 (SMBus Mode Disabled)  
        .equ TWIHS0_PECEN_Shift, 12   @ bitWidth 1 (Packet Error Checking Enable)  
        .equ TWIHS0_PECDIS_Shift, 13   @ bitWidth 1 (Packet Error Checking Disable)  
        .equ TWIHS0_PECRQ_Shift, 14   @ bitWidth 1 (PEC Request)  
        .equ TWIHS0_CLEAR_Shift, 15   @ bitWidth 1 (Bus CLEAR Command)  
        .equ TWIHS0_ACMEN_Shift, 16   @ bitWidth 1 (Alternative Command Mode Enable)  
        .equ TWIHS0_ACMDIS_Shift, 17   @ bitWidth 1 (Alternative Command Mode Disable)  
        .equ TWIHS0_THRCLR_Shift, 24   @ bitWidth 1 (Transmit Holding Register Clear)  
        .equ TWIHS0_LOCKCLR_Shift, 26   @ bitWidth 1 (Lock Clear)  
        .equ TWIHS0_FIFOEN_Shift, 28   @ bitWidth 1 (FIFO Enable)  
        .equ TWIHS0_FIFODIS_Shift, 29   @ bitWidth 1 (FIFO Disable)  
 
    .equ TWIHS0_MMR, TWIHS0_BASE + 0x04 @ (Master Mode Register) 
        .equ TWIHS0_IADRSZ_Shift, 8   @ bitWidth 2 (Internal Device Address Size)  
        .equ TWIHS0_MREAD_Shift, 12   @ bitWidth 1 (Master Read Direction)  
        .equ TWIHS0_DADR_Shift, 16   @ bitWidth 7 (Device Address)  
 
    .equ TWIHS0_SMR, TWIHS0_BASE + 0x08 @ (Slave Mode Register) 
        .equ TWIHS0_NACKEN_Shift, 0   @ bitWidth 1 (Slave Receiver Data Phase NACK enable)  
        .equ TWIHS0_SMDA_Shift, 2   @ bitWidth 1 (SMBus Default Address)  
        .equ TWIHS0_SMHH_Shift, 3   @ bitWidth 1 (SMBus Host Header)  
        .equ TWIHS0_SCLWSDIS_Shift, 6   @ bitWidth 1 (Clock Wait State Disable)  
        .equ TWIHS0_MASK_Shift, 8   @ bitWidth 7 (Slave Address Mask)  
        .equ TWIHS0_SADR_Shift, 16   @ bitWidth 7 (Slave Address)  
        .equ TWIHS0_SADR1EN_Shift, 28   @ bitWidth 1 (Slave Address 1 Enable)  
        .equ TWIHS0_SADR2EN_Shift, 29   @ bitWidth 1 (Slave Address 2 Enable)  
        .equ TWIHS0_SADR3EN_Shift, 30   @ bitWidth 1 (Slave Address 3 Enable)  
        .equ TWIHS0_DATAMEN_Shift, 31   @ bitWidth 1 (Data Matching Enable)  
 
    .equ TWIHS0_IADR, TWIHS0_BASE + 0x0C @ (Internal Address Register) 
        .equ TWIHS0_IADR_Shift, 0   @ bitWidth 24 (Internal Address)  
 
    .equ TWIHS0_CWGR, TWIHS0_BASE + 0x10 @ (Clock Waveform Generator Register) 
        .equ TWIHS0_CLDIV_Shift, 0   @ bitWidth 8 (Clock Low Divider)  
        .equ TWIHS0_CHDIV_Shift, 8   @ bitWidth 8 (Clock High Divider)  
        .equ TWIHS0_CKDIV_Shift, 16   @ bitWidth 3 (Clock Divider)  
        .equ TWIHS0_HOLD_Shift, 24   @ bitWidth 6 (TWD Hold Time Versus TWCK Falling)  
 
    .equ TWIHS0_SR, TWIHS0_BASE + 0x20 @ (Status Register) 
        .equ TWIHS0_TXCOMP_Shift, 0   @ bitWidth 1 (Transmission Completed cleared by writing TWIHS_THR)  
        .equ TWIHS0_RXRDY_Shift, 1   @ bitWidth 1 (Receive Holding Register Ready cleared by reading TWIHS_RHR)  
        .equ TWIHS0_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Holding Register Ready cleared by writing TWIHS_THR)  
        .equ TWIHS0_SVREAD_Shift, 3   @ bitWidth 1 (Slave Read)  
        .equ TWIHS0_SVACC_Shift, 4   @ bitWidth 1 (Slave Access)  
        .equ TWIHS0_GACC_Shift, 5   @ bitWidth 1 (General Call Access cleared on read)  
        .equ TWIHS0_OVRE_Shift, 6   @ bitWidth 1 (Overrun Error cleared on read)  
        .equ TWIHS0_UNRE_Shift, 7   @ bitWidth 1 (Underrun Error cleared on read)  
        .equ TWIHS0_NACK_Shift, 8   @ bitWidth 1 (Not Acknowledged cleared on read)  
        .equ TWIHS0_ARBLST_Shift, 9   @ bitWidth 1 (Arbitration Lost cleared on read)  
        .equ TWIHS0_SCLWS_Shift, 10   @ bitWidth 1 (Clock Wait State)  
        .equ TWIHS0_EOSACC_Shift, 11   @ bitWidth 1 (End Of Slave Access cleared on read)  
        .equ TWIHS0_MCACK_Shift, 16   @ bitWidth 1 (Master Code Acknowledge cleared on read)  
        .equ TWIHS0_TOUT_Shift, 18   @ bitWidth 1 (Timeout Error cleared on read)  
        .equ TWIHS0_PECERR_Shift, 19   @ bitWidth 1 (PEC Error cleared on read)  
        .equ TWIHS0_SMBDAM_Shift, 20   @ bitWidth 1 (SMBus Default Address Match cleared on read)  
        .equ TWIHS0_SMBHHM_Shift, 21   @ bitWidth 1 (SMBus Host Header Address Match cleared on read)  
        .equ TWIHS0_SCL_Shift, 24   @ bitWidth 1 (SCL Line Value)  
        .equ TWIHS0_SDA_Shift, 25   @ bitWidth 1 (SDA Line Value)  
 
    .equ TWIHS0_IER, TWIHS0_BASE + 0x24 @ (Interrupt Enable Register) 
        .equ TWIHS0_TXCOMP_Shift, 0   @ bitWidth 1 (Transmission Completed Interrupt Enable)  
        .equ TWIHS0_RXRDY_Shift, 1   @ bitWidth 1 (Receive Holding Register Ready Interrupt Enable)  
        .equ TWIHS0_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Holding Register Ready Interrupt Enable)  
        .equ TWIHS0_SVACC_Shift, 4   @ bitWidth 1 (Slave Access Interrupt Enable)  
        .equ TWIHS0_GACC_Shift, 5   @ bitWidth 1 (General Call Access Interrupt Enable)  
        .equ TWIHS0_OVRE_Shift, 6   @ bitWidth 1 (Overrun Error Interrupt Enable)  
        .equ TWIHS0_UNRE_Shift, 7   @ bitWidth 1 (Underrun Error Interrupt Enable)  
        .equ TWIHS0_NACK_Shift, 8   @ bitWidth 1 (Not Acknowledge Interrupt Enable)  
        .equ TWIHS0_ARBLST_Shift, 9   @ bitWidth 1 (Arbitration Lost Interrupt Enable)  
        .equ TWIHS0_SCL_WS_Shift, 10   @ bitWidth 1 (Clock Wait State Interrupt Enable)  
        .equ TWIHS0_EOSACC_Shift, 11   @ bitWidth 1 (End Of Slave Access Interrupt Enable)  
        .equ TWIHS0_MCACK_Shift, 16   @ bitWidth 1 (Master Code Acknowledge Interrupt Enable)  
        .equ TWIHS0_TOUT_Shift, 18   @ bitWidth 1 (Timeout Error Interrupt Enable)  
        .equ TWIHS0_PECERR_Shift, 19   @ bitWidth 1 (PEC Error Interrupt Enable)  
        .equ TWIHS0_SMBDAM_Shift, 20   @ bitWidth 1 (SMBus Default Address Match Interrupt Enable)  
        .equ TWIHS0_SMBHHM_Shift, 21   @ bitWidth 1 (SMBus Host Header Address Match Interrupt Enable)  
 
    .equ TWIHS0_IDR, TWIHS0_BASE + 0x28 @ (Interrupt Disable Register) 
        .equ TWIHS0_TXCOMP_Shift, 0   @ bitWidth 1 (Transmission Completed Interrupt Disable)  
        .equ TWIHS0_RXRDY_Shift, 1   @ bitWidth 1 (Receive Holding Register Ready Interrupt Disable)  
        .equ TWIHS0_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Holding Register Ready Interrupt Disable)  
        .equ TWIHS0_SVACC_Shift, 4   @ bitWidth 1 (Slave Access Interrupt Disable)  
        .equ TWIHS0_GACC_Shift, 5   @ bitWidth 1 (General Call Access Interrupt Disable)  
        .equ TWIHS0_OVRE_Shift, 6   @ bitWidth 1 (Overrun Error Interrupt Disable)  
        .equ TWIHS0_UNRE_Shift, 7   @ bitWidth 1 (Underrun Error Interrupt Disable)  
        .equ TWIHS0_NACK_Shift, 8   @ bitWidth 1 (Not Acknowledge Interrupt Disable)  
        .equ TWIHS0_ARBLST_Shift, 9   @ bitWidth 1 (Arbitration Lost Interrupt Disable)  
        .equ TWIHS0_SCL_WS_Shift, 10   @ bitWidth 1 (Clock Wait State Interrupt Disable)  
        .equ TWIHS0_EOSACC_Shift, 11   @ bitWidth 1 (End Of Slave Access Interrupt Disable)  
        .equ TWIHS0_MCACK_Shift, 16   @ bitWidth 1 (Master Code Acknowledge Interrupt Disable)  
        .equ TWIHS0_TOUT_Shift, 18   @ bitWidth 1 (Timeout Error Interrupt Disable)  
        .equ TWIHS0_PECERR_Shift, 19   @ bitWidth 1 (PEC Error Interrupt Disable)  
        .equ TWIHS0_SMBDAM_Shift, 20   @ bitWidth 1 (SMBus Default Address Match Interrupt Disable)  
        .equ TWIHS0_SMBHHM_Shift, 21   @ bitWidth 1 (SMBus Host Header Address Match Interrupt Disable)  
 
    .equ TWIHS0_IMR, TWIHS0_BASE + 0x2C @ (Interrupt Mask Register) 
        .equ TWIHS0_TXCOMP_Shift, 0   @ bitWidth 1 (Transmission Completed Interrupt Mask)  
        .equ TWIHS0_RXRDY_Shift, 1   @ bitWidth 1 (Receive Holding Register Ready Interrupt Mask)  
        .equ TWIHS0_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Holding Register Ready Interrupt Mask)  
        .equ TWIHS0_SVACC_Shift, 4   @ bitWidth 1 (Slave Access Interrupt Mask)  
        .equ TWIHS0_GACC_Shift, 5   @ bitWidth 1 (General Call Access Interrupt Mask)  
        .equ TWIHS0_OVRE_Shift, 6   @ bitWidth 1 (Overrun Error Interrupt Mask)  
        .equ TWIHS0_UNRE_Shift, 7   @ bitWidth 1 (Underrun Error Interrupt Mask)  
        .equ TWIHS0_NACK_Shift, 8   @ bitWidth 1 (Not Acknowledge Interrupt Mask)  
        .equ TWIHS0_ARBLST_Shift, 9   @ bitWidth 1 (Arbitration Lost Interrupt Mask)  
        .equ TWIHS0_SCL_WS_Shift, 10   @ bitWidth 1 (Clock Wait State Interrupt Mask)  
        .equ TWIHS0_EOSACC_Shift, 11   @ bitWidth 1 (End Of Slave Access Interrupt Mask)  
        .equ TWIHS0_MCACK_Shift, 16   @ bitWidth 1 (Master Code Acknowledge Interrupt Mask)  
        .equ TWIHS0_TOUT_Shift, 18   @ bitWidth 1 (Timeout Error Interrupt Mask)  
        .equ TWIHS0_PECERR_Shift, 19   @ bitWidth 1 (PEC Error Interrupt Mask)  
        .equ TWIHS0_SMBDAM_Shift, 20   @ bitWidth 1 (SMBus Default Address Match Interrupt Mask)  
        .equ TWIHS0_SMBHHM_Shift, 21   @ bitWidth 1 (SMBus Host Header Address Match Interrupt Mask)  
 
    .equ TWIHS0_RHR, TWIHS0_BASE + 0x30 @ (Receive Holding Register) 
        .equ TWIHS0_RXDATA_Shift, 0   @ bitWidth 8 (Master or Slave Receive Holding Data)  
 
    .equ TWIHS0_THR, TWIHS0_BASE + 0x34 @ (Transmit Holding Register) 
        .equ TWIHS0_TXDATA_Shift, 0   @ bitWidth 8 (Master or Slave Transmit Holding Data)  
 
    .equ TWIHS0_SMBTR, TWIHS0_BASE + 0x38 @ (SMBus Timing Register) 
        .equ TWIHS0_PRESC_Shift, 0   @ bitWidth 4 (SMBus Clock Prescaler)  
        .equ TWIHS0_TLOWS_Shift, 8   @ bitWidth 8 (Slave Clock Stretch Maximum Cycles)  
        .equ TWIHS0_TLOWM_Shift, 16   @ bitWidth 8 (Master Clock Stretch Maximum Cycles)  
        .equ TWIHS0_THMAX_Shift, 24   @ bitWidth 8 (Clock High Maximum Cycles)  
 
    .equ TWIHS0_FILTR, TWIHS0_BASE + 0x44 @ (Filter Register) 
        .equ TWIHS0_FILT_Shift, 0   @ bitWidth 1 (RX Digital Filter)  
        .equ TWIHS0_PADFEN_Shift, 1   @ bitWidth 1 (PAD Filter Enable)  
        .equ TWIHS0_PADFCFG_Shift, 2   @ bitWidth 1 (PAD Filter Config)  
        .equ TWIHS0_THRES_Shift, 8   @ bitWidth 3 (Digital Filter Threshold)  
 
    .equ TWIHS0_SWMR, TWIHS0_BASE + 0x4C @ (SleepWalking Matching Register) 
        .equ TWIHS0_SADR1_Shift, 0   @ bitWidth 7 (Slave Address 1)  
        .equ TWIHS0_SADR2_Shift, 8   @ bitWidth 7 (Slave Address 2)  
        .equ TWIHS0_SADR3_Shift, 16   @ bitWidth 7 (Slave Address 3)  
        .equ TWIHS0_DATAM_Shift, 24   @ bitWidth 8 (Data Match)  
 
    .equ TWIHS0_WPMR, TWIHS0_BASE + 0xE4 @ (Write Protection Mode Register) 
        .equ TWIHS0_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ TWIHS0_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ TWIHS0_WPSR, TWIHS0_BASE + 0xE8 @ (Write Protection Status Register) 
        .equ TWIHS0_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ TWIHS0_WPVSRC_Shift, 8   @ bitWidth 24 (Write Protection Violation Source)  
 

@=========================== TWIHS1 ===========================@
.equ TWIHS1_BASE, 0x4001C000 @ (Two-wire Interface High Speed) 
    .equ TWIHS1_CR, TWIHS1_BASE + 0x00 @ (Control Register) 
        .equ TWIHS1_START_Shift, 0   @ bitWidth 1 (Send a START Condition)  
        .equ TWIHS1_STOP_Shift, 1   @ bitWidth 1 (Send a STOP Condition)  
        .equ TWIHS1_MSEN_Shift, 2   @ bitWidth 1 (TWIHS Master Mode Enabled)  
        .equ TWIHS1_MSDIS_Shift, 3   @ bitWidth 1 (TWIHS Master Mode Disabled)  
        .equ TWIHS1_SVEN_Shift, 4   @ bitWidth 1 (TWIHS Slave Mode Enabled)  
        .equ TWIHS1_SVDIS_Shift, 5   @ bitWidth 1 (TWIHS Slave Mode Disabled)  
        .equ TWIHS1_QUICK_Shift, 6   @ bitWidth 1 (SMBus Quick Command)  
        .equ TWIHS1_SWRST_Shift, 7   @ bitWidth 1 (Software Reset)  
        .equ TWIHS1_HSEN_Shift, 8   @ bitWidth 1 (TWIHS High-Speed Mode Enabled)  
        .equ TWIHS1_HSDIS_Shift, 9   @ bitWidth 1 (TWIHS High-Speed Mode Disabled)  
        .equ TWIHS1_SMBEN_Shift, 10   @ bitWidth 1 (SMBus Mode Enabled)  
        .equ TWIHS1_SMBDIS_Shift, 11   @ bitWidth 1 (SMBus Mode Disabled)  
        .equ TWIHS1_PECEN_Shift, 12   @ bitWidth 1 (Packet Error Checking Enable)  
        .equ TWIHS1_PECDIS_Shift, 13   @ bitWidth 1 (Packet Error Checking Disable)  
        .equ TWIHS1_PECRQ_Shift, 14   @ bitWidth 1 (PEC Request)  
        .equ TWIHS1_CLEAR_Shift, 15   @ bitWidth 1 (Bus CLEAR Command)  
        .equ TWIHS1_ACMEN_Shift, 16   @ bitWidth 1 (Alternative Command Mode Enable)  
        .equ TWIHS1_ACMDIS_Shift, 17   @ bitWidth 1 (Alternative Command Mode Disable)  
        .equ TWIHS1_THRCLR_Shift, 24   @ bitWidth 1 (Transmit Holding Register Clear)  
        .equ TWIHS1_LOCKCLR_Shift, 26   @ bitWidth 1 (Lock Clear)  
        .equ TWIHS1_FIFOEN_Shift, 28   @ bitWidth 1 (FIFO Enable)  
        .equ TWIHS1_FIFODIS_Shift, 29   @ bitWidth 1 (FIFO Disable)  
 
    .equ TWIHS1_MMR, TWIHS1_BASE + 0x04 @ (Master Mode Register) 
        .equ TWIHS1_IADRSZ_Shift, 8   @ bitWidth 2 (Internal Device Address Size)  
        .equ TWIHS1_MREAD_Shift, 12   @ bitWidth 1 (Master Read Direction)  
        .equ TWIHS1_DADR_Shift, 16   @ bitWidth 7 (Device Address)  
 
    .equ TWIHS1_SMR, TWIHS1_BASE + 0x08 @ (Slave Mode Register) 
        .equ TWIHS1_NACKEN_Shift, 0   @ bitWidth 1 (Slave Receiver Data Phase NACK enable)  
        .equ TWIHS1_SMDA_Shift, 2   @ bitWidth 1 (SMBus Default Address)  
        .equ TWIHS1_SMHH_Shift, 3   @ bitWidth 1 (SMBus Host Header)  
        .equ TWIHS1_SCLWSDIS_Shift, 6   @ bitWidth 1 (Clock Wait State Disable)  
        .equ TWIHS1_MASK_Shift, 8   @ bitWidth 7 (Slave Address Mask)  
        .equ TWIHS1_SADR_Shift, 16   @ bitWidth 7 (Slave Address)  
        .equ TWIHS1_SADR1EN_Shift, 28   @ bitWidth 1 (Slave Address 1 Enable)  
        .equ TWIHS1_SADR2EN_Shift, 29   @ bitWidth 1 (Slave Address 2 Enable)  
        .equ TWIHS1_SADR3EN_Shift, 30   @ bitWidth 1 (Slave Address 3 Enable)  
        .equ TWIHS1_DATAMEN_Shift, 31   @ bitWidth 1 (Data Matching Enable)  
 
    .equ TWIHS1_IADR, TWIHS1_BASE + 0x0C @ (Internal Address Register) 
        .equ TWIHS1_IADR_Shift, 0   @ bitWidth 24 (Internal Address)  
 
    .equ TWIHS1_CWGR, TWIHS1_BASE + 0x10 @ (Clock Waveform Generator Register) 
        .equ TWIHS1_CLDIV_Shift, 0   @ bitWidth 8 (Clock Low Divider)  
        .equ TWIHS1_CHDIV_Shift, 8   @ bitWidth 8 (Clock High Divider)  
        .equ TWIHS1_CKDIV_Shift, 16   @ bitWidth 3 (Clock Divider)  
        .equ TWIHS1_HOLD_Shift, 24   @ bitWidth 6 (TWD Hold Time Versus TWCK Falling)  
 
    .equ TWIHS1_SR, TWIHS1_BASE + 0x20 @ (Status Register) 
        .equ TWIHS1_TXCOMP_Shift, 0   @ bitWidth 1 (Transmission Completed cleared by writing TWIHS_THR)  
        .equ TWIHS1_RXRDY_Shift, 1   @ bitWidth 1 (Receive Holding Register Ready cleared by reading TWIHS_RHR)  
        .equ TWIHS1_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Holding Register Ready cleared by writing TWIHS_THR)  
        .equ TWIHS1_SVREAD_Shift, 3   @ bitWidth 1 (Slave Read)  
        .equ TWIHS1_SVACC_Shift, 4   @ bitWidth 1 (Slave Access)  
        .equ TWIHS1_GACC_Shift, 5   @ bitWidth 1 (General Call Access cleared on read)  
        .equ TWIHS1_OVRE_Shift, 6   @ bitWidth 1 (Overrun Error cleared on read)  
        .equ TWIHS1_UNRE_Shift, 7   @ bitWidth 1 (Underrun Error cleared on read)  
        .equ TWIHS1_NACK_Shift, 8   @ bitWidth 1 (Not Acknowledged cleared on read)  
        .equ TWIHS1_ARBLST_Shift, 9   @ bitWidth 1 (Arbitration Lost cleared on read)  
        .equ TWIHS1_SCLWS_Shift, 10   @ bitWidth 1 (Clock Wait State)  
        .equ TWIHS1_EOSACC_Shift, 11   @ bitWidth 1 (End Of Slave Access cleared on read)  
        .equ TWIHS1_MCACK_Shift, 16   @ bitWidth 1 (Master Code Acknowledge cleared on read)  
        .equ TWIHS1_TOUT_Shift, 18   @ bitWidth 1 (Timeout Error cleared on read)  
        .equ TWIHS1_PECERR_Shift, 19   @ bitWidth 1 (PEC Error cleared on read)  
        .equ TWIHS1_SMBDAM_Shift, 20   @ bitWidth 1 (SMBus Default Address Match cleared on read)  
        .equ TWIHS1_SMBHHM_Shift, 21   @ bitWidth 1 (SMBus Host Header Address Match cleared on read)  
        .equ TWIHS1_SCL_Shift, 24   @ bitWidth 1 (SCL Line Value)  
        .equ TWIHS1_SDA_Shift, 25   @ bitWidth 1 (SDA Line Value)  
 
    .equ TWIHS1_IER, TWIHS1_BASE + 0x24 @ (Interrupt Enable Register) 
        .equ TWIHS1_TXCOMP_Shift, 0   @ bitWidth 1 (Transmission Completed Interrupt Enable)  
        .equ TWIHS1_RXRDY_Shift, 1   @ bitWidth 1 (Receive Holding Register Ready Interrupt Enable)  
        .equ TWIHS1_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Holding Register Ready Interrupt Enable)  
        .equ TWIHS1_SVACC_Shift, 4   @ bitWidth 1 (Slave Access Interrupt Enable)  
        .equ TWIHS1_GACC_Shift, 5   @ bitWidth 1 (General Call Access Interrupt Enable)  
        .equ TWIHS1_OVRE_Shift, 6   @ bitWidth 1 (Overrun Error Interrupt Enable)  
        .equ TWIHS1_UNRE_Shift, 7   @ bitWidth 1 (Underrun Error Interrupt Enable)  
        .equ TWIHS1_NACK_Shift, 8   @ bitWidth 1 (Not Acknowledge Interrupt Enable)  
        .equ TWIHS1_ARBLST_Shift, 9   @ bitWidth 1 (Arbitration Lost Interrupt Enable)  
        .equ TWIHS1_SCL_WS_Shift, 10   @ bitWidth 1 (Clock Wait State Interrupt Enable)  
        .equ TWIHS1_EOSACC_Shift, 11   @ bitWidth 1 (End Of Slave Access Interrupt Enable)  
        .equ TWIHS1_MCACK_Shift, 16   @ bitWidth 1 (Master Code Acknowledge Interrupt Enable)  
        .equ TWIHS1_TOUT_Shift, 18   @ bitWidth 1 (Timeout Error Interrupt Enable)  
        .equ TWIHS1_PECERR_Shift, 19   @ bitWidth 1 (PEC Error Interrupt Enable)  
        .equ TWIHS1_SMBDAM_Shift, 20   @ bitWidth 1 (SMBus Default Address Match Interrupt Enable)  
        .equ TWIHS1_SMBHHM_Shift, 21   @ bitWidth 1 (SMBus Host Header Address Match Interrupt Enable)  
 
    .equ TWIHS1_IDR, TWIHS1_BASE + 0x28 @ (Interrupt Disable Register) 
        .equ TWIHS1_TXCOMP_Shift, 0   @ bitWidth 1 (Transmission Completed Interrupt Disable)  
        .equ TWIHS1_RXRDY_Shift, 1   @ bitWidth 1 (Receive Holding Register Ready Interrupt Disable)  
        .equ TWIHS1_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Holding Register Ready Interrupt Disable)  
        .equ TWIHS1_SVACC_Shift, 4   @ bitWidth 1 (Slave Access Interrupt Disable)  
        .equ TWIHS1_GACC_Shift, 5   @ bitWidth 1 (General Call Access Interrupt Disable)  
        .equ TWIHS1_OVRE_Shift, 6   @ bitWidth 1 (Overrun Error Interrupt Disable)  
        .equ TWIHS1_UNRE_Shift, 7   @ bitWidth 1 (Underrun Error Interrupt Disable)  
        .equ TWIHS1_NACK_Shift, 8   @ bitWidth 1 (Not Acknowledge Interrupt Disable)  
        .equ TWIHS1_ARBLST_Shift, 9   @ bitWidth 1 (Arbitration Lost Interrupt Disable)  
        .equ TWIHS1_SCL_WS_Shift, 10   @ bitWidth 1 (Clock Wait State Interrupt Disable)  
        .equ TWIHS1_EOSACC_Shift, 11   @ bitWidth 1 (End Of Slave Access Interrupt Disable)  
        .equ TWIHS1_MCACK_Shift, 16   @ bitWidth 1 (Master Code Acknowledge Interrupt Disable)  
        .equ TWIHS1_TOUT_Shift, 18   @ bitWidth 1 (Timeout Error Interrupt Disable)  
        .equ TWIHS1_PECERR_Shift, 19   @ bitWidth 1 (PEC Error Interrupt Disable)  
        .equ TWIHS1_SMBDAM_Shift, 20   @ bitWidth 1 (SMBus Default Address Match Interrupt Disable)  
        .equ TWIHS1_SMBHHM_Shift, 21   @ bitWidth 1 (SMBus Host Header Address Match Interrupt Disable)  
 
    .equ TWIHS1_IMR, TWIHS1_BASE + 0x2C @ (Interrupt Mask Register) 
        .equ TWIHS1_TXCOMP_Shift, 0   @ bitWidth 1 (Transmission Completed Interrupt Mask)  
        .equ TWIHS1_RXRDY_Shift, 1   @ bitWidth 1 (Receive Holding Register Ready Interrupt Mask)  
        .equ TWIHS1_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Holding Register Ready Interrupt Mask)  
        .equ TWIHS1_SVACC_Shift, 4   @ bitWidth 1 (Slave Access Interrupt Mask)  
        .equ TWIHS1_GACC_Shift, 5   @ bitWidth 1 (General Call Access Interrupt Mask)  
        .equ TWIHS1_OVRE_Shift, 6   @ bitWidth 1 (Overrun Error Interrupt Mask)  
        .equ TWIHS1_UNRE_Shift, 7   @ bitWidth 1 (Underrun Error Interrupt Mask)  
        .equ TWIHS1_NACK_Shift, 8   @ bitWidth 1 (Not Acknowledge Interrupt Mask)  
        .equ TWIHS1_ARBLST_Shift, 9   @ bitWidth 1 (Arbitration Lost Interrupt Mask)  
        .equ TWIHS1_SCL_WS_Shift, 10   @ bitWidth 1 (Clock Wait State Interrupt Mask)  
        .equ TWIHS1_EOSACC_Shift, 11   @ bitWidth 1 (End Of Slave Access Interrupt Mask)  
        .equ TWIHS1_MCACK_Shift, 16   @ bitWidth 1 (Master Code Acknowledge Interrupt Mask)  
        .equ TWIHS1_TOUT_Shift, 18   @ bitWidth 1 (Timeout Error Interrupt Mask)  
        .equ TWIHS1_PECERR_Shift, 19   @ bitWidth 1 (PEC Error Interrupt Mask)  
        .equ TWIHS1_SMBDAM_Shift, 20   @ bitWidth 1 (SMBus Default Address Match Interrupt Mask)  
        .equ TWIHS1_SMBHHM_Shift, 21   @ bitWidth 1 (SMBus Host Header Address Match Interrupt Mask)  
 
    .equ TWIHS1_RHR, TWIHS1_BASE + 0x30 @ (Receive Holding Register) 
        .equ TWIHS1_RXDATA_Shift, 0   @ bitWidth 8 (Master or Slave Receive Holding Data)  
 
    .equ TWIHS1_THR, TWIHS1_BASE + 0x34 @ (Transmit Holding Register) 
        .equ TWIHS1_TXDATA_Shift, 0   @ bitWidth 8 (Master or Slave Transmit Holding Data)  
 
    .equ TWIHS1_SMBTR, TWIHS1_BASE + 0x38 @ (SMBus Timing Register) 
        .equ TWIHS1_PRESC_Shift, 0   @ bitWidth 4 (SMBus Clock Prescaler)  
        .equ TWIHS1_TLOWS_Shift, 8   @ bitWidth 8 (Slave Clock Stretch Maximum Cycles)  
        .equ TWIHS1_TLOWM_Shift, 16   @ bitWidth 8 (Master Clock Stretch Maximum Cycles)  
        .equ TWIHS1_THMAX_Shift, 24   @ bitWidth 8 (Clock High Maximum Cycles)  
 
    .equ TWIHS1_FILTR, TWIHS1_BASE + 0x44 @ (Filter Register) 
        .equ TWIHS1_FILT_Shift, 0   @ bitWidth 1 (RX Digital Filter)  
        .equ TWIHS1_PADFEN_Shift, 1   @ bitWidth 1 (PAD Filter Enable)  
        .equ TWIHS1_PADFCFG_Shift, 2   @ bitWidth 1 (PAD Filter Config)  
        .equ TWIHS1_THRES_Shift, 8   @ bitWidth 3 (Digital Filter Threshold)  
 
    .equ TWIHS1_SWMR, TWIHS1_BASE + 0x4C @ (SleepWalking Matching Register) 
        .equ TWIHS1_SADR1_Shift, 0   @ bitWidth 7 (Slave Address 1)  
        .equ TWIHS1_SADR2_Shift, 8   @ bitWidth 7 (Slave Address 2)  
        .equ TWIHS1_SADR3_Shift, 16   @ bitWidth 7 (Slave Address 3)  
        .equ TWIHS1_DATAM_Shift, 24   @ bitWidth 8 (Data Match)  
 
    .equ TWIHS1_WPMR, TWIHS1_BASE + 0xE4 @ (Write Protection Mode Register) 
        .equ TWIHS1_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ TWIHS1_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ TWIHS1_WPSR, TWIHS1_BASE + 0xE8 @ (Write Protection Status Register) 
        .equ TWIHS1_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ TWIHS1_WPVSRC_Shift, 8   @ bitWidth 24 (Write Protection Violation Source)  
 

@=========================== TWIHS2 ===========================@
.equ TWIHS2_BASE, 0x40060000 @ (Two-wire Interface High Speed) 
    .equ TWIHS2_CR, TWIHS2_BASE + 0x00 @ (Control Register) 
        .equ TWIHS2_START_Shift, 0   @ bitWidth 1 (Send a START Condition)  
        .equ TWIHS2_STOP_Shift, 1   @ bitWidth 1 (Send a STOP Condition)  
        .equ TWIHS2_MSEN_Shift, 2   @ bitWidth 1 (TWIHS Master Mode Enabled)  
        .equ TWIHS2_MSDIS_Shift, 3   @ bitWidth 1 (TWIHS Master Mode Disabled)  
        .equ TWIHS2_SVEN_Shift, 4   @ bitWidth 1 (TWIHS Slave Mode Enabled)  
        .equ TWIHS2_SVDIS_Shift, 5   @ bitWidth 1 (TWIHS Slave Mode Disabled)  
        .equ TWIHS2_QUICK_Shift, 6   @ bitWidth 1 (SMBus Quick Command)  
        .equ TWIHS2_SWRST_Shift, 7   @ bitWidth 1 (Software Reset)  
        .equ TWIHS2_HSEN_Shift, 8   @ bitWidth 1 (TWIHS High-Speed Mode Enabled)  
        .equ TWIHS2_HSDIS_Shift, 9   @ bitWidth 1 (TWIHS High-Speed Mode Disabled)  
        .equ TWIHS2_SMBEN_Shift, 10   @ bitWidth 1 (SMBus Mode Enabled)  
        .equ TWIHS2_SMBDIS_Shift, 11   @ bitWidth 1 (SMBus Mode Disabled)  
        .equ TWIHS2_PECEN_Shift, 12   @ bitWidth 1 (Packet Error Checking Enable)  
        .equ TWIHS2_PECDIS_Shift, 13   @ bitWidth 1 (Packet Error Checking Disable)  
        .equ TWIHS2_PECRQ_Shift, 14   @ bitWidth 1 (PEC Request)  
        .equ TWIHS2_CLEAR_Shift, 15   @ bitWidth 1 (Bus CLEAR Command)  
        .equ TWIHS2_ACMEN_Shift, 16   @ bitWidth 1 (Alternative Command Mode Enable)  
        .equ TWIHS2_ACMDIS_Shift, 17   @ bitWidth 1 (Alternative Command Mode Disable)  
        .equ TWIHS2_THRCLR_Shift, 24   @ bitWidth 1 (Transmit Holding Register Clear)  
        .equ TWIHS2_LOCKCLR_Shift, 26   @ bitWidth 1 (Lock Clear)  
        .equ TWIHS2_FIFOEN_Shift, 28   @ bitWidth 1 (FIFO Enable)  
        .equ TWIHS2_FIFODIS_Shift, 29   @ bitWidth 1 (FIFO Disable)  
 
    .equ TWIHS2_MMR, TWIHS2_BASE + 0x04 @ (Master Mode Register) 
        .equ TWIHS2_IADRSZ_Shift, 8   @ bitWidth 2 (Internal Device Address Size)  
        .equ TWIHS2_MREAD_Shift, 12   @ bitWidth 1 (Master Read Direction)  
        .equ TWIHS2_DADR_Shift, 16   @ bitWidth 7 (Device Address)  
 
    .equ TWIHS2_SMR, TWIHS2_BASE + 0x08 @ (Slave Mode Register) 
        .equ TWIHS2_NACKEN_Shift, 0   @ bitWidth 1 (Slave Receiver Data Phase NACK enable)  
        .equ TWIHS2_SMDA_Shift, 2   @ bitWidth 1 (SMBus Default Address)  
        .equ TWIHS2_SMHH_Shift, 3   @ bitWidth 1 (SMBus Host Header)  
        .equ TWIHS2_SCLWSDIS_Shift, 6   @ bitWidth 1 (Clock Wait State Disable)  
        .equ TWIHS2_MASK_Shift, 8   @ bitWidth 7 (Slave Address Mask)  
        .equ TWIHS2_SADR_Shift, 16   @ bitWidth 7 (Slave Address)  
        .equ TWIHS2_SADR1EN_Shift, 28   @ bitWidth 1 (Slave Address 1 Enable)  
        .equ TWIHS2_SADR2EN_Shift, 29   @ bitWidth 1 (Slave Address 2 Enable)  
        .equ TWIHS2_SADR3EN_Shift, 30   @ bitWidth 1 (Slave Address 3 Enable)  
        .equ TWIHS2_DATAMEN_Shift, 31   @ bitWidth 1 (Data Matching Enable)  
 
    .equ TWIHS2_IADR, TWIHS2_BASE + 0x0C @ (Internal Address Register) 
        .equ TWIHS2_IADR_Shift, 0   @ bitWidth 24 (Internal Address)  
 
    .equ TWIHS2_CWGR, TWIHS2_BASE + 0x10 @ (Clock Waveform Generator Register) 
        .equ TWIHS2_CLDIV_Shift, 0   @ bitWidth 8 (Clock Low Divider)  
        .equ TWIHS2_CHDIV_Shift, 8   @ bitWidth 8 (Clock High Divider)  
        .equ TWIHS2_CKDIV_Shift, 16   @ bitWidth 3 (Clock Divider)  
        .equ TWIHS2_HOLD_Shift, 24   @ bitWidth 6 (TWD Hold Time Versus TWCK Falling)  
 
    .equ TWIHS2_SR, TWIHS2_BASE + 0x20 @ (Status Register) 
        .equ TWIHS2_TXCOMP_Shift, 0   @ bitWidth 1 (Transmission Completed cleared by writing TWIHS_THR)  
        .equ TWIHS2_RXRDY_Shift, 1   @ bitWidth 1 (Receive Holding Register Ready cleared by reading TWIHS_RHR)  
        .equ TWIHS2_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Holding Register Ready cleared by writing TWIHS_THR)  
        .equ TWIHS2_SVREAD_Shift, 3   @ bitWidth 1 (Slave Read)  
        .equ TWIHS2_SVACC_Shift, 4   @ bitWidth 1 (Slave Access)  
        .equ TWIHS2_GACC_Shift, 5   @ bitWidth 1 (General Call Access cleared on read)  
        .equ TWIHS2_OVRE_Shift, 6   @ bitWidth 1 (Overrun Error cleared on read)  
        .equ TWIHS2_UNRE_Shift, 7   @ bitWidth 1 (Underrun Error cleared on read)  
        .equ TWIHS2_NACK_Shift, 8   @ bitWidth 1 (Not Acknowledged cleared on read)  
        .equ TWIHS2_ARBLST_Shift, 9   @ bitWidth 1 (Arbitration Lost cleared on read)  
        .equ TWIHS2_SCLWS_Shift, 10   @ bitWidth 1 (Clock Wait State)  
        .equ TWIHS2_EOSACC_Shift, 11   @ bitWidth 1 (End Of Slave Access cleared on read)  
        .equ TWIHS2_MCACK_Shift, 16   @ bitWidth 1 (Master Code Acknowledge cleared on read)  
        .equ TWIHS2_TOUT_Shift, 18   @ bitWidth 1 (Timeout Error cleared on read)  
        .equ TWIHS2_PECERR_Shift, 19   @ bitWidth 1 (PEC Error cleared on read)  
        .equ TWIHS2_SMBDAM_Shift, 20   @ bitWidth 1 (SMBus Default Address Match cleared on read)  
        .equ TWIHS2_SMBHHM_Shift, 21   @ bitWidth 1 (SMBus Host Header Address Match cleared on read)  
        .equ TWIHS2_SCL_Shift, 24   @ bitWidth 1 (SCL Line Value)  
        .equ TWIHS2_SDA_Shift, 25   @ bitWidth 1 (SDA Line Value)  
 
    .equ TWIHS2_IER, TWIHS2_BASE + 0x24 @ (Interrupt Enable Register) 
        .equ TWIHS2_TXCOMP_Shift, 0   @ bitWidth 1 (Transmission Completed Interrupt Enable)  
        .equ TWIHS2_RXRDY_Shift, 1   @ bitWidth 1 (Receive Holding Register Ready Interrupt Enable)  
        .equ TWIHS2_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Holding Register Ready Interrupt Enable)  
        .equ TWIHS2_SVACC_Shift, 4   @ bitWidth 1 (Slave Access Interrupt Enable)  
        .equ TWIHS2_GACC_Shift, 5   @ bitWidth 1 (General Call Access Interrupt Enable)  
        .equ TWIHS2_OVRE_Shift, 6   @ bitWidth 1 (Overrun Error Interrupt Enable)  
        .equ TWIHS2_UNRE_Shift, 7   @ bitWidth 1 (Underrun Error Interrupt Enable)  
        .equ TWIHS2_NACK_Shift, 8   @ bitWidth 1 (Not Acknowledge Interrupt Enable)  
        .equ TWIHS2_ARBLST_Shift, 9   @ bitWidth 1 (Arbitration Lost Interrupt Enable)  
        .equ TWIHS2_SCL_WS_Shift, 10   @ bitWidth 1 (Clock Wait State Interrupt Enable)  
        .equ TWIHS2_EOSACC_Shift, 11   @ bitWidth 1 (End Of Slave Access Interrupt Enable)  
        .equ TWIHS2_MCACK_Shift, 16   @ bitWidth 1 (Master Code Acknowledge Interrupt Enable)  
        .equ TWIHS2_TOUT_Shift, 18   @ bitWidth 1 (Timeout Error Interrupt Enable)  
        .equ TWIHS2_PECERR_Shift, 19   @ bitWidth 1 (PEC Error Interrupt Enable)  
        .equ TWIHS2_SMBDAM_Shift, 20   @ bitWidth 1 (SMBus Default Address Match Interrupt Enable)  
        .equ TWIHS2_SMBHHM_Shift, 21   @ bitWidth 1 (SMBus Host Header Address Match Interrupt Enable)  
 
    .equ TWIHS2_IDR, TWIHS2_BASE + 0x28 @ (Interrupt Disable Register) 
        .equ TWIHS2_TXCOMP_Shift, 0   @ bitWidth 1 (Transmission Completed Interrupt Disable)  
        .equ TWIHS2_RXRDY_Shift, 1   @ bitWidth 1 (Receive Holding Register Ready Interrupt Disable)  
        .equ TWIHS2_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Holding Register Ready Interrupt Disable)  
        .equ TWIHS2_SVACC_Shift, 4   @ bitWidth 1 (Slave Access Interrupt Disable)  
        .equ TWIHS2_GACC_Shift, 5   @ bitWidth 1 (General Call Access Interrupt Disable)  
        .equ TWIHS2_OVRE_Shift, 6   @ bitWidth 1 (Overrun Error Interrupt Disable)  
        .equ TWIHS2_UNRE_Shift, 7   @ bitWidth 1 (Underrun Error Interrupt Disable)  
        .equ TWIHS2_NACK_Shift, 8   @ bitWidth 1 (Not Acknowledge Interrupt Disable)  
        .equ TWIHS2_ARBLST_Shift, 9   @ bitWidth 1 (Arbitration Lost Interrupt Disable)  
        .equ TWIHS2_SCL_WS_Shift, 10   @ bitWidth 1 (Clock Wait State Interrupt Disable)  
        .equ TWIHS2_EOSACC_Shift, 11   @ bitWidth 1 (End Of Slave Access Interrupt Disable)  
        .equ TWIHS2_MCACK_Shift, 16   @ bitWidth 1 (Master Code Acknowledge Interrupt Disable)  
        .equ TWIHS2_TOUT_Shift, 18   @ bitWidth 1 (Timeout Error Interrupt Disable)  
        .equ TWIHS2_PECERR_Shift, 19   @ bitWidth 1 (PEC Error Interrupt Disable)  
        .equ TWIHS2_SMBDAM_Shift, 20   @ bitWidth 1 (SMBus Default Address Match Interrupt Disable)  
        .equ TWIHS2_SMBHHM_Shift, 21   @ bitWidth 1 (SMBus Host Header Address Match Interrupt Disable)  
 
    .equ TWIHS2_IMR, TWIHS2_BASE + 0x2C @ (Interrupt Mask Register) 
        .equ TWIHS2_TXCOMP_Shift, 0   @ bitWidth 1 (Transmission Completed Interrupt Mask)  
        .equ TWIHS2_RXRDY_Shift, 1   @ bitWidth 1 (Receive Holding Register Ready Interrupt Mask)  
        .equ TWIHS2_TXRDY_Shift, 2   @ bitWidth 1 (Transmit Holding Register Ready Interrupt Mask)  
        .equ TWIHS2_SVACC_Shift, 4   @ bitWidth 1 (Slave Access Interrupt Mask)  
        .equ TWIHS2_GACC_Shift, 5   @ bitWidth 1 (General Call Access Interrupt Mask)  
        .equ TWIHS2_OVRE_Shift, 6   @ bitWidth 1 (Overrun Error Interrupt Mask)  
        .equ TWIHS2_UNRE_Shift, 7   @ bitWidth 1 (Underrun Error Interrupt Mask)  
        .equ TWIHS2_NACK_Shift, 8   @ bitWidth 1 (Not Acknowledge Interrupt Mask)  
        .equ TWIHS2_ARBLST_Shift, 9   @ bitWidth 1 (Arbitration Lost Interrupt Mask)  
        .equ TWIHS2_SCL_WS_Shift, 10   @ bitWidth 1 (Clock Wait State Interrupt Mask)  
        .equ TWIHS2_EOSACC_Shift, 11   @ bitWidth 1 (End Of Slave Access Interrupt Mask)  
        .equ TWIHS2_MCACK_Shift, 16   @ bitWidth 1 (Master Code Acknowledge Interrupt Mask)  
        .equ TWIHS2_TOUT_Shift, 18   @ bitWidth 1 (Timeout Error Interrupt Mask)  
        .equ TWIHS2_PECERR_Shift, 19   @ bitWidth 1 (PEC Error Interrupt Mask)  
        .equ TWIHS2_SMBDAM_Shift, 20   @ bitWidth 1 (SMBus Default Address Match Interrupt Mask)  
        .equ TWIHS2_SMBHHM_Shift, 21   @ bitWidth 1 (SMBus Host Header Address Match Interrupt Mask)  
 
    .equ TWIHS2_RHR, TWIHS2_BASE + 0x30 @ (Receive Holding Register) 
        .equ TWIHS2_RXDATA_Shift, 0   @ bitWidth 8 (Master or Slave Receive Holding Data)  
 
    .equ TWIHS2_THR, TWIHS2_BASE + 0x34 @ (Transmit Holding Register) 
        .equ TWIHS2_TXDATA_Shift, 0   @ bitWidth 8 (Master or Slave Transmit Holding Data)  
 
    .equ TWIHS2_SMBTR, TWIHS2_BASE + 0x38 @ (SMBus Timing Register) 
        .equ TWIHS2_PRESC_Shift, 0   @ bitWidth 4 (SMBus Clock Prescaler)  
        .equ TWIHS2_TLOWS_Shift, 8   @ bitWidth 8 (Slave Clock Stretch Maximum Cycles)  
        .equ TWIHS2_TLOWM_Shift, 16   @ bitWidth 8 (Master Clock Stretch Maximum Cycles)  
        .equ TWIHS2_THMAX_Shift, 24   @ bitWidth 8 (Clock High Maximum Cycles)  
 
    .equ TWIHS2_FILTR, TWIHS2_BASE + 0x44 @ (Filter Register) 
        .equ TWIHS2_FILT_Shift, 0   @ bitWidth 1 (RX Digital Filter)  
        .equ TWIHS2_PADFEN_Shift, 1   @ bitWidth 1 (PAD Filter Enable)  
        .equ TWIHS2_PADFCFG_Shift, 2   @ bitWidth 1 (PAD Filter Config)  
        .equ TWIHS2_THRES_Shift, 8   @ bitWidth 3 (Digital Filter Threshold)  
 
    .equ TWIHS2_SWMR, TWIHS2_BASE + 0x4C @ (SleepWalking Matching Register) 
        .equ TWIHS2_SADR1_Shift, 0   @ bitWidth 7 (Slave Address 1)  
        .equ TWIHS2_SADR2_Shift, 8   @ bitWidth 7 (Slave Address 2)  
        .equ TWIHS2_SADR3_Shift, 16   @ bitWidth 7 (Slave Address 3)  
        .equ TWIHS2_DATAM_Shift, 24   @ bitWidth 8 (Data Match)  
 
    .equ TWIHS2_WPMR, TWIHS2_BASE + 0xE4 @ (Write Protection Mode Register) 
        .equ TWIHS2_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ TWIHS2_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ TWIHS2_WPSR, TWIHS2_BASE + 0xE8 @ (Write Protection Status Register) 
        .equ TWIHS2_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ TWIHS2_WPVSRC_Shift, 8   @ bitWidth 24 (Write Protection Violation Source)  
 

@=========================== UART0 ===========================@
.equ UART0_BASE, 0x400E0800 @ (Universal Asynchronous Receiver Transmitter) 
    .equ UART0_CR, UART0_BASE + 0x0000 @ (Control Register) 
        .equ UART0_RSTRX_Shift, 2   @ bitWidth 1 (Reset Receiver)  
        .equ UART0_RSTTX_Shift, 3   @ bitWidth 1 (Reset Transmitter)  
        .equ UART0_RXEN_Shift, 4   @ bitWidth 1 (Receiver Enable)  
        .equ UART0_RXDIS_Shift, 5   @ bitWidth 1 (Receiver Disable)  
        .equ UART0_TXEN_Shift, 6   @ bitWidth 1 (Transmitter Enable)  
        .equ UART0_TXDIS_Shift, 7   @ bitWidth 1 (Transmitter Disable)  
        .equ UART0_RSTSTA_Shift, 8   @ bitWidth 1 (Reset Status)  
        .equ UART0_REQCLR_Shift, 12   @ bitWidth 1 (Request Clear)  
 
    .equ UART0_MR, UART0_BASE + 0x0004 @ (Mode Register) 
        .equ UART0_FILTER_Shift, 4   @ bitWidth 1 (Receiver Digital Filter)  
        .equ UART0_PAR_Shift, 9   @ bitWidth 3 (Parity Type)  
        .equ UART0_BRSRCCK_Shift, 12   @ bitWidth 1 (Baud Rate Source Clock)  
        .equ UART0_CHMODE_Shift, 14   @ bitWidth 2 (Channel Mode)  
 
    .equ UART0_IER, UART0_BASE + 0x0008 @ (Interrupt Enable Register) 
        .equ UART0_RXRDY_Shift, 0   @ bitWidth 1 (Enable RXRDY Interrupt)  
        .equ UART0_TXRDY_Shift, 1   @ bitWidth 1 (Enable TXRDY Interrupt)  
        .equ UART0_OVRE_Shift, 5   @ bitWidth 1 (Enable Overrun Error Interrupt)  
        .equ UART0_FRAME_Shift, 6   @ bitWidth 1 (Enable Framing Error Interrupt)  
        .equ UART0_PARE_Shift, 7   @ bitWidth 1 (Enable Parity Error Interrupt)  
        .equ UART0_TXEMPTY_Shift, 9   @ bitWidth 1 (Enable TXEMPTY Interrupt)  
        .equ UART0_CMP_Shift, 15   @ bitWidth 1 (Enable Comparison Interrupt)  
 
    .equ UART0_IDR, UART0_BASE + 0x000C @ (Interrupt Disable Register) 
        .equ UART0_RXRDY_Shift, 0   @ bitWidth 1 (Disable RXRDY Interrupt)  
        .equ UART0_TXRDY_Shift, 1   @ bitWidth 1 (Disable TXRDY Interrupt)  
        .equ UART0_OVRE_Shift, 5   @ bitWidth 1 (Disable Overrun Error Interrupt)  
        .equ UART0_FRAME_Shift, 6   @ bitWidth 1 (Disable Framing Error Interrupt)  
        .equ UART0_PARE_Shift, 7   @ bitWidth 1 (Disable Parity Error Interrupt)  
        .equ UART0_TXEMPTY_Shift, 9   @ bitWidth 1 (Disable TXEMPTY Interrupt)  
        .equ UART0_CMP_Shift, 15   @ bitWidth 1 (Disable Comparison Interrupt)  
 
    .equ UART0_IMR, UART0_BASE + 0x0010 @ (Interrupt Mask Register) 
        .equ UART0_RXRDY_Shift, 0   @ bitWidth 1 (Mask RXRDY Interrupt)  
        .equ UART0_TXRDY_Shift, 1   @ bitWidth 1 (Disable TXRDY Interrupt)  
        .equ UART0_OVRE_Shift, 5   @ bitWidth 1 (Mask Overrun Error Interrupt)  
        .equ UART0_FRAME_Shift, 6   @ bitWidth 1 (Mask Framing Error Interrupt)  
        .equ UART0_PARE_Shift, 7   @ bitWidth 1 (Mask Parity Error Interrupt)  
        .equ UART0_TXEMPTY_Shift, 9   @ bitWidth 1 (Mask TXEMPTY Interrupt)  
        .equ UART0_CMP_Shift, 15   @ bitWidth 1 (Mask Comparison Interrupt)  
 
    .equ UART0_SR, UART0_BASE + 0x0014 @ (Status Register) 
        .equ UART0_RXRDY_Shift, 0   @ bitWidth 1 (Receiver Ready)  
        .equ UART0_TXRDY_Shift, 1   @ bitWidth 1 (Transmitter Ready)  
        .equ UART0_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error)  
        .equ UART0_FRAME_Shift, 6   @ bitWidth 1 (Framing Error)  
        .equ UART0_PARE_Shift, 7   @ bitWidth 1 (Parity Error)  
        .equ UART0_TXEMPTY_Shift, 9   @ bitWidth 1 (Transmitter Empty)  
        .equ UART0_CMP_Shift, 15   @ bitWidth 1 (Comparison Match)  
 
    .equ UART0_RHR, UART0_BASE + 0x0018 @ (Receive Holding Register) 
        .equ UART0_RXCHR_Shift, 0   @ bitWidth 8 (Received Character)  
 
    .equ UART0_THR, UART0_BASE + 0x001C @ (Transmit Holding Register) 
        .equ UART0_TXCHR_Shift, 0   @ bitWidth 8 (Character to be Transmitted)  
 
    .equ UART0_BRGR, UART0_BASE + 0x0020 @ (Baud Rate Generator Register) 
        .equ UART0_CD_Shift, 0   @ bitWidth 16 (Clock Divisor)  
 
    .equ UART0_CMPR, UART0_BASE + 0x0024 @ (Comparison Register) 
        .equ UART0_VAL1_Shift, 0   @ bitWidth 8 (First Comparison Value for Received Character)  
        .equ UART0_CMPMODE_Shift, 12   @ bitWidth 1 (Comparison Mode)  
        .equ UART0_CMPPAR_Shift, 14   @ bitWidth 1 (Compare Parity)  
        .equ UART0_VAL2_Shift, 16   @ bitWidth 8 (Second Comparison Value for Received Character)  
 
    .equ UART0_WPMR, UART0_BASE + 0x00E4 @ (Write Protection Mode Register) 
        .equ UART0_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ UART0_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 

@=========================== UART1 ===========================@
.equ UART1_BASE, 0x400E0A00 @ (Universal Asynchronous Receiver Transmitter) 
    .equ UART1_CR, UART1_BASE + 0x0000 @ (Control Register) 
        .equ UART1_RSTRX_Shift, 2   @ bitWidth 1 (Reset Receiver)  
        .equ UART1_RSTTX_Shift, 3   @ bitWidth 1 (Reset Transmitter)  
        .equ UART1_RXEN_Shift, 4   @ bitWidth 1 (Receiver Enable)  
        .equ UART1_RXDIS_Shift, 5   @ bitWidth 1 (Receiver Disable)  
        .equ UART1_TXEN_Shift, 6   @ bitWidth 1 (Transmitter Enable)  
        .equ UART1_TXDIS_Shift, 7   @ bitWidth 1 (Transmitter Disable)  
        .equ UART1_RSTSTA_Shift, 8   @ bitWidth 1 (Reset Status)  
        .equ UART1_REQCLR_Shift, 12   @ bitWidth 1 (Request Clear)  
 
    .equ UART1_MR, UART1_BASE + 0x0004 @ (Mode Register) 
        .equ UART1_FILTER_Shift, 4   @ bitWidth 1 (Receiver Digital Filter)  
        .equ UART1_PAR_Shift, 9   @ bitWidth 3 (Parity Type)  
        .equ UART1_BRSRCCK_Shift, 12   @ bitWidth 1 (Baud Rate Source Clock)  
        .equ UART1_CHMODE_Shift, 14   @ bitWidth 2 (Channel Mode)  
 
    .equ UART1_IER, UART1_BASE + 0x0008 @ (Interrupt Enable Register) 
        .equ UART1_RXRDY_Shift, 0   @ bitWidth 1 (Enable RXRDY Interrupt)  
        .equ UART1_TXRDY_Shift, 1   @ bitWidth 1 (Enable TXRDY Interrupt)  
        .equ UART1_OVRE_Shift, 5   @ bitWidth 1 (Enable Overrun Error Interrupt)  
        .equ UART1_FRAME_Shift, 6   @ bitWidth 1 (Enable Framing Error Interrupt)  
        .equ UART1_PARE_Shift, 7   @ bitWidth 1 (Enable Parity Error Interrupt)  
        .equ UART1_TXEMPTY_Shift, 9   @ bitWidth 1 (Enable TXEMPTY Interrupt)  
        .equ UART1_CMP_Shift, 15   @ bitWidth 1 (Enable Comparison Interrupt)  
 
    .equ UART1_IDR, UART1_BASE + 0x000C @ (Interrupt Disable Register) 
        .equ UART1_RXRDY_Shift, 0   @ bitWidth 1 (Disable RXRDY Interrupt)  
        .equ UART1_TXRDY_Shift, 1   @ bitWidth 1 (Disable TXRDY Interrupt)  
        .equ UART1_OVRE_Shift, 5   @ bitWidth 1 (Disable Overrun Error Interrupt)  
        .equ UART1_FRAME_Shift, 6   @ bitWidth 1 (Disable Framing Error Interrupt)  
        .equ UART1_PARE_Shift, 7   @ bitWidth 1 (Disable Parity Error Interrupt)  
        .equ UART1_TXEMPTY_Shift, 9   @ bitWidth 1 (Disable TXEMPTY Interrupt)  
        .equ UART1_CMP_Shift, 15   @ bitWidth 1 (Disable Comparison Interrupt)  
 
    .equ UART1_IMR, UART1_BASE + 0x0010 @ (Interrupt Mask Register) 
        .equ UART1_RXRDY_Shift, 0   @ bitWidth 1 (Mask RXRDY Interrupt)  
        .equ UART1_TXRDY_Shift, 1   @ bitWidth 1 (Disable TXRDY Interrupt)  
        .equ UART1_OVRE_Shift, 5   @ bitWidth 1 (Mask Overrun Error Interrupt)  
        .equ UART1_FRAME_Shift, 6   @ bitWidth 1 (Mask Framing Error Interrupt)  
        .equ UART1_PARE_Shift, 7   @ bitWidth 1 (Mask Parity Error Interrupt)  
        .equ UART1_TXEMPTY_Shift, 9   @ bitWidth 1 (Mask TXEMPTY Interrupt)  
        .equ UART1_CMP_Shift, 15   @ bitWidth 1 (Mask Comparison Interrupt)  
 
    .equ UART1_SR, UART1_BASE + 0x0014 @ (Status Register) 
        .equ UART1_RXRDY_Shift, 0   @ bitWidth 1 (Receiver Ready)  
        .equ UART1_TXRDY_Shift, 1   @ bitWidth 1 (Transmitter Ready)  
        .equ UART1_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error)  
        .equ UART1_FRAME_Shift, 6   @ bitWidth 1 (Framing Error)  
        .equ UART1_PARE_Shift, 7   @ bitWidth 1 (Parity Error)  
        .equ UART1_TXEMPTY_Shift, 9   @ bitWidth 1 (Transmitter Empty)  
        .equ UART1_CMP_Shift, 15   @ bitWidth 1 (Comparison Match)  
 
    .equ UART1_RHR, UART1_BASE + 0x0018 @ (Receive Holding Register) 
        .equ UART1_RXCHR_Shift, 0   @ bitWidth 8 (Received Character)  
 
    .equ UART1_THR, UART1_BASE + 0x001C @ (Transmit Holding Register) 
        .equ UART1_TXCHR_Shift, 0   @ bitWidth 8 (Character to be Transmitted)  
 
    .equ UART1_BRGR, UART1_BASE + 0x0020 @ (Baud Rate Generator Register) 
        .equ UART1_CD_Shift, 0   @ bitWidth 16 (Clock Divisor)  
 
    .equ UART1_CMPR, UART1_BASE + 0x0024 @ (Comparison Register) 
        .equ UART1_VAL1_Shift, 0   @ bitWidth 8 (First Comparison Value for Received Character)  
        .equ UART1_CMPMODE_Shift, 12   @ bitWidth 1 (Comparison Mode)  
        .equ UART1_CMPPAR_Shift, 14   @ bitWidth 1 (Compare Parity)  
        .equ UART1_VAL2_Shift, 16   @ bitWidth 8 (Second Comparison Value for Received Character)  
 
    .equ UART1_WPMR, UART1_BASE + 0x00E4 @ (Write Protection Mode Register) 
        .equ UART1_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ UART1_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 

@=========================== UART2 ===========================@
.equ UART2_BASE, 0x400E1A00 @ (Universal Asynchronous Receiver Transmitter) 
    .equ UART2_CR, UART2_BASE + 0x0000 @ (Control Register) 
        .equ UART2_RSTRX_Shift, 2   @ bitWidth 1 (Reset Receiver)  
        .equ UART2_RSTTX_Shift, 3   @ bitWidth 1 (Reset Transmitter)  
        .equ UART2_RXEN_Shift, 4   @ bitWidth 1 (Receiver Enable)  
        .equ UART2_RXDIS_Shift, 5   @ bitWidth 1 (Receiver Disable)  
        .equ UART2_TXEN_Shift, 6   @ bitWidth 1 (Transmitter Enable)  
        .equ UART2_TXDIS_Shift, 7   @ bitWidth 1 (Transmitter Disable)  
        .equ UART2_RSTSTA_Shift, 8   @ bitWidth 1 (Reset Status)  
        .equ UART2_REQCLR_Shift, 12   @ bitWidth 1 (Request Clear)  
 
    .equ UART2_MR, UART2_BASE + 0x0004 @ (Mode Register) 
        .equ UART2_FILTER_Shift, 4   @ bitWidth 1 (Receiver Digital Filter)  
        .equ UART2_PAR_Shift, 9   @ bitWidth 3 (Parity Type)  
        .equ UART2_BRSRCCK_Shift, 12   @ bitWidth 1 (Baud Rate Source Clock)  
        .equ UART2_CHMODE_Shift, 14   @ bitWidth 2 (Channel Mode)  
 
    .equ UART2_IER, UART2_BASE + 0x0008 @ (Interrupt Enable Register) 
        .equ UART2_RXRDY_Shift, 0   @ bitWidth 1 (Enable RXRDY Interrupt)  
        .equ UART2_TXRDY_Shift, 1   @ bitWidth 1 (Enable TXRDY Interrupt)  
        .equ UART2_OVRE_Shift, 5   @ bitWidth 1 (Enable Overrun Error Interrupt)  
        .equ UART2_FRAME_Shift, 6   @ bitWidth 1 (Enable Framing Error Interrupt)  
        .equ UART2_PARE_Shift, 7   @ bitWidth 1 (Enable Parity Error Interrupt)  
        .equ UART2_TXEMPTY_Shift, 9   @ bitWidth 1 (Enable TXEMPTY Interrupt)  
        .equ UART2_CMP_Shift, 15   @ bitWidth 1 (Enable Comparison Interrupt)  
 
    .equ UART2_IDR, UART2_BASE + 0x000C @ (Interrupt Disable Register) 
        .equ UART2_RXRDY_Shift, 0   @ bitWidth 1 (Disable RXRDY Interrupt)  
        .equ UART2_TXRDY_Shift, 1   @ bitWidth 1 (Disable TXRDY Interrupt)  
        .equ UART2_OVRE_Shift, 5   @ bitWidth 1 (Disable Overrun Error Interrupt)  
        .equ UART2_FRAME_Shift, 6   @ bitWidth 1 (Disable Framing Error Interrupt)  
        .equ UART2_PARE_Shift, 7   @ bitWidth 1 (Disable Parity Error Interrupt)  
        .equ UART2_TXEMPTY_Shift, 9   @ bitWidth 1 (Disable TXEMPTY Interrupt)  
        .equ UART2_CMP_Shift, 15   @ bitWidth 1 (Disable Comparison Interrupt)  
 
    .equ UART2_IMR, UART2_BASE + 0x0010 @ (Interrupt Mask Register) 
        .equ UART2_RXRDY_Shift, 0   @ bitWidth 1 (Mask RXRDY Interrupt)  
        .equ UART2_TXRDY_Shift, 1   @ bitWidth 1 (Disable TXRDY Interrupt)  
        .equ UART2_OVRE_Shift, 5   @ bitWidth 1 (Mask Overrun Error Interrupt)  
        .equ UART2_FRAME_Shift, 6   @ bitWidth 1 (Mask Framing Error Interrupt)  
        .equ UART2_PARE_Shift, 7   @ bitWidth 1 (Mask Parity Error Interrupt)  
        .equ UART2_TXEMPTY_Shift, 9   @ bitWidth 1 (Mask TXEMPTY Interrupt)  
        .equ UART2_CMP_Shift, 15   @ bitWidth 1 (Mask Comparison Interrupt)  
 
    .equ UART2_SR, UART2_BASE + 0x0014 @ (Status Register) 
        .equ UART2_RXRDY_Shift, 0   @ bitWidth 1 (Receiver Ready)  
        .equ UART2_TXRDY_Shift, 1   @ bitWidth 1 (Transmitter Ready)  
        .equ UART2_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error)  
        .equ UART2_FRAME_Shift, 6   @ bitWidth 1 (Framing Error)  
        .equ UART2_PARE_Shift, 7   @ bitWidth 1 (Parity Error)  
        .equ UART2_TXEMPTY_Shift, 9   @ bitWidth 1 (Transmitter Empty)  
        .equ UART2_CMP_Shift, 15   @ bitWidth 1 (Comparison Match)  
 
    .equ UART2_RHR, UART2_BASE + 0x0018 @ (Receive Holding Register) 
        .equ UART2_RXCHR_Shift, 0   @ bitWidth 8 (Received Character)  
 
    .equ UART2_THR, UART2_BASE + 0x001C @ (Transmit Holding Register) 
        .equ UART2_TXCHR_Shift, 0   @ bitWidth 8 (Character to be Transmitted)  
 
    .equ UART2_BRGR, UART2_BASE + 0x0020 @ (Baud Rate Generator Register) 
        .equ UART2_CD_Shift, 0   @ bitWidth 16 (Clock Divisor)  
 
    .equ UART2_CMPR, UART2_BASE + 0x0024 @ (Comparison Register) 
        .equ UART2_VAL1_Shift, 0   @ bitWidth 8 (First Comparison Value for Received Character)  
        .equ UART2_CMPMODE_Shift, 12   @ bitWidth 1 (Comparison Mode)  
        .equ UART2_CMPPAR_Shift, 14   @ bitWidth 1 (Compare Parity)  
        .equ UART2_VAL2_Shift, 16   @ bitWidth 8 (Second Comparison Value for Received Character)  
 
    .equ UART2_WPMR, UART2_BASE + 0x00E4 @ (Write Protection Mode Register) 
        .equ UART2_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ UART2_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 

@=========================== UART3 ===========================@
.equ UART3_BASE, 0x400E1C00 @ (Universal Asynchronous Receiver Transmitter) 
    .equ UART3_CR, UART3_BASE + 0x0000 @ (Control Register) 
        .equ UART3_RSTRX_Shift, 2   @ bitWidth 1 (Reset Receiver)  
        .equ UART3_RSTTX_Shift, 3   @ bitWidth 1 (Reset Transmitter)  
        .equ UART3_RXEN_Shift, 4   @ bitWidth 1 (Receiver Enable)  
        .equ UART3_RXDIS_Shift, 5   @ bitWidth 1 (Receiver Disable)  
        .equ UART3_TXEN_Shift, 6   @ bitWidth 1 (Transmitter Enable)  
        .equ UART3_TXDIS_Shift, 7   @ bitWidth 1 (Transmitter Disable)  
        .equ UART3_RSTSTA_Shift, 8   @ bitWidth 1 (Reset Status)  
        .equ UART3_REQCLR_Shift, 12   @ bitWidth 1 (Request Clear)  
 
    .equ UART3_MR, UART3_BASE + 0x0004 @ (Mode Register) 
        .equ UART3_FILTER_Shift, 4   @ bitWidth 1 (Receiver Digital Filter)  
        .equ UART3_PAR_Shift, 9   @ bitWidth 3 (Parity Type)  
        .equ UART3_BRSRCCK_Shift, 12   @ bitWidth 1 (Baud Rate Source Clock)  
        .equ UART3_CHMODE_Shift, 14   @ bitWidth 2 (Channel Mode)  
 
    .equ UART3_IER, UART3_BASE + 0x0008 @ (Interrupt Enable Register) 
        .equ UART3_RXRDY_Shift, 0   @ bitWidth 1 (Enable RXRDY Interrupt)  
        .equ UART3_TXRDY_Shift, 1   @ bitWidth 1 (Enable TXRDY Interrupt)  
        .equ UART3_OVRE_Shift, 5   @ bitWidth 1 (Enable Overrun Error Interrupt)  
        .equ UART3_FRAME_Shift, 6   @ bitWidth 1 (Enable Framing Error Interrupt)  
        .equ UART3_PARE_Shift, 7   @ bitWidth 1 (Enable Parity Error Interrupt)  
        .equ UART3_TXEMPTY_Shift, 9   @ bitWidth 1 (Enable TXEMPTY Interrupt)  
        .equ UART3_CMP_Shift, 15   @ bitWidth 1 (Enable Comparison Interrupt)  
 
    .equ UART3_IDR, UART3_BASE + 0x000C @ (Interrupt Disable Register) 
        .equ UART3_RXRDY_Shift, 0   @ bitWidth 1 (Disable RXRDY Interrupt)  
        .equ UART3_TXRDY_Shift, 1   @ bitWidth 1 (Disable TXRDY Interrupt)  
        .equ UART3_OVRE_Shift, 5   @ bitWidth 1 (Disable Overrun Error Interrupt)  
        .equ UART3_FRAME_Shift, 6   @ bitWidth 1 (Disable Framing Error Interrupt)  
        .equ UART3_PARE_Shift, 7   @ bitWidth 1 (Disable Parity Error Interrupt)  
        .equ UART3_TXEMPTY_Shift, 9   @ bitWidth 1 (Disable TXEMPTY Interrupt)  
        .equ UART3_CMP_Shift, 15   @ bitWidth 1 (Disable Comparison Interrupt)  
 
    .equ UART3_IMR, UART3_BASE + 0x0010 @ (Interrupt Mask Register) 
        .equ UART3_RXRDY_Shift, 0   @ bitWidth 1 (Mask RXRDY Interrupt)  
        .equ UART3_TXRDY_Shift, 1   @ bitWidth 1 (Disable TXRDY Interrupt)  
        .equ UART3_OVRE_Shift, 5   @ bitWidth 1 (Mask Overrun Error Interrupt)  
        .equ UART3_FRAME_Shift, 6   @ bitWidth 1 (Mask Framing Error Interrupt)  
        .equ UART3_PARE_Shift, 7   @ bitWidth 1 (Mask Parity Error Interrupt)  
        .equ UART3_TXEMPTY_Shift, 9   @ bitWidth 1 (Mask TXEMPTY Interrupt)  
        .equ UART3_CMP_Shift, 15   @ bitWidth 1 (Mask Comparison Interrupt)  
 
    .equ UART3_SR, UART3_BASE + 0x0014 @ (Status Register) 
        .equ UART3_RXRDY_Shift, 0   @ bitWidth 1 (Receiver Ready)  
        .equ UART3_TXRDY_Shift, 1   @ bitWidth 1 (Transmitter Ready)  
        .equ UART3_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error)  
        .equ UART3_FRAME_Shift, 6   @ bitWidth 1 (Framing Error)  
        .equ UART3_PARE_Shift, 7   @ bitWidth 1 (Parity Error)  
        .equ UART3_TXEMPTY_Shift, 9   @ bitWidth 1 (Transmitter Empty)  
        .equ UART3_CMP_Shift, 15   @ bitWidth 1 (Comparison Match)  
 
    .equ UART3_RHR, UART3_BASE + 0x0018 @ (Receive Holding Register) 
        .equ UART3_RXCHR_Shift, 0   @ bitWidth 8 (Received Character)  
 
    .equ UART3_THR, UART3_BASE + 0x001C @ (Transmit Holding Register) 
        .equ UART3_TXCHR_Shift, 0   @ bitWidth 8 (Character to be Transmitted)  
 
    .equ UART3_BRGR, UART3_BASE + 0x0020 @ (Baud Rate Generator Register) 
        .equ UART3_CD_Shift, 0   @ bitWidth 16 (Clock Divisor)  
 
    .equ UART3_CMPR, UART3_BASE + 0x0024 @ (Comparison Register) 
        .equ UART3_VAL1_Shift, 0   @ bitWidth 8 (First Comparison Value for Received Character)  
        .equ UART3_CMPMODE_Shift, 12   @ bitWidth 1 (Comparison Mode)  
        .equ UART3_CMPPAR_Shift, 14   @ bitWidth 1 (Compare Parity)  
        .equ UART3_VAL2_Shift, 16   @ bitWidth 8 (Second Comparison Value for Received Character)  
 
    .equ UART3_WPMR, UART3_BASE + 0x00E4 @ (Write Protection Mode Register) 
        .equ UART3_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ UART3_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 

@=========================== UART4 ===========================@
.equ UART4_BASE, 0x400E1E00 @ (Universal Asynchronous Receiver Transmitter) 
    .equ UART4_CR, UART4_BASE + 0x0000 @ (Control Register) 
        .equ UART4_RSTRX_Shift, 2   @ bitWidth 1 (Reset Receiver)  
        .equ UART4_RSTTX_Shift, 3   @ bitWidth 1 (Reset Transmitter)  
        .equ UART4_RXEN_Shift, 4   @ bitWidth 1 (Receiver Enable)  
        .equ UART4_RXDIS_Shift, 5   @ bitWidth 1 (Receiver Disable)  
        .equ UART4_TXEN_Shift, 6   @ bitWidth 1 (Transmitter Enable)  
        .equ UART4_TXDIS_Shift, 7   @ bitWidth 1 (Transmitter Disable)  
        .equ UART4_RSTSTA_Shift, 8   @ bitWidth 1 (Reset Status)  
        .equ UART4_REQCLR_Shift, 12   @ bitWidth 1 (Request Clear)  
 
    .equ UART4_MR, UART4_BASE + 0x0004 @ (Mode Register) 
        .equ UART4_FILTER_Shift, 4   @ bitWidth 1 (Receiver Digital Filter)  
        .equ UART4_PAR_Shift, 9   @ bitWidth 3 (Parity Type)  
        .equ UART4_BRSRCCK_Shift, 12   @ bitWidth 1 (Baud Rate Source Clock)  
        .equ UART4_CHMODE_Shift, 14   @ bitWidth 2 (Channel Mode)  
 
    .equ UART4_IER, UART4_BASE + 0x0008 @ (Interrupt Enable Register) 
        .equ UART4_RXRDY_Shift, 0   @ bitWidth 1 (Enable RXRDY Interrupt)  
        .equ UART4_TXRDY_Shift, 1   @ bitWidth 1 (Enable TXRDY Interrupt)  
        .equ UART4_OVRE_Shift, 5   @ bitWidth 1 (Enable Overrun Error Interrupt)  
        .equ UART4_FRAME_Shift, 6   @ bitWidth 1 (Enable Framing Error Interrupt)  
        .equ UART4_PARE_Shift, 7   @ bitWidth 1 (Enable Parity Error Interrupt)  
        .equ UART4_TXEMPTY_Shift, 9   @ bitWidth 1 (Enable TXEMPTY Interrupt)  
        .equ UART4_CMP_Shift, 15   @ bitWidth 1 (Enable Comparison Interrupt)  
 
    .equ UART4_IDR, UART4_BASE + 0x000C @ (Interrupt Disable Register) 
        .equ UART4_RXRDY_Shift, 0   @ bitWidth 1 (Disable RXRDY Interrupt)  
        .equ UART4_TXRDY_Shift, 1   @ bitWidth 1 (Disable TXRDY Interrupt)  
        .equ UART4_OVRE_Shift, 5   @ bitWidth 1 (Disable Overrun Error Interrupt)  
        .equ UART4_FRAME_Shift, 6   @ bitWidth 1 (Disable Framing Error Interrupt)  
        .equ UART4_PARE_Shift, 7   @ bitWidth 1 (Disable Parity Error Interrupt)  
        .equ UART4_TXEMPTY_Shift, 9   @ bitWidth 1 (Disable TXEMPTY Interrupt)  
        .equ UART4_CMP_Shift, 15   @ bitWidth 1 (Disable Comparison Interrupt)  
 
    .equ UART4_IMR, UART4_BASE + 0x0010 @ (Interrupt Mask Register) 
        .equ UART4_RXRDY_Shift, 0   @ bitWidth 1 (Mask RXRDY Interrupt)  
        .equ UART4_TXRDY_Shift, 1   @ bitWidth 1 (Disable TXRDY Interrupt)  
        .equ UART4_OVRE_Shift, 5   @ bitWidth 1 (Mask Overrun Error Interrupt)  
        .equ UART4_FRAME_Shift, 6   @ bitWidth 1 (Mask Framing Error Interrupt)  
        .equ UART4_PARE_Shift, 7   @ bitWidth 1 (Mask Parity Error Interrupt)  
        .equ UART4_TXEMPTY_Shift, 9   @ bitWidth 1 (Mask TXEMPTY Interrupt)  
        .equ UART4_CMP_Shift, 15   @ bitWidth 1 (Mask Comparison Interrupt)  
 
    .equ UART4_SR, UART4_BASE + 0x0014 @ (Status Register) 
        .equ UART4_RXRDY_Shift, 0   @ bitWidth 1 (Receiver Ready)  
        .equ UART4_TXRDY_Shift, 1   @ bitWidth 1 (Transmitter Ready)  
        .equ UART4_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error)  
        .equ UART4_FRAME_Shift, 6   @ bitWidth 1 (Framing Error)  
        .equ UART4_PARE_Shift, 7   @ bitWidth 1 (Parity Error)  
        .equ UART4_TXEMPTY_Shift, 9   @ bitWidth 1 (Transmitter Empty)  
        .equ UART4_CMP_Shift, 15   @ bitWidth 1 (Comparison Match)  
 
    .equ UART4_RHR, UART4_BASE + 0x0018 @ (Receive Holding Register) 
        .equ UART4_RXCHR_Shift, 0   @ bitWidth 8 (Received Character)  
 
    .equ UART4_THR, UART4_BASE + 0x001C @ (Transmit Holding Register) 
        .equ UART4_TXCHR_Shift, 0   @ bitWidth 8 (Character to be Transmitted)  
 
    .equ UART4_BRGR, UART4_BASE + 0x0020 @ (Baud Rate Generator Register) 
        .equ UART4_CD_Shift, 0   @ bitWidth 16 (Clock Divisor)  
 
    .equ UART4_CMPR, UART4_BASE + 0x0024 @ (Comparison Register) 
        .equ UART4_VAL1_Shift, 0   @ bitWidth 8 (First Comparison Value for Received Character)  
        .equ UART4_CMPMODE_Shift, 12   @ bitWidth 1 (Comparison Mode)  
        .equ UART4_CMPPAR_Shift, 14   @ bitWidth 1 (Compare Parity)  
        .equ UART4_VAL2_Shift, 16   @ bitWidth 8 (Second Comparison Value for Received Character)  
 
    .equ UART4_WPMR, UART4_BASE + 0x00E4 @ (Write Protection Mode Register) 
        .equ UART4_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ UART4_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 

@=========================== USART0 ===========================@
.equ USART0_BASE, 0x40024000 @ (Universal Synchronous Asynchronous Receiver Transmitter) 
    .equ USART0_US_CR, USART0_BASE + 0x0000 @ (Control Register) 
        .equ USART0_RSTRX_Shift, 2   @ bitWidth 1 (Reset Receiver)  
        .equ USART0_RSTTX_Shift, 3   @ bitWidth 1 (Reset Transmitter)  
        .equ USART0_RXEN_Shift, 4   @ bitWidth 1 (Receiver Enable)  
        .equ USART0_RXDIS_Shift, 5   @ bitWidth 1 (Receiver Disable)  
        .equ USART0_TXEN_Shift, 6   @ bitWidth 1 (Transmitter Enable)  
        .equ USART0_TXDIS_Shift, 7   @ bitWidth 1 (Transmitter Disable)  
        .equ USART0_RSTSTA_Shift, 8   @ bitWidth 1 (Reset Status Bits)  
        .equ USART0_STTBRK_Shift, 9   @ bitWidth 1 (Start Break)  
        .equ USART0_STPBRK_Shift, 10   @ bitWidth 1 (Stop Break)  
        .equ USART0_STTTO_Shift, 11   @ bitWidth 1 (Clear TIMEOUT Flag and Start Time-out After Next Character Received)  
        .equ USART0_SENDA_Shift, 12   @ bitWidth 1 (Send Address)  
        .equ USART0_RSTIT_Shift, 13   @ bitWidth 1 (Reset Iterations)  
        .equ USART0_RSTNACK_Shift, 14   @ bitWidth 1 (Reset Non Acknowledge)  
        .equ USART0_RETTO_Shift, 15   @ bitWidth 1 (Start Time-out Immediately)  
        .equ USART0_DTREN_Shift, 16   @ bitWidth 1 (Data Terminal Ready Enable)  
        .equ USART0_DTRDIS_Shift, 17   @ bitWidth 1 (Data Terminal Ready Disable)  
        .equ USART0_RTSEN_Shift, 18   @ bitWidth 1 (Request to Send Pin Control)  
        .equ USART0_RTSDIS_Shift, 19   @ bitWidth 1 (Request to Send Pin Control)  
        .equ USART0_LINABT_Shift, 20   @ bitWidth 1 (Abort LIN Transmission)  
        .equ USART0_LINWKUP_Shift, 21   @ bitWidth 1 (Send LIN Wakeup Signal)  
 
    .equ USART0_US_MR, USART0_BASE + 0x0004 @ (Mode Register) 
        .equ USART0_USART_MODE_Shift, 0   @ bitWidth 4 (USART Mode of Operation)  
        .equ USART0_USCLKS_Shift, 4   @ bitWidth 2 (Clock Selection)  
        .equ USART0_CHRL_Shift, 6   @ bitWidth 2 (Character Length)  
        .equ USART0_SYNC_Shift, 8   @ bitWidth 1 (Synchronous Mode Select)  
        .equ USART0_PAR_Shift, 9   @ bitWidth 3 (Parity Type)  
        .equ USART0_NBSTOP_Shift, 12   @ bitWidth 2 (Number of Stop Bits)  
        .equ USART0_CHMODE_Shift, 14   @ bitWidth 2 (Channel Mode)  
        .equ USART0_MSBF_Shift, 16   @ bitWidth 1 (Bit Order)  
        .equ USART0_MODE9_Shift, 17   @ bitWidth 1 (9-bit Character Length)  
        .equ USART0_CLKO_Shift, 18   @ bitWidth 1 (Clock Output Select)  
        .equ USART0_OVER_Shift, 19   @ bitWidth 1 (Oversampling Mode)  
        .equ USART0_INACK_Shift, 20   @ bitWidth 1 (Inhibit Non Acknowledge)  
        .equ USART0_DSNACK_Shift, 21   @ bitWidth 1 (Disable Successive NACK)  
        .equ USART0_VAR_SYNC_Shift, 22   @ bitWidth 1 (Variable Synchronization of Command/Data Sync Start Frame Delimiter)  
        .equ USART0_INVDATA_Shift, 23   @ bitWidth 1 (Inverted Data)  
        .equ USART0_MAX_ITERATION_Shift, 24   @ bitWidth 3 (Maximum Number of Automatic Iteration)  
        .equ USART0_FILTER_Shift, 28   @ bitWidth 1 (Receive Line Filter)  
        .equ USART0_MAN_Shift, 29   @ bitWidth 1 (Manchester Encoder/Decoder Enable)  
        .equ USART0_MODSYNC_Shift, 30   @ bitWidth 1 (Manchester Synchronization Mode)  
        .equ USART0_ONEBIT_Shift, 31   @ bitWidth 1 (Start Frame Delimiter Selector)  
 
    .equ USART0_US_IER, USART0_BASE + 0x0008 @ (Interrupt Enable Register) 
        .equ USART0_RXRDY_Shift, 0   @ bitWidth 1 (RXRDY Interrupt Enable)  
        .equ USART0_TXRDY_Shift, 1   @ bitWidth 1 (TXRDY Interrupt Enable)  
        .equ USART0_RXBRK_Shift, 2   @ bitWidth 1 (Receiver Break Interrupt Enable)  
        .equ USART0_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error Interrupt Enable)  
        .equ USART0_FRAME_Shift, 6   @ bitWidth 1 (Framing Error Interrupt Enable)  
        .equ USART0_PARE_Shift, 7   @ bitWidth 1 (Parity Error Interrupt Enable)  
        .equ USART0_TIMEOUT_Shift, 8   @ bitWidth 1 (Time-out Interrupt Enable)  
        .equ USART0_TXEMPTY_Shift, 9   @ bitWidth 1 (TXEMPTY Interrupt Enable)  
        .equ USART0_ITER_Shift, 10   @ bitWidth 1 (Max number of Repetitions Reached Interrupt Enable)  
        .equ USART0_NACK_Shift, 13   @ bitWidth 1 (Non Acknowledge Interrupt Enable)  
        .equ USART0_RIIC_Shift, 16   @ bitWidth 1 (Ring Indicator Input Change Enable)  
        .equ USART0_DSRIC_Shift, 17   @ bitWidth 1 (Data Set Ready Input Change Enable)  
        .equ USART0_DCDIC_Shift, 18   @ bitWidth 1 (Data Carrier Detect Input Change Interrupt Enable)  
        .equ USART0_CTSIC_Shift, 19   @ bitWidth 1 (Clear to Send Input Change Interrupt Enable)  
        .equ USART0_MANE_Shift, 24   @ bitWidth 1 (Manchester Error Interrupt Enable)  
 
    .equ USART0_US_IDR, USART0_BASE + 0x000C @ (Interrupt Disable Register) 
        .equ USART0_RXRDY_Shift, 0   @ bitWidth 1 (RXRDY Interrupt Disable)  
        .equ USART0_TXRDY_Shift, 1   @ bitWidth 1 (TXRDY Interrupt Disable)  
        .equ USART0_RXBRK_Shift, 2   @ bitWidth 1 (Receiver Break Interrupt Disable)  
        .equ USART0_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error Interrupt Enable)  
        .equ USART0_FRAME_Shift, 6   @ bitWidth 1 (Framing Error Interrupt Disable)  
        .equ USART0_PARE_Shift, 7   @ bitWidth 1 (Parity Error Interrupt Disable)  
        .equ USART0_TIMEOUT_Shift, 8   @ bitWidth 1 (Time-out Interrupt Disable)  
        .equ USART0_TXEMPTY_Shift, 9   @ bitWidth 1 (TXEMPTY Interrupt Disable)  
        .equ USART0_ITER_Shift, 10   @ bitWidth 1 (Max Number of Repetitions Reached Interrupt Disable)  
        .equ USART0_NACK_Shift, 13   @ bitWidth 1 (Non Acknowledge Interrupt Disable)  
        .equ USART0_RIIC_Shift, 16   @ bitWidth 1 (Ring Indicator Input Change Disable)  
        .equ USART0_DSRIC_Shift, 17   @ bitWidth 1 (Data Set Ready Input Change Disable)  
        .equ USART0_DCDIC_Shift, 18   @ bitWidth 1 (Data Carrier Detect Input Change Interrupt Disable)  
        .equ USART0_CTSIC_Shift, 19   @ bitWidth 1 (Clear to Send Input Change Interrupt Disable)  
        .equ USART0_MANE_Shift, 24   @ bitWidth 1 (Manchester Error Interrupt Disable)  
 
    .equ USART0_US_IMR, USART0_BASE + 0x0010 @ (Interrupt Mask Register) 
        .equ USART0_RXRDY_Shift, 0   @ bitWidth 1 (RXRDY Interrupt Mask)  
        .equ USART0_TXRDY_Shift, 1   @ bitWidth 1 (TXRDY Interrupt Mask)  
        .equ USART0_RXBRK_Shift, 2   @ bitWidth 1 (Receiver Break Interrupt Mask)  
        .equ USART0_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error Interrupt Mask)  
        .equ USART0_FRAME_Shift, 6   @ bitWidth 1 (Framing Error Interrupt Mask)  
        .equ USART0_PARE_Shift, 7   @ bitWidth 1 (Parity Error Interrupt Mask)  
        .equ USART0_TIMEOUT_Shift, 8   @ bitWidth 1 (Time-out Interrupt Mask)  
        .equ USART0_TXEMPTY_Shift, 9   @ bitWidth 1 (TXEMPTY Interrupt Mask)  
        .equ USART0_ITER_Shift, 10   @ bitWidth 1 (Max Number of Repetitions Reached Interrupt Mask)  
        .equ USART0_NACK_Shift, 13   @ bitWidth 1 (Non Acknowledge Interrupt Mask)  
        .equ USART0_RIIC_Shift, 16   @ bitWidth 1 (Ring Indicator Input Change Mask)  
        .equ USART0_DSRIC_Shift, 17   @ bitWidth 1 (Data Set Ready Input Change Mask)  
        .equ USART0_DCDIC_Shift, 18   @ bitWidth 1 (Data Carrier Detect Input Change Interrupt Mask)  
        .equ USART0_CTSIC_Shift, 19   @ bitWidth 1 (Clear to Send Input Change Interrupt Mask)  
        .equ USART0_MANE_Shift, 24   @ bitWidth 1 (Manchester Error Interrupt Mask)  
 
    .equ USART0_US_CSR, USART0_BASE + 0x0014 @ (Channel Status Register) 
        .equ USART0_RXRDY_Shift, 0   @ bitWidth 1 (Receiver Ready cleared by reading US_RHR)  
        .equ USART0_TXRDY_Shift, 1   @ bitWidth 1 (Transmitter Ready cleared by writing US_THR)  
        .equ USART0_RXBRK_Shift, 2   @ bitWidth 1 (Break Received/End of Break cleared by writing a one to bit US_CR.RSTSTA)  
        .equ USART0_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error cleared by writing a one to bit US_CR.RSTSTA)  
        .equ USART0_FRAME_Shift, 6   @ bitWidth 1 (Framing Error cleared by writing a one to bit US_CR.RSTSTA)  
        .equ USART0_PARE_Shift, 7   @ bitWidth 1 (Parity Error cleared by writing a one to bit US_CR.RSTSTA)  
        .equ USART0_TIMEOUT_Shift, 8   @ bitWidth 1 (Receiver Time-out cleared by writing a one to bit US_CR.STTTO)  
        .equ USART0_TXEMPTY_Shift, 9   @ bitWidth 1 (Transmitter Empty cleared by writing US_THR)  
        .equ USART0_ITER_Shift, 10   @ bitWidth 1 (Max Number of Repetitions Reached cleared by writing a one to bit US_CR.RSTIT)  
        .equ USART0_NACK_Shift, 13   @ bitWidth 1 (Non Acknowledge Interrupt cleared by writing a one to bit US_CR.RSTNACK)  
        .equ USART0_RIIC_Shift, 16   @ bitWidth 1 (Ring Indicator Input Change Flag cleared on read)  
        .equ USART0_DSRIC_Shift, 17   @ bitWidth 1 (Data Set Ready Input Change Flag cleared on read)  
        .equ USART0_DCDIC_Shift, 18   @ bitWidth 1 (Data Carrier Detect Input Change Flag cleared on read)  
        .equ USART0_CTSIC_Shift, 19   @ bitWidth 1 (Clear to Send Input Change Flag cleared on read)  
        .equ USART0_RI_Shift, 20   @ bitWidth 1 (Image of RI Input)  
        .equ USART0_DSR_Shift, 21   @ bitWidth 1 (Image of DSR Input)  
        .equ USART0_DCD_Shift, 22   @ bitWidth 1 (Image of DCD Input)  
        .equ USART0_CTS_Shift, 23   @ bitWidth 1 (Image of CTS Input)  
        .equ USART0_MANERR_Shift, 24   @ bitWidth 1 (Manchester Error cleared by writing a one to the bit US_CR.RSTSTA)  
 
    .equ USART0_US_RHR, USART0_BASE + 0x0018 @ (Receive Holding Register) 
        .equ USART0_RXCHR_Shift, 0   @ bitWidth 9 (Received Character)  
        .equ USART0_RXSYNH_Shift, 15   @ bitWidth 1 (Received Sync)  
 
    .equ USART0_US_THR, USART0_BASE + 0x001C @ (Transmit Holding Register) 
        .equ USART0_TXCHR_Shift, 0   @ bitWidth 9 (Character to be Transmitted)  
        .equ USART0_TXSYNH_Shift, 15   @ bitWidth 1 (Sync Field to be Transmitted)  
 
    .equ USART0_US_BRGR, USART0_BASE + 0x0020 @ (Baud Rate Generator Register) 
        .equ USART0_CD_Shift, 0   @ bitWidth 16 (Clock Divider)  
        .equ USART0_FP_Shift, 16   @ bitWidth 3 (Fractional Part)  
 
    .equ USART0_US_RTOR, USART0_BASE + 0x0024 @ (Receiver Time-out Register) 
        .equ USART0_TO_Shift, 0   @ bitWidth 17 (Time-out Value)  
 
    .equ USART0_US_TTGR, USART0_BASE + 0x0028 @ (Transmitter Timeguard Register) 
        .equ USART0_TG_Shift, 0   @ bitWidth 8 (Timeguard Value)  
 
    .equ USART0_US_FIDI, USART0_BASE + 0x0040 @ (FI DI Ratio Register) 
        .equ USART0_FI_DI_RATIO_Shift, 0   @ bitWidth 16 (FI Over DI Ratio Value)  
 
    .equ USART0_US_NER, USART0_BASE + 0x0044 @ (Number of Errors Register) 
        .equ USART0_NB_ERRORS_Shift, 0   @ bitWidth 8 (Number of Errors)  
 
    .equ USART0_US_IF, USART0_BASE + 0x004C @ (IrDA Filter Register) 
        .equ USART0_IRDA_FILTER_Shift, 0   @ bitWidth 8 (IrDA Filter)  
 
    .equ USART0_US_MAN, USART0_BASE + 0x0050 @ (Manchester Configuration Register) 
        .equ USART0_TX_PL_Shift, 0   @ bitWidth 4 (Transmitter Preamble Length)  
        .equ USART0_TX_PP_Shift, 8   @ bitWidth 2 (Transmitter Preamble Pattern)  
        .equ USART0_TX_MPOL_Shift, 12   @ bitWidth 1 (Transmitter Manchester Polarity)  
        .equ USART0_RX_PL_Shift, 16   @ bitWidth 4 (Receiver Preamble Length)  
        .equ USART0_RX_PP_Shift, 24   @ bitWidth 2 (Receiver Preamble Pattern detected)  
        .equ USART0_RX_MPOL_Shift, 28   @ bitWidth 1 (Receiver Manchester Polarity)  
        .equ USART0_ONE_Shift, 29   @ bitWidth 1 (Must Be Set to 1)  
        .equ USART0_DRIFT_Shift, 30   @ bitWidth 1 (Drift Compensation)  
        .equ USART0_RXIDLEV_Shift, 31   @ bitWidth 1 ()  
 
    .equ USART0_US_LINMR, USART0_BASE + 0x0054 @ (LIN Mode Register) 
        .equ USART0_NACT_Shift, 0   @ bitWidth 2 (LIN Node Action)  
        .equ USART0_PARDIS_Shift, 2   @ bitWidth 1 (Parity Disable)  
        .equ USART0_CHKDIS_Shift, 3   @ bitWidth 1 (Checksum Disable)  
        .equ USART0_CHKTYP_Shift, 4   @ bitWidth 1 (Checksum Type)  
        .equ USART0_DLM_Shift, 5   @ bitWidth 1 (Data Length Mode)  
        .equ USART0_FSDIS_Shift, 6   @ bitWidth 1 (Frame Slot Mode Disable)  
        .equ USART0_WKUPTYP_Shift, 7   @ bitWidth 1 (Wakeup Signal Type)  
        .equ USART0_DLC_Shift, 8   @ bitWidth 8 (Data Length Control)  
        .equ USART0_PDCM_Shift, 16   @ bitWidth 1 (DMAC Mode)  
        .equ USART0_SYNCDIS_Shift, 17   @ bitWidth 1 (Synchronization Disable)  
 
    .equ USART0_US_LINIR, USART0_BASE + 0x0058 @ (LIN Identifier Register) 
        .equ USART0_IDCHR_Shift, 0   @ bitWidth 8 (Identifier Character)  
 
    .equ USART0_US_LINBRR, USART0_BASE + 0x005C @ (LIN Baud Rate Register) 
        .equ USART0_LINCD_Shift, 0   @ bitWidth 16 (Clock Divider after Synchronization)  
        .equ USART0_LINFP_Shift, 16   @ bitWidth 3 (Fractional Part after Synchronization)  
 
    .equ USART0_US_LONMR, USART0_BASE + 0x0060 @ (LON Mode Register) 
        .equ USART0_COMMT_Shift, 0   @ bitWidth 1 (LON comm_type Parameter Value)  
        .equ USART0_COLDET_Shift, 1   @ bitWidth 1 (LON Collision Detection Feature)  
        .equ USART0_TCOL_Shift, 2   @ bitWidth 1 (Terminate Frame upon Collision Notification)  
        .equ USART0_CDTAIL_Shift, 3   @ bitWidth 1 (LON Collision Detection on Frame Tail)  
        .equ USART0_DMAM_Shift, 4   @ bitWidth 1 (LON DMA Mode)  
        .equ USART0_LCDS_Shift, 5   @ bitWidth 1 (LON Collision Detection Source)  
        .equ USART0_EOFS_Shift, 16   @ bitWidth 8 (End of Frame Condition Size)  
 
    .equ USART0_US_LONPR, USART0_BASE + 0x0064 @ (LON Preamble Register) 
        .equ USART0_LONPL_Shift, 0   @ bitWidth 14 (LON Preamble Length)  
 
    .equ USART0_US_LONDL, USART0_BASE + 0x0068 @ (LON Data Length Register) 
        .equ USART0_LONDL_Shift, 0   @ bitWidth 8 (LON Data Length)  
 
    .equ USART0_US_LONL2HDR, USART0_BASE + 0x006C @ (LON L2HDR Register) 
        .equ USART0_BLI_Shift, 0   @ bitWidth 6 (LON Backlog Increment)  
        .equ USART0_ALTP_Shift, 6   @ bitWidth 1 (LON Alternate Path Bit)  
        .equ USART0_PB_Shift, 7   @ bitWidth 1 (LON Priority Bit)  
 
    .equ USART0_US_LONBL, USART0_BASE + 0x0070 @ (LON Backlog Register) 
        .equ USART0_LONBL_Shift, 0   @ bitWidth 6 (LON Node Backlog Value)  
 
    .equ USART0_US_LONB1TX, USART0_BASE + 0x0074 @ (LON Beta1 Tx Register) 
        .equ USART0_BETA1TX_Shift, 0   @ bitWidth 24 (LON Beta1 Length after Transmission)  
 
    .equ USART0_US_LONB1RX, USART0_BASE + 0x0078 @ (LON Beta1 Rx Register) 
        .equ USART0_BETA1RX_Shift, 0   @ bitWidth 24 (LON Beta1 Length after Reception)  
 
    .equ USART0_US_LONPRIO, USART0_BASE + 0x007C @ (LON Priority Register) 
        .equ USART0_PSNB_Shift, 0   @ bitWidth 7 (LON Priority Slot Number)  
        .equ USART0_NPS_Shift, 8   @ bitWidth 7 (LON Node Priority Slot)  
 
    .equ USART0_US_IDTTX, USART0_BASE + 0x0080 @ (LON IDT Tx Register) 
        .equ USART0_IDTTX_Shift, 0   @ bitWidth 24 (LON Indeterminate Time after Transmission comm_type = 1 mode only)  
 
    .equ USART0_US_IDTRX, USART0_BASE + 0x0084 @ (LON IDT Rx Register) 
        .equ USART0_IDTRX_Shift, 0   @ bitWidth 24 (LON Indeterminate Time after Reception comm_type = 1 mode only)  
 
    .equ USART0_US_ICDIFF, USART0_BASE + 0x0088 @ (IC DIFF Register) 
        .equ USART0_ICDIFF_Shift, 0   @ bitWidth 4 (IC Differentiator Number)  
 
    .equ USART0_US_WPMR, USART0_BASE + 0x00E4 @ (Write Protection Mode Register) 
        .equ USART0_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ USART0_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ USART0_US_WPSR, USART0_BASE + 0x00E8 @ (Write Protection Status Register) 
        .equ USART0_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ USART0_WPVSRC_Shift, 8   @ bitWidth 16 (Write Protection Violation Source)  
 

@=========================== USART1 ===========================@
.equ USART1_BASE, 0x40028000 @ (Universal Synchronous Asynchronous Receiver Transmitter) 
    .equ USART1_US_CR, USART1_BASE + 0x0000 @ (Control Register) 
        .equ USART1_RSTRX_Shift, 2   @ bitWidth 1 (Reset Receiver)  
        .equ USART1_RSTTX_Shift, 3   @ bitWidth 1 (Reset Transmitter)  
        .equ USART1_RXEN_Shift, 4   @ bitWidth 1 (Receiver Enable)  
        .equ USART1_RXDIS_Shift, 5   @ bitWidth 1 (Receiver Disable)  
        .equ USART1_TXEN_Shift, 6   @ bitWidth 1 (Transmitter Enable)  
        .equ USART1_TXDIS_Shift, 7   @ bitWidth 1 (Transmitter Disable)  
        .equ USART1_RSTSTA_Shift, 8   @ bitWidth 1 (Reset Status Bits)  
        .equ USART1_STTBRK_Shift, 9   @ bitWidth 1 (Start Break)  
        .equ USART1_STPBRK_Shift, 10   @ bitWidth 1 (Stop Break)  
        .equ USART1_STTTO_Shift, 11   @ bitWidth 1 (Clear TIMEOUT Flag and Start Time-out After Next Character Received)  
        .equ USART1_SENDA_Shift, 12   @ bitWidth 1 (Send Address)  
        .equ USART1_RSTIT_Shift, 13   @ bitWidth 1 (Reset Iterations)  
        .equ USART1_RSTNACK_Shift, 14   @ bitWidth 1 (Reset Non Acknowledge)  
        .equ USART1_RETTO_Shift, 15   @ bitWidth 1 (Start Time-out Immediately)  
        .equ USART1_DTREN_Shift, 16   @ bitWidth 1 (Data Terminal Ready Enable)  
        .equ USART1_DTRDIS_Shift, 17   @ bitWidth 1 (Data Terminal Ready Disable)  
        .equ USART1_RTSEN_Shift, 18   @ bitWidth 1 (Request to Send Pin Control)  
        .equ USART1_RTSDIS_Shift, 19   @ bitWidth 1 (Request to Send Pin Control)  
        .equ USART1_LINABT_Shift, 20   @ bitWidth 1 (Abort LIN Transmission)  
        .equ USART1_LINWKUP_Shift, 21   @ bitWidth 1 (Send LIN Wakeup Signal)  
 
    .equ USART1_US_MR, USART1_BASE + 0x0004 @ (Mode Register) 
        .equ USART1_USART_MODE_Shift, 0   @ bitWidth 4 (USART Mode of Operation)  
        .equ USART1_USCLKS_Shift, 4   @ bitWidth 2 (Clock Selection)  
        .equ USART1_CHRL_Shift, 6   @ bitWidth 2 (Character Length)  
        .equ USART1_SYNC_Shift, 8   @ bitWidth 1 (Synchronous Mode Select)  
        .equ USART1_PAR_Shift, 9   @ bitWidth 3 (Parity Type)  
        .equ USART1_NBSTOP_Shift, 12   @ bitWidth 2 (Number of Stop Bits)  
        .equ USART1_CHMODE_Shift, 14   @ bitWidth 2 (Channel Mode)  
        .equ USART1_MSBF_Shift, 16   @ bitWidth 1 (Bit Order)  
        .equ USART1_MODE9_Shift, 17   @ bitWidth 1 (9-bit Character Length)  
        .equ USART1_CLKO_Shift, 18   @ bitWidth 1 (Clock Output Select)  
        .equ USART1_OVER_Shift, 19   @ bitWidth 1 (Oversampling Mode)  
        .equ USART1_INACK_Shift, 20   @ bitWidth 1 (Inhibit Non Acknowledge)  
        .equ USART1_DSNACK_Shift, 21   @ bitWidth 1 (Disable Successive NACK)  
        .equ USART1_VAR_SYNC_Shift, 22   @ bitWidth 1 (Variable Synchronization of Command/Data Sync Start Frame Delimiter)  
        .equ USART1_INVDATA_Shift, 23   @ bitWidth 1 (Inverted Data)  
        .equ USART1_MAX_ITERATION_Shift, 24   @ bitWidth 3 (Maximum Number of Automatic Iteration)  
        .equ USART1_FILTER_Shift, 28   @ bitWidth 1 (Receive Line Filter)  
        .equ USART1_MAN_Shift, 29   @ bitWidth 1 (Manchester Encoder/Decoder Enable)  
        .equ USART1_MODSYNC_Shift, 30   @ bitWidth 1 (Manchester Synchronization Mode)  
        .equ USART1_ONEBIT_Shift, 31   @ bitWidth 1 (Start Frame Delimiter Selector)  
 
    .equ USART1_US_IER, USART1_BASE + 0x0008 @ (Interrupt Enable Register) 
        .equ USART1_RXRDY_Shift, 0   @ bitWidth 1 (RXRDY Interrupt Enable)  
        .equ USART1_TXRDY_Shift, 1   @ bitWidth 1 (TXRDY Interrupt Enable)  
        .equ USART1_RXBRK_Shift, 2   @ bitWidth 1 (Receiver Break Interrupt Enable)  
        .equ USART1_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error Interrupt Enable)  
        .equ USART1_FRAME_Shift, 6   @ bitWidth 1 (Framing Error Interrupt Enable)  
        .equ USART1_PARE_Shift, 7   @ bitWidth 1 (Parity Error Interrupt Enable)  
        .equ USART1_TIMEOUT_Shift, 8   @ bitWidth 1 (Time-out Interrupt Enable)  
        .equ USART1_TXEMPTY_Shift, 9   @ bitWidth 1 (TXEMPTY Interrupt Enable)  
        .equ USART1_ITER_Shift, 10   @ bitWidth 1 (Max number of Repetitions Reached Interrupt Enable)  
        .equ USART1_NACK_Shift, 13   @ bitWidth 1 (Non Acknowledge Interrupt Enable)  
        .equ USART1_RIIC_Shift, 16   @ bitWidth 1 (Ring Indicator Input Change Enable)  
        .equ USART1_DSRIC_Shift, 17   @ bitWidth 1 (Data Set Ready Input Change Enable)  
        .equ USART1_DCDIC_Shift, 18   @ bitWidth 1 (Data Carrier Detect Input Change Interrupt Enable)  
        .equ USART1_CTSIC_Shift, 19   @ bitWidth 1 (Clear to Send Input Change Interrupt Enable)  
        .equ USART1_MANE_Shift, 24   @ bitWidth 1 (Manchester Error Interrupt Enable)  
 
    .equ USART1_US_IDR, USART1_BASE + 0x000C @ (Interrupt Disable Register) 
        .equ USART1_RXRDY_Shift, 0   @ bitWidth 1 (RXRDY Interrupt Disable)  
        .equ USART1_TXRDY_Shift, 1   @ bitWidth 1 (TXRDY Interrupt Disable)  
        .equ USART1_RXBRK_Shift, 2   @ bitWidth 1 (Receiver Break Interrupt Disable)  
        .equ USART1_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error Interrupt Enable)  
        .equ USART1_FRAME_Shift, 6   @ bitWidth 1 (Framing Error Interrupt Disable)  
        .equ USART1_PARE_Shift, 7   @ bitWidth 1 (Parity Error Interrupt Disable)  
        .equ USART1_TIMEOUT_Shift, 8   @ bitWidth 1 (Time-out Interrupt Disable)  
        .equ USART1_TXEMPTY_Shift, 9   @ bitWidth 1 (TXEMPTY Interrupt Disable)  
        .equ USART1_ITER_Shift, 10   @ bitWidth 1 (Max Number of Repetitions Reached Interrupt Disable)  
        .equ USART1_NACK_Shift, 13   @ bitWidth 1 (Non Acknowledge Interrupt Disable)  
        .equ USART1_RIIC_Shift, 16   @ bitWidth 1 (Ring Indicator Input Change Disable)  
        .equ USART1_DSRIC_Shift, 17   @ bitWidth 1 (Data Set Ready Input Change Disable)  
        .equ USART1_DCDIC_Shift, 18   @ bitWidth 1 (Data Carrier Detect Input Change Interrupt Disable)  
        .equ USART1_CTSIC_Shift, 19   @ bitWidth 1 (Clear to Send Input Change Interrupt Disable)  
        .equ USART1_MANE_Shift, 24   @ bitWidth 1 (Manchester Error Interrupt Disable)  
 
    .equ USART1_US_IMR, USART1_BASE + 0x0010 @ (Interrupt Mask Register) 
        .equ USART1_RXRDY_Shift, 0   @ bitWidth 1 (RXRDY Interrupt Mask)  
        .equ USART1_TXRDY_Shift, 1   @ bitWidth 1 (TXRDY Interrupt Mask)  
        .equ USART1_RXBRK_Shift, 2   @ bitWidth 1 (Receiver Break Interrupt Mask)  
        .equ USART1_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error Interrupt Mask)  
        .equ USART1_FRAME_Shift, 6   @ bitWidth 1 (Framing Error Interrupt Mask)  
        .equ USART1_PARE_Shift, 7   @ bitWidth 1 (Parity Error Interrupt Mask)  
        .equ USART1_TIMEOUT_Shift, 8   @ bitWidth 1 (Time-out Interrupt Mask)  
        .equ USART1_TXEMPTY_Shift, 9   @ bitWidth 1 (TXEMPTY Interrupt Mask)  
        .equ USART1_ITER_Shift, 10   @ bitWidth 1 (Max Number of Repetitions Reached Interrupt Mask)  
        .equ USART1_NACK_Shift, 13   @ bitWidth 1 (Non Acknowledge Interrupt Mask)  
        .equ USART1_RIIC_Shift, 16   @ bitWidth 1 (Ring Indicator Input Change Mask)  
        .equ USART1_DSRIC_Shift, 17   @ bitWidth 1 (Data Set Ready Input Change Mask)  
        .equ USART1_DCDIC_Shift, 18   @ bitWidth 1 (Data Carrier Detect Input Change Interrupt Mask)  
        .equ USART1_CTSIC_Shift, 19   @ bitWidth 1 (Clear to Send Input Change Interrupt Mask)  
        .equ USART1_MANE_Shift, 24   @ bitWidth 1 (Manchester Error Interrupt Mask)  
 
    .equ USART1_US_CSR, USART1_BASE + 0x0014 @ (Channel Status Register) 
        .equ USART1_RXRDY_Shift, 0   @ bitWidth 1 (Receiver Ready cleared by reading US_RHR)  
        .equ USART1_TXRDY_Shift, 1   @ bitWidth 1 (Transmitter Ready cleared by writing US_THR)  
        .equ USART1_RXBRK_Shift, 2   @ bitWidth 1 (Break Received/End of Break cleared by writing a one to bit US_CR.RSTSTA)  
        .equ USART1_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error cleared by writing a one to bit US_CR.RSTSTA)  
        .equ USART1_FRAME_Shift, 6   @ bitWidth 1 (Framing Error cleared by writing a one to bit US_CR.RSTSTA)  
        .equ USART1_PARE_Shift, 7   @ bitWidth 1 (Parity Error cleared by writing a one to bit US_CR.RSTSTA)  
        .equ USART1_TIMEOUT_Shift, 8   @ bitWidth 1 (Receiver Time-out cleared by writing a one to bit US_CR.STTTO)  
        .equ USART1_TXEMPTY_Shift, 9   @ bitWidth 1 (Transmitter Empty cleared by writing US_THR)  
        .equ USART1_ITER_Shift, 10   @ bitWidth 1 (Max Number of Repetitions Reached cleared by writing a one to bit US_CR.RSTIT)  
        .equ USART1_NACK_Shift, 13   @ bitWidth 1 (Non Acknowledge Interrupt cleared by writing a one to bit US_CR.RSTNACK)  
        .equ USART1_RIIC_Shift, 16   @ bitWidth 1 (Ring Indicator Input Change Flag cleared on read)  
        .equ USART1_DSRIC_Shift, 17   @ bitWidth 1 (Data Set Ready Input Change Flag cleared on read)  
        .equ USART1_DCDIC_Shift, 18   @ bitWidth 1 (Data Carrier Detect Input Change Flag cleared on read)  
        .equ USART1_CTSIC_Shift, 19   @ bitWidth 1 (Clear to Send Input Change Flag cleared on read)  
        .equ USART1_RI_Shift, 20   @ bitWidth 1 (Image of RI Input)  
        .equ USART1_DSR_Shift, 21   @ bitWidth 1 (Image of DSR Input)  
        .equ USART1_DCD_Shift, 22   @ bitWidth 1 (Image of DCD Input)  
        .equ USART1_CTS_Shift, 23   @ bitWidth 1 (Image of CTS Input)  
        .equ USART1_MANERR_Shift, 24   @ bitWidth 1 (Manchester Error cleared by writing a one to the bit US_CR.RSTSTA)  
 
    .equ USART1_US_RHR, USART1_BASE + 0x0018 @ (Receive Holding Register) 
        .equ USART1_RXCHR_Shift, 0   @ bitWidth 9 (Received Character)  
        .equ USART1_RXSYNH_Shift, 15   @ bitWidth 1 (Received Sync)  
 
    .equ USART1_US_THR, USART1_BASE + 0x001C @ (Transmit Holding Register) 
        .equ USART1_TXCHR_Shift, 0   @ bitWidth 9 (Character to be Transmitted)  
        .equ USART1_TXSYNH_Shift, 15   @ bitWidth 1 (Sync Field to be Transmitted)  
 
    .equ USART1_US_BRGR, USART1_BASE + 0x0020 @ (Baud Rate Generator Register) 
        .equ USART1_CD_Shift, 0   @ bitWidth 16 (Clock Divider)  
        .equ USART1_FP_Shift, 16   @ bitWidth 3 (Fractional Part)  
 
    .equ USART1_US_RTOR, USART1_BASE + 0x0024 @ (Receiver Time-out Register) 
        .equ USART1_TO_Shift, 0   @ bitWidth 17 (Time-out Value)  
 
    .equ USART1_US_TTGR, USART1_BASE + 0x0028 @ (Transmitter Timeguard Register) 
        .equ USART1_TG_Shift, 0   @ bitWidth 8 (Timeguard Value)  
 
    .equ USART1_US_FIDI, USART1_BASE + 0x0040 @ (FI DI Ratio Register) 
        .equ USART1_FI_DI_RATIO_Shift, 0   @ bitWidth 16 (FI Over DI Ratio Value)  
 
    .equ USART1_US_NER, USART1_BASE + 0x0044 @ (Number of Errors Register) 
        .equ USART1_NB_ERRORS_Shift, 0   @ bitWidth 8 (Number of Errors)  
 
    .equ USART1_US_IF, USART1_BASE + 0x004C @ (IrDA Filter Register) 
        .equ USART1_IRDA_FILTER_Shift, 0   @ bitWidth 8 (IrDA Filter)  
 
    .equ USART1_US_MAN, USART1_BASE + 0x0050 @ (Manchester Configuration Register) 
        .equ USART1_TX_PL_Shift, 0   @ bitWidth 4 (Transmitter Preamble Length)  
        .equ USART1_TX_PP_Shift, 8   @ bitWidth 2 (Transmitter Preamble Pattern)  
        .equ USART1_TX_MPOL_Shift, 12   @ bitWidth 1 (Transmitter Manchester Polarity)  
        .equ USART1_RX_PL_Shift, 16   @ bitWidth 4 (Receiver Preamble Length)  
        .equ USART1_RX_PP_Shift, 24   @ bitWidth 2 (Receiver Preamble Pattern detected)  
        .equ USART1_RX_MPOL_Shift, 28   @ bitWidth 1 (Receiver Manchester Polarity)  
        .equ USART1_ONE_Shift, 29   @ bitWidth 1 (Must Be Set to 1)  
        .equ USART1_DRIFT_Shift, 30   @ bitWidth 1 (Drift Compensation)  
        .equ USART1_RXIDLEV_Shift, 31   @ bitWidth 1 ()  
 
    .equ USART1_US_LINMR, USART1_BASE + 0x0054 @ (LIN Mode Register) 
        .equ USART1_NACT_Shift, 0   @ bitWidth 2 (LIN Node Action)  
        .equ USART1_PARDIS_Shift, 2   @ bitWidth 1 (Parity Disable)  
        .equ USART1_CHKDIS_Shift, 3   @ bitWidth 1 (Checksum Disable)  
        .equ USART1_CHKTYP_Shift, 4   @ bitWidth 1 (Checksum Type)  
        .equ USART1_DLM_Shift, 5   @ bitWidth 1 (Data Length Mode)  
        .equ USART1_FSDIS_Shift, 6   @ bitWidth 1 (Frame Slot Mode Disable)  
        .equ USART1_WKUPTYP_Shift, 7   @ bitWidth 1 (Wakeup Signal Type)  
        .equ USART1_DLC_Shift, 8   @ bitWidth 8 (Data Length Control)  
        .equ USART1_PDCM_Shift, 16   @ bitWidth 1 (DMAC Mode)  
        .equ USART1_SYNCDIS_Shift, 17   @ bitWidth 1 (Synchronization Disable)  
 
    .equ USART1_US_LINIR, USART1_BASE + 0x0058 @ (LIN Identifier Register) 
        .equ USART1_IDCHR_Shift, 0   @ bitWidth 8 (Identifier Character)  
 
    .equ USART1_US_LINBRR, USART1_BASE + 0x005C @ (LIN Baud Rate Register) 
        .equ USART1_LINCD_Shift, 0   @ bitWidth 16 (Clock Divider after Synchronization)  
        .equ USART1_LINFP_Shift, 16   @ bitWidth 3 (Fractional Part after Synchronization)  
 
    .equ USART1_US_LONMR, USART1_BASE + 0x0060 @ (LON Mode Register) 
        .equ USART1_COMMT_Shift, 0   @ bitWidth 1 (LON comm_type Parameter Value)  
        .equ USART1_COLDET_Shift, 1   @ bitWidth 1 (LON Collision Detection Feature)  
        .equ USART1_TCOL_Shift, 2   @ bitWidth 1 (Terminate Frame upon Collision Notification)  
        .equ USART1_CDTAIL_Shift, 3   @ bitWidth 1 (LON Collision Detection on Frame Tail)  
        .equ USART1_DMAM_Shift, 4   @ bitWidth 1 (LON DMA Mode)  
        .equ USART1_LCDS_Shift, 5   @ bitWidth 1 (LON Collision Detection Source)  
        .equ USART1_EOFS_Shift, 16   @ bitWidth 8 (End of Frame Condition Size)  
 
    .equ USART1_US_LONPR, USART1_BASE + 0x0064 @ (LON Preamble Register) 
        .equ USART1_LONPL_Shift, 0   @ bitWidth 14 (LON Preamble Length)  
 
    .equ USART1_US_LONDL, USART1_BASE + 0x0068 @ (LON Data Length Register) 
        .equ USART1_LONDL_Shift, 0   @ bitWidth 8 (LON Data Length)  
 
    .equ USART1_US_LONL2HDR, USART1_BASE + 0x006C @ (LON L2HDR Register) 
        .equ USART1_BLI_Shift, 0   @ bitWidth 6 (LON Backlog Increment)  
        .equ USART1_ALTP_Shift, 6   @ bitWidth 1 (LON Alternate Path Bit)  
        .equ USART1_PB_Shift, 7   @ bitWidth 1 (LON Priority Bit)  
 
    .equ USART1_US_LONBL, USART1_BASE + 0x0070 @ (LON Backlog Register) 
        .equ USART1_LONBL_Shift, 0   @ bitWidth 6 (LON Node Backlog Value)  
 
    .equ USART1_US_LONB1TX, USART1_BASE + 0x0074 @ (LON Beta1 Tx Register) 
        .equ USART1_BETA1TX_Shift, 0   @ bitWidth 24 (LON Beta1 Length after Transmission)  
 
    .equ USART1_US_LONB1RX, USART1_BASE + 0x0078 @ (LON Beta1 Rx Register) 
        .equ USART1_BETA1RX_Shift, 0   @ bitWidth 24 (LON Beta1 Length after Reception)  
 
    .equ USART1_US_LONPRIO, USART1_BASE + 0x007C @ (LON Priority Register) 
        .equ USART1_PSNB_Shift, 0   @ bitWidth 7 (LON Priority Slot Number)  
        .equ USART1_NPS_Shift, 8   @ bitWidth 7 (LON Node Priority Slot)  
 
    .equ USART1_US_IDTTX, USART1_BASE + 0x0080 @ (LON IDT Tx Register) 
        .equ USART1_IDTTX_Shift, 0   @ bitWidth 24 (LON Indeterminate Time after Transmission comm_type = 1 mode only)  
 
    .equ USART1_US_IDTRX, USART1_BASE + 0x0084 @ (LON IDT Rx Register) 
        .equ USART1_IDTRX_Shift, 0   @ bitWidth 24 (LON Indeterminate Time after Reception comm_type = 1 mode only)  
 
    .equ USART1_US_ICDIFF, USART1_BASE + 0x0088 @ (IC DIFF Register) 
        .equ USART1_ICDIFF_Shift, 0   @ bitWidth 4 (IC Differentiator Number)  
 
    .equ USART1_US_WPMR, USART1_BASE + 0x00E4 @ (Write Protection Mode Register) 
        .equ USART1_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ USART1_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ USART1_US_WPSR, USART1_BASE + 0x00E8 @ (Write Protection Status Register) 
        .equ USART1_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ USART1_WPVSRC_Shift, 8   @ bitWidth 16 (Write Protection Violation Source)  
 

@=========================== USART2 ===========================@
.equ USART2_BASE, 0x4002C000 @ (Universal Synchronous Asynchronous Receiver Transmitter) 
    .equ USART2_US_CR, USART2_BASE + 0x0000 @ (Control Register) 
        .equ USART2_RSTRX_Shift, 2   @ bitWidth 1 (Reset Receiver)  
        .equ USART2_RSTTX_Shift, 3   @ bitWidth 1 (Reset Transmitter)  
        .equ USART2_RXEN_Shift, 4   @ bitWidth 1 (Receiver Enable)  
        .equ USART2_RXDIS_Shift, 5   @ bitWidth 1 (Receiver Disable)  
        .equ USART2_TXEN_Shift, 6   @ bitWidth 1 (Transmitter Enable)  
        .equ USART2_TXDIS_Shift, 7   @ bitWidth 1 (Transmitter Disable)  
        .equ USART2_RSTSTA_Shift, 8   @ bitWidth 1 (Reset Status Bits)  
        .equ USART2_STTBRK_Shift, 9   @ bitWidth 1 (Start Break)  
        .equ USART2_STPBRK_Shift, 10   @ bitWidth 1 (Stop Break)  
        .equ USART2_STTTO_Shift, 11   @ bitWidth 1 (Clear TIMEOUT Flag and Start Time-out After Next Character Received)  
        .equ USART2_SENDA_Shift, 12   @ bitWidth 1 (Send Address)  
        .equ USART2_RSTIT_Shift, 13   @ bitWidth 1 (Reset Iterations)  
        .equ USART2_RSTNACK_Shift, 14   @ bitWidth 1 (Reset Non Acknowledge)  
        .equ USART2_RETTO_Shift, 15   @ bitWidth 1 (Start Time-out Immediately)  
        .equ USART2_DTREN_Shift, 16   @ bitWidth 1 (Data Terminal Ready Enable)  
        .equ USART2_DTRDIS_Shift, 17   @ bitWidth 1 (Data Terminal Ready Disable)  
        .equ USART2_RTSEN_Shift, 18   @ bitWidth 1 (Request to Send Pin Control)  
        .equ USART2_RTSDIS_Shift, 19   @ bitWidth 1 (Request to Send Pin Control)  
        .equ USART2_LINABT_Shift, 20   @ bitWidth 1 (Abort LIN Transmission)  
        .equ USART2_LINWKUP_Shift, 21   @ bitWidth 1 (Send LIN Wakeup Signal)  
 
    .equ USART2_US_MR, USART2_BASE + 0x0004 @ (Mode Register) 
        .equ USART2_USART_MODE_Shift, 0   @ bitWidth 4 (USART Mode of Operation)  
        .equ USART2_USCLKS_Shift, 4   @ bitWidth 2 (Clock Selection)  
        .equ USART2_CHRL_Shift, 6   @ bitWidth 2 (Character Length)  
        .equ USART2_SYNC_Shift, 8   @ bitWidth 1 (Synchronous Mode Select)  
        .equ USART2_PAR_Shift, 9   @ bitWidth 3 (Parity Type)  
        .equ USART2_NBSTOP_Shift, 12   @ bitWidth 2 (Number of Stop Bits)  
        .equ USART2_CHMODE_Shift, 14   @ bitWidth 2 (Channel Mode)  
        .equ USART2_MSBF_Shift, 16   @ bitWidth 1 (Bit Order)  
        .equ USART2_MODE9_Shift, 17   @ bitWidth 1 (9-bit Character Length)  
        .equ USART2_CLKO_Shift, 18   @ bitWidth 1 (Clock Output Select)  
        .equ USART2_OVER_Shift, 19   @ bitWidth 1 (Oversampling Mode)  
        .equ USART2_INACK_Shift, 20   @ bitWidth 1 (Inhibit Non Acknowledge)  
        .equ USART2_DSNACK_Shift, 21   @ bitWidth 1 (Disable Successive NACK)  
        .equ USART2_VAR_SYNC_Shift, 22   @ bitWidth 1 (Variable Synchronization of Command/Data Sync Start Frame Delimiter)  
        .equ USART2_INVDATA_Shift, 23   @ bitWidth 1 (Inverted Data)  
        .equ USART2_MAX_ITERATION_Shift, 24   @ bitWidth 3 (Maximum Number of Automatic Iteration)  
        .equ USART2_FILTER_Shift, 28   @ bitWidth 1 (Receive Line Filter)  
        .equ USART2_MAN_Shift, 29   @ bitWidth 1 (Manchester Encoder/Decoder Enable)  
        .equ USART2_MODSYNC_Shift, 30   @ bitWidth 1 (Manchester Synchronization Mode)  
        .equ USART2_ONEBIT_Shift, 31   @ bitWidth 1 (Start Frame Delimiter Selector)  
 
    .equ USART2_US_IER, USART2_BASE + 0x0008 @ (Interrupt Enable Register) 
        .equ USART2_RXRDY_Shift, 0   @ bitWidth 1 (RXRDY Interrupt Enable)  
        .equ USART2_TXRDY_Shift, 1   @ bitWidth 1 (TXRDY Interrupt Enable)  
        .equ USART2_RXBRK_Shift, 2   @ bitWidth 1 (Receiver Break Interrupt Enable)  
        .equ USART2_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error Interrupt Enable)  
        .equ USART2_FRAME_Shift, 6   @ bitWidth 1 (Framing Error Interrupt Enable)  
        .equ USART2_PARE_Shift, 7   @ bitWidth 1 (Parity Error Interrupt Enable)  
        .equ USART2_TIMEOUT_Shift, 8   @ bitWidth 1 (Time-out Interrupt Enable)  
        .equ USART2_TXEMPTY_Shift, 9   @ bitWidth 1 (TXEMPTY Interrupt Enable)  
        .equ USART2_ITER_Shift, 10   @ bitWidth 1 (Max number of Repetitions Reached Interrupt Enable)  
        .equ USART2_NACK_Shift, 13   @ bitWidth 1 (Non Acknowledge Interrupt Enable)  
        .equ USART2_RIIC_Shift, 16   @ bitWidth 1 (Ring Indicator Input Change Enable)  
        .equ USART2_DSRIC_Shift, 17   @ bitWidth 1 (Data Set Ready Input Change Enable)  
        .equ USART2_DCDIC_Shift, 18   @ bitWidth 1 (Data Carrier Detect Input Change Interrupt Enable)  
        .equ USART2_CTSIC_Shift, 19   @ bitWidth 1 (Clear to Send Input Change Interrupt Enable)  
        .equ USART2_MANE_Shift, 24   @ bitWidth 1 (Manchester Error Interrupt Enable)  
 
    .equ USART2_US_IDR, USART2_BASE + 0x000C @ (Interrupt Disable Register) 
        .equ USART2_RXRDY_Shift, 0   @ bitWidth 1 (RXRDY Interrupt Disable)  
        .equ USART2_TXRDY_Shift, 1   @ bitWidth 1 (TXRDY Interrupt Disable)  
        .equ USART2_RXBRK_Shift, 2   @ bitWidth 1 (Receiver Break Interrupt Disable)  
        .equ USART2_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error Interrupt Enable)  
        .equ USART2_FRAME_Shift, 6   @ bitWidth 1 (Framing Error Interrupt Disable)  
        .equ USART2_PARE_Shift, 7   @ bitWidth 1 (Parity Error Interrupt Disable)  
        .equ USART2_TIMEOUT_Shift, 8   @ bitWidth 1 (Time-out Interrupt Disable)  
        .equ USART2_TXEMPTY_Shift, 9   @ bitWidth 1 (TXEMPTY Interrupt Disable)  
        .equ USART2_ITER_Shift, 10   @ bitWidth 1 (Max Number of Repetitions Reached Interrupt Disable)  
        .equ USART2_NACK_Shift, 13   @ bitWidth 1 (Non Acknowledge Interrupt Disable)  
        .equ USART2_RIIC_Shift, 16   @ bitWidth 1 (Ring Indicator Input Change Disable)  
        .equ USART2_DSRIC_Shift, 17   @ bitWidth 1 (Data Set Ready Input Change Disable)  
        .equ USART2_DCDIC_Shift, 18   @ bitWidth 1 (Data Carrier Detect Input Change Interrupt Disable)  
        .equ USART2_CTSIC_Shift, 19   @ bitWidth 1 (Clear to Send Input Change Interrupt Disable)  
        .equ USART2_MANE_Shift, 24   @ bitWidth 1 (Manchester Error Interrupt Disable)  
 
    .equ USART2_US_IMR, USART2_BASE + 0x0010 @ (Interrupt Mask Register) 
        .equ USART2_RXRDY_Shift, 0   @ bitWidth 1 (RXRDY Interrupt Mask)  
        .equ USART2_TXRDY_Shift, 1   @ bitWidth 1 (TXRDY Interrupt Mask)  
        .equ USART2_RXBRK_Shift, 2   @ bitWidth 1 (Receiver Break Interrupt Mask)  
        .equ USART2_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error Interrupt Mask)  
        .equ USART2_FRAME_Shift, 6   @ bitWidth 1 (Framing Error Interrupt Mask)  
        .equ USART2_PARE_Shift, 7   @ bitWidth 1 (Parity Error Interrupt Mask)  
        .equ USART2_TIMEOUT_Shift, 8   @ bitWidth 1 (Time-out Interrupt Mask)  
        .equ USART2_TXEMPTY_Shift, 9   @ bitWidth 1 (TXEMPTY Interrupt Mask)  
        .equ USART2_ITER_Shift, 10   @ bitWidth 1 (Max Number of Repetitions Reached Interrupt Mask)  
        .equ USART2_NACK_Shift, 13   @ bitWidth 1 (Non Acknowledge Interrupt Mask)  
        .equ USART2_RIIC_Shift, 16   @ bitWidth 1 (Ring Indicator Input Change Mask)  
        .equ USART2_DSRIC_Shift, 17   @ bitWidth 1 (Data Set Ready Input Change Mask)  
        .equ USART2_DCDIC_Shift, 18   @ bitWidth 1 (Data Carrier Detect Input Change Interrupt Mask)  
        .equ USART2_CTSIC_Shift, 19   @ bitWidth 1 (Clear to Send Input Change Interrupt Mask)  
        .equ USART2_MANE_Shift, 24   @ bitWidth 1 (Manchester Error Interrupt Mask)  
 
    .equ USART2_US_CSR, USART2_BASE + 0x0014 @ (Channel Status Register) 
        .equ USART2_RXRDY_Shift, 0   @ bitWidth 1 (Receiver Ready cleared by reading US_RHR)  
        .equ USART2_TXRDY_Shift, 1   @ bitWidth 1 (Transmitter Ready cleared by writing US_THR)  
        .equ USART2_RXBRK_Shift, 2   @ bitWidth 1 (Break Received/End of Break cleared by writing a one to bit US_CR.RSTSTA)  
        .equ USART2_OVRE_Shift, 5   @ bitWidth 1 (Overrun Error cleared by writing a one to bit US_CR.RSTSTA)  
        .equ USART2_FRAME_Shift, 6   @ bitWidth 1 (Framing Error cleared by writing a one to bit US_CR.RSTSTA)  
        .equ USART2_PARE_Shift, 7   @ bitWidth 1 (Parity Error cleared by writing a one to bit US_CR.RSTSTA)  
        .equ USART2_TIMEOUT_Shift, 8   @ bitWidth 1 (Receiver Time-out cleared by writing a one to bit US_CR.STTTO)  
        .equ USART2_TXEMPTY_Shift, 9   @ bitWidth 1 (Transmitter Empty cleared by writing US_THR)  
        .equ USART2_ITER_Shift, 10   @ bitWidth 1 (Max Number of Repetitions Reached cleared by writing a one to bit US_CR.RSTIT)  
        .equ USART2_NACK_Shift, 13   @ bitWidth 1 (Non Acknowledge Interrupt cleared by writing a one to bit US_CR.RSTNACK)  
        .equ USART2_RIIC_Shift, 16   @ bitWidth 1 (Ring Indicator Input Change Flag cleared on read)  
        .equ USART2_DSRIC_Shift, 17   @ bitWidth 1 (Data Set Ready Input Change Flag cleared on read)  
        .equ USART2_DCDIC_Shift, 18   @ bitWidth 1 (Data Carrier Detect Input Change Flag cleared on read)  
        .equ USART2_CTSIC_Shift, 19   @ bitWidth 1 (Clear to Send Input Change Flag cleared on read)  
        .equ USART2_RI_Shift, 20   @ bitWidth 1 (Image of RI Input)  
        .equ USART2_DSR_Shift, 21   @ bitWidth 1 (Image of DSR Input)  
        .equ USART2_DCD_Shift, 22   @ bitWidth 1 (Image of DCD Input)  
        .equ USART2_CTS_Shift, 23   @ bitWidth 1 (Image of CTS Input)  
        .equ USART2_MANERR_Shift, 24   @ bitWidth 1 (Manchester Error cleared by writing a one to the bit US_CR.RSTSTA)  
 
    .equ USART2_US_RHR, USART2_BASE + 0x0018 @ (Receive Holding Register) 
        .equ USART2_RXCHR_Shift, 0   @ bitWidth 9 (Received Character)  
        .equ USART2_RXSYNH_Shift, 15   @ bitWidth 1 (Received Sync)  
 
    .equ USART2_US_THR, USART2_BASE + 0x001C @ (Transmit Holding Register) 
        .equ USART2_TXCHR_Shift, 0   @ bitWidth 9 (Character to be Transmitted)  
        .equ USART2_TXSYNH_Shift, 15   @ bitWidth 1 (Sync Field to be Transmitted)  
 
    .equ USART2_US_BRGR, USART2_BASE + 0x0020 @ (Baud Rate Generator Register) 
        .equ USART2_CD_Shift, 0   @ bitWidth 16 (Clock Divider)  
        .equ USART2_FP_Shift, 16   @ bitWidth 3 (Fractional Part)  
 
    .equ USART2_US_RTOR, USART2_BASE + 0x0024 @ (Receiver Time-out Register) 
        .equ USART2_TO_Shift, 0   @ bitWidth 17 (Time-out Value)  
 
    .equ USART2_US_TTGR, USART2_BASE + 0x0028 @ (Transmitter Timeguard Register) 
        .equ USART2_TG_Shift, 0   @ bitWidth 8 (Timeguard Value)  
 
    .equ USART2_US_FIDI, USART2_BASE + 0x0040 @ (FI DI Ratio Register) 
        .equ USART2_FI_DI_RATIO_Shift, 0   @ bitWidth 16 (FI Over DI Ratio Value)  
 
    .equ USART2_US_NER, USART2_BASE + 0x0044 @ (Number of Errors Register) 
        .equ USART2_NB_ERRORS_Shift, 0   @ bitWidth 8 (Number of Errors)  
 
    .equ USART2_US_IF, USART2_BASE + 0x004C @ (IrDA Filter Register) 
        .equ USART2_IRDA_FILTER_Shift, 0   @ bitWidth 8 (IrDA Filter)  
 
    .equ USART2_US_MAN, USART2_BASE + 0x0050 @ (Manchester Configuration Register) 
        .equ USART2_TX_PL_Shift, 0   @ bitWidth 4 (Transmitter Preamble Length)  
        .equ USART2_TX_PP_Shift, 8   @ bitWidth 2 (Transmitter Preamble Pattern)  
        .equ USART2_TX_MPOL_Shift, 12   @ bitWidth 1 (Transmitter Manchester Polarity)  
        .equ USART2_RX_PL_Shift, 16   @ bitWidth 4 (Receiver Preamble Length)  
        .equ USART2_RX_PP_Shift, 24   @ bitWidth 2 (Receiver Preamble Pattern detected)  
        .equ USART2_RX_MPOL_Shift, 28   @ bitWidth 1 (Receiver Manchester Polarity)  
        .equ USART2_ONE_Shift, 29   @ bitWidth 1 (Must Be Set to 1)  
        .equ USART2_DRIFT_Shift, 30   @ bitWidth 1 (Drift Compensation)  
        .equ USART2_RXIDLEV_Shift, 31   @ bitWidth 1 ()  
 
    .equ USART2_US_LINMR, USART2_BASE + 0x0054 @ (LIN Mode Register) 
        .equ USART2_NACT_Shift, 0   @ bitWidth 2 (LIN Node Action)  
        .equ USART2_PARDIS_Shift, 2   @ bitWidth 1 (Parity Disable)  
        .equ USART2_CHKDIS_Shift, 3   @ bitWidth 1 (Checksum Disable)  
        .equ USART2_CHKTYP_Shift, 4   @ bitWidth 1 (Checksum Type)  
        .equ USART2_DLM_Shift, 5   @ bitWidth 1 (Data Length Mode)  
        .equ USART2_FSDIS_Shift, 6   @ bitWidth 1 (Frame Slot Mode Disable)  
        .equ USART2_WKUPTYP_Shift, 7   @ bitWidth 1 (Wakeup Signal Type)  
        .equ USART2_DLC_Shift, 8   @ bitWidth 8 (Data Length Control)  
        .equ USART2_PDCM_Shift, 16   @ bitWidth 1 (DMAC Mode)  
        .equ USART2_SYNCDIS_Shift, 17   @ bitWidth 1 (Synchronization Disable)  
 
    .equ USART2_US_LINIR, USART2_BASE + 0x0058 @ (LIN Identifier Register) 
        .equ USART2_IDCHR_Shift, 0   @ bitWidth 8 (Identifier Character)  
 
    .equ USART2_US_LINBRR, USART2_BASE + 0x005C @ (LIN Baud Rate Register) 
        .equ USART2_LINCD_Shift, 0   @ bitWidth 16 (Clock Divider after Synchronization)  
        .equ USART2_LINFP_Shift, 16   @ bitWidth 3 (Fractional Part after Synchronization)  
 
    .equ USART2_US_LONMR, USART2_BASE + 0x0060 @ (LON Mode Register) 
        .equ USART2_COMMT_Shift, 0   @ bitWidth 1 (LON comm_type Parameter Value)  
        .equ USART2_COLDET_Shift, 1   @ bitWidth 1 (LON Collision Detection Feature)  
        .equ USART2_TCOL_Shift, 2   @ bitWidth 1 (Terminate Frame upon Collision Notification)  
        .equ USART2_CDTAIL_Shift, 3   @ bitWidth 1 (LON Collision Detection on Frame Tail)  
        .equ USART2_DMAM_Shift, 4   @ bitWidth 1 (LON DMA Mode)  
        .equ USART2_LCDS_Shift, 5   @ bitWidth 1 (LON Collision Detection Source)  
        .equ USART2_EOFS_Shift, 16   @ bitWidth 8 (End of Frame Condition Size)  
 
    .equ USART2_US_LONPR, USART2_BASE + 0x0064 @ (LON Preamble Register) 
        .equ USART2_LONPL_Shift, 0   @ bitWidth 14 (LON Preamble Length)  
 
    .equ USART2_US_LONDL, USART2_BASE + 0x0068 @ (LON Data Length Register) 
        .equ USART2_LONDL_Shift, 0   @ bitWidth 8 (LON Data Length)  
 
    .equ USART2_US_LONL2HDR, USART2_BASE + 0x006C @ (LON L2HDR Register) 
        .equ USART2_BLI_Shift, 0   @ bitWidth 6 (LON Backlog Increment)  
        .equ USART2_ALTP_Shift, 6   @ bitWidth 1 (LON Alternate Path Bit)  
        .equ USART2_PB_Shift, 7   @ bitWidth 1 (LON Priority Bit)  
 
    .equ USART2_US_LONBL, USART2_BASE + 0x0070 @ (LON Backlog Register) 
        .equ USART2_LONBL_Shift, 0   @ bitWidth 6 (LON Node Backlog Value)  
 
    .equ USART2_US_LONB1TX, USART2_BASE + 0x0074 @ (LON Beta1 Tx Register) 
        .equ USART2_BETA1TX_Shift, 0   @ bitWidth 24 (LON Beta1 Length after Transmission)  
 
    .equ USART2_US_LONB1RX, USART2_BASE + 0x0078 @ (LON Beta1 Rx Register) 
        .equ USART2_BETA1RX_Shift, 0   @ bitWidth 24 (LON Beta1 Length after Reception)  
 
    .equ USART2_US_LONPRIO, USART2_BASE + 0x007C @ (LON Priority Register) 
        .equ USART2_PSNB_Shift, 0   @ bitWidth 7 (LON Priority Slot Number)  
        .equ USART2_NPS_Shift, 8   @ bitWidth 7 (LON Node Priority Slot)  
 
    .equ USART2_US_IDTTX, USART2_BASE + 0x0080 @ (LON IDT Tx Register) 
        .equ USART2_IDTTX_Shift, 0   @ bitWidth 24 (LON Indeterminate Time after Transmission comm_type = 1 mode only)  
 
    .equ USART2_US_IDTRX, USART2_BASE + 0x0084 @ (LON IDT Rx Register) 
        .equ USART2_IDTRX_Shift, 0   @ bitWidth 24 (LON Indeterminate Time after Reception comm_type = 1 mode only)  
 
    .equ USART2_US_ICDIFF, USART2_BASE + 0x0088 @ (IC DIFF Register) 
        .equ USART2_ICDIFF_Shift, 0   @ bitWidth 4 (IC Differentiator Number)  
 
    .equ USART2_US_WPMR, USART2_BASE + 0x00E4 @ (Write Protection Mode Register) 
        .equ USART2_WPEN_Shift, 0   @ bitWidth 1 (Write Protection Enable)  
        .equ USART2_WPKEY_Shift, 8   @ bitWidth 24 (Write Protection Key)  
 
    .equ USART2_US_WPSR, USART2_BASE + 0x00E8 @ (Write Protection Status Register) 
        .equ USART2_WPVS_Shift, 0   @ bitWidth 1 (Write Protection Violation Status)  
        .equ USART2_WPVSRC_Shift, 8   @ bitWidth 16 (Write Protection Violation Source)  
 

@=========================== USBHS ===========================@
.equ USBHS_BASE, 0x40038000 @ (USB High-Speed Interface) 
    .equ USBHS_DEVCTRL, USBHS_BASE + 0x0000 @ (Device General Control Register) 
        .equ USBHS_UADD_Shift, 0   @ bitWidth 7 (USB Address)  
        .equ USBHS_ADDEN_Shift, 7   @ bitWidth 1 (Address Enable)  
        .equ USBHS_DETACH_Shift, 8   @ bitWidth 1 (Detach)  
        .equ USBHS_RMWKUP_Shift, 9   @ bitWidth 1 (Remote Wake-Up)  
        .equ USBHS_SPDCONF_Shift, 10   @ bitWidth 2 (Mode Configuration)  
        .equ USBHS_LS_Shift, 12   @ bitWidth 1 (Low-Speed Mode Force)  
        .equ USBHS_TSTJ_Shift, 13   @ bitWidth 1 (Test mode J)  
        .equ USBHS_TSTK_Shift, 14   @ bitWidth 1 (Test mode K)  
        .equ USBHS_TSTPCKT_Shift, 15   @ bitWidth 1 (Test packet mode)  
        .equ USBHS_OPMODE2_Shift, 16   @ bitWidth 1 (Specific Operational mode)  
 
    .equ USBHS_DEVISR, USBHS_BASE + 0x0004 @ (Device Global Interrupt Status Register) 
        .equ USBHS_SUSP_Shift, 0   @ bitWidth 1 (Suspend Interrupt)  
        .equ USBHS_MSOF_Shift, 1   @ bitWidth 1 (Micro Start of Frame Interrupt)  
        .equ USBHS_SOF_Shift, 2   @ bitWidth 1 (Start of Frame Interrupt)  
        .equ USBHS_EORST_Shift, 3   @ bitWidth 1 (End of Reset Interrupt)  
        .equ USBHS_WAKEUP_Shift, 4   @ bitWidth 1 (Wake-Up Interrupt)  
        .equ USBHS_EORSM_Shift, 5   @ bitWidth 1 (End of Resume Interrupt)  
        .equ USBHS_UPRSM_Shift, 6   @ bitWidth 1 (Upstream Resume Interrupt)  
        .equ USBHS_PEP_0_Shift, 12   @ bitWidth 1 (Endpoint 0 Interrupt)  
        .equ USBHS_PEP_1_Shift, 13   @ bitWidth 1 (Endpoint 1 Interrupt)  
        .equ USBHS_PEP_2_Shift, 14   @ bitWidth 1 (Endpoint 2 Interrupt)  
        .equ USBHS_PEP_3_Shift, 15   @ bitWidth 1 (Endpoint 3 Interrupt)  
        .equ USBHS_PEP_4_Shift, 16   @ bitWidth 1 (Endpoint 4 Interrupt)  
        .equ USBHS_PEP_5_Shift, 17   @ bitWidth 1 (Endpoint 5 Interrupt)  
        .equ USBHS_PEP_6_Shift, 18   @ bitWidth 1 (Endpoint 6 Interrupt)  
        .equ USBHS_PEP_7_Shift, 19   @ bitWidth 1 (Endpoint 7 Interrupt)  
        .equ USBHS_PEP_8_Shift, 20   @ bitWidth 1 (Endpoint 8 Interrupt)  
        .equ USBHS_PEP_9_Shift, 21   @ bitWidth 1 (Endpoint 9 Interrupt)  
        .equ USBHS_PEP_10_Shift, 22   @ bitWidth 1 (Endpoint 10 Interrupt)  
        .equ USBHS_PEP_11_Shift, 23   @ bitWidth 1 (Endpoint 11 Interrupt)  
        .equ USBHS_DMA_1_Shift, 25   @ bitWidth 1 (DMA Channel 1 Interrupt)  
        .equ USBHS_DMA_2_Shift, 26   @ bitWidth 1 (DMA Channel 2 Interrupt)  
        .equ USBHS_DMA_3_Shift, 27   @ bitWidth 1 (DMA Channel 3 Interrupt)  
        .equ USBHS_DMA_4_Shift, 28   @ bitWidth 1 (DMA Channel 4 Interrupt)  
        .equ USBHS_DMA_5_Shift, 29   @ bitWidth 1 (DMA Channel 5 Interrupt)  
        .equ USBHS_DMA_6_Shift, 30   @ bitWidth 1 (DMA Channel 6 Interrupt)  
        .equ USBHS_DMA_7_Shift, 31   @ bitWidth 1 (DMA Channel 7 Interrupt)  
 
    .equ USBHS_DEVICR, USBHS_BASE + 0x0008 @ (Device Global Interrupt Clear Register) 
        .equ USBHS_SUSPC_Shift, 0   @ bitWidth 1 (Suspend Interrupt Clear)  
        .equ USBHS_MSOFC_Shift, 1   @ bitWidth 1 (Micro Start of Frame Interrupt Clear)  
        .equ USBHS_SOFC_Shift, 2   @ bitWidth 1 (Start of Frame Interrupt Clear)  
        .equ USBHS_EORSTC_Shift, 3   @ bitWidth 1 (End of Reset Interrupt Clear)  
        .equ USBHS_WAKEUPC_Shift, 4   @ bitWidth 1 (Wake-Up Interrupt Clear)  
        .equ USBHS_EORSMC_Shift, 5   @ bitWidth 1 (End of Resume Interrupt Clear)  
        .equ USBHS_UPRSMC_Shift, 6   @ bitWidth 1 (Upstream Resume Interrupt Clear)  
 
    .equ USBHS_DEVIFR, USBHS_BASE + 0x000C @ (Device Global Interrupt Set Register) 
        .equ USBHS_SUSPS_Shift, 0   @ bitWidth 1 (Suspend Interrupt Set)  
        .equ USBHS_MSOFS_Shift, 1   @ bitWidth 1 (Micro Start of Frame Interrupt Set)  
        .equ USBHS_SOFS_Shift, 2   @ bitWidth 1 (Start of Frame Interrupt Set)  
        .equ USBHS_EORSTS_Shift, 3   @ bitWidth 1 (End of Reset Interrupt Set)  
        .equ USBHS_WAKEUPS_Shift, 4   @ bitWidth 1 (Wake-Up Interrupt Set)  
        .equ USBHS_EORSMS_Shift, 5   @ bitWidth 1 (End of Resume Interrupt Set)  
        .equ USBHS_UPRSMS_Shift, 6   @ bitWidth 1 (Upstream Resume Interrupt Set)  
        .equ USBHS_DMA_1_Shift, 25   @ bitWidth 1 (DMA Channel 1 Interrupt Set)  
        .equ USBHS_DMA_2_Shift, 26   @ bitWidth 1 (DMA Channel 2 Interrupt Set)  
        .equ USBHS_DMA_3_Shift, 27   @ bitWidth 1 (DMA Channel 3 Interrupt Set)  
        .equ USBHS_DMA_4_Shift, 28   @ bitWidth 1 (DMA Channel 4 Interrupt Set)  
        .equ USBHS_DMA_5_Shift, 29   @ bitWidth 1 (DMA Channel 5 Interrupt Set)  
        .equ USBHS_DMA_6_Shift, 30   @ bitWidth 1 (DMA Channel 6 Interrupt Set)  
        .equ USBHS_DMA_7_Shift, 31   @ bitWidth 1 (DMA Channel 7 Interrupt Set)  
 
    .equ USBHS_DEVIMR, USBHS_BASE + 0x0010 @ (Device Global Interrupt Mask Register) 
        .equ USBHS_SUSPE_Shift, 0   @ bitWidth 1 (Suspend Interrupt Mask)  
        .equ USBHS_MSOFE_Shift, 1   @ bitWidth 1 (Micro Start of Frame Interrupt Mask)  
        .equ USBHS_SOFE_Shift, 2   @ bitWidth 1 (Start of Frame Interrupt Mask)  
        .equ USBHS_EORSTE_Shift, 3   @ bitWidth 1 (End of Reset Interrupt Mask)  
        .equ USBHS_WAKEUPE_Shift, 4   @ bitWidth 1 (Wake-Up Interrupt Mask)  
        .equ USBHS_EORSME_Shift, 5   @ bitWidth 1 (End of Resume Interrupt Mask)  
        .equ USBHS_UPRSME_Shift, 6   @ bitWidth 1 (Upstream Resume Interrupt Mask)  
        .equ USBHS_PEP_0_Shift, 12   @ bitWidth 1 (Endpoint 0 Interrupt Mask)  
        .equ USBHS_PEP_1_Shift, 13   @ bitWidth 1 (Endpoint 1 Interrupt Mask)  
        .equ USBHS_PEP_2_Shift, 14   @ bitWidth 1 (Endpoint 2 Interrupt Mask)  
        .equ USBHS_PEP_3_Shift, 15   @ bitWidth 1 (Endpoint 3 Interrupt Mask)  
        .equ USBHS_PEP_4_Shift, 16   @ bitWidth 1 (Endpoint 4 Interrupt Mask)  
        .equ USBHS_PEP_5_Shift, 17   @ bitWidth 1 (Endpoint 5 Interrupt Mask)  
        .equ USBHS_PEP_6_Shift, 18   @ bitWidth 1 (Endpoint 6 Interrupt Mask)  
        .equ USBHS_PEP_7_Shift, 19   @ bitWidth 1 (Endpoint 7 Interrupt Mask)  
        .equ USBHS_PEP_8_Shift, 20   @ bitWidth 1 (Endpoint 8 Interrupt Mask)  
        .equ USBHS_PEP_9_Shift, 21   @ bitWidth 1 (Endpoint 9 Interrupt Mask)  
        .equ USBHS_PEP_10_Shift, 22   @ bitWidth 1 (Endpoint 10 Interrupt Mask)  
        .equ USBHS_PEP_11_Shift, 23   @ bitWidth 1 (Endpoint 11 Interrupt Mask)  
        .equ USBHS_DMA_1_Shift, 25   @ bitWidth 1 (DMA Channel 1 Interrupt Mask)  
        .equ USBHS_DMA_2_Shift, 26   @ bitWidth 1 (DMA Channel 2 Interrupt Mask)  
        .equ USBHS_DMA_3_Shift, 27   @ bitWidth 1 (DMA Channel 3 Interrupt Mask)  
        .equ USBHS_DMA_4_Shift, 28   @ bitWidth 1 (DMA Channel 4 Interrupt Mask)  
        .equ USBHS_DMA_5_Shift, 29   @ bitWidth 1 (DMA Channel 5 Interrupt Mask)  
        .equ USBHS_DMA_6_Shift, 30   @ bitWidth 1 (DMA Channel 6 Interrupt Mask)  
        .equ USBHS_DMA_7_Shift, 31   @ bitWidth 1 (DMA Channel 7 Interrupt Mask)  
 
    .equ USBHS_DEVIDR, USBHS_BASE + 0x0014 @ (Device Global Interrupt Disable Register) 
        .equ USBHS_SUSPEC_Shift, 0   @ bitWidth 1 (Suspend Interrupt Disable)  
        .equ USBHS_MSOFEC_Shift, 1   @ bitWidth 1 (Micro Start of Frame Interrupt Disable)  
        .equ USBHS_SOFEC_Shift, 2   @ bitWidth 1 (Start of Frame Interrupt Disable)  
        .equ USBHS_EORSTEC_Shift, 3   @ bitWidth 1 (End of Reset Interrupt Disable)  
        .equ USBHS_WAKEUPEC_Shift, 4   @ bitWidth 1 (Wake-Up Interrupt Disable)  
        .equ USBHS_EORSMEC_Shift, 5   @ bitWidth 1 (End of Resume Interrupt Disable)  
        .equ USBHS_UPRSMEC_Shift, 6   @ bitWidth 1 (Upstream Resume Interrupt Disable)  
        .equ USBHS_PEP_0_Shift, 12   @ bitWidth 1 (Endpoint 0 Interrupt Disable)  
        .equ USBHS_PEP_1_Shift, 13   @ bitWidth 1 (Endpoint 1 Interrupt Disable)  
        .equ USBHS_PEP_2_Shift, 14   @ bitWidth 1 (Endpoint 2 Interrupt Disable)  
        .equ USBHS_PEP_3_Shift, 15   @ bitWidth 1 (Endpoint 3 Interrupt Disable)  
        .equ USBHS_PEP_4_Shift, 16   @ bitWidth 1 (Endpoint 4 Interrupt Disable)  
        .equ USBHS_PEP_5_Shift, 17   @ bitWidth 1 (Endpoint 5 Interrupt Disable)  
        .equ USBHS_PEP_6_Shift, 18   @ bitWidth 1 (Endpoint 6 Interrupt Disable)  
        .equ USBHS_PEP_7_Shift, 19   @ bitWidth 1 (Endpoint 7 Interrupt Disable)  
        .equ USBHS_PEP_8_Shift, 20   @ bitWidth 1 (Endpoint 8 Interrupt Disable)  
        .equ USBHS_PEP_9_Shift, 21   @ bitWidth 1 (Endpoint 9 Interrupt Disable)  
        .equ USBHS_PEP_10_Shift, 22   @ bitWidth 1 (Endpoint 10 Interrupt Disable)  
        .equ USBHS_PEP_11_Shift, 23   @ bitWidth 1 (Endpoint 11 Interrupt Disable)  
        .equ USBHS_DMA_1_Shift, 25   @ bitWidth 1 (DMA Channel 1 Interrupt Disable)  
        .equ USBHS_DMA_2_Shift, 26   @ bitWidth 1 (DMA Channel 2 Interrupt Disable)  
        .equ USBHS_DMA_3_Shift, 27   @ bitWidth 1 (DMA Channel 3 Interrupt Disable)  
        .equ USBHS_DMA_4_Shift, 28   @ bitWidth 1 (DMA Channel 4 Interrupt Disable)  
        .equ USBHS_DMA_5_Shift, 29   @ bitWidth 1 (DMA Channel 5 Interrupt Disable)  
        .equ USBHS_DMA_6_Shift, 30   @ bitWidth 1 (DMA Channel 6 Interrupt Disable)  
        .equ USBHS_DMA_7_Shift, 31   @ bitWidth 1 (DMA Channel 7 Interrupt Disable)  
 
    .equ USBHS_DEVIER, USBHS_BASE + 0x0018 @ (Device Global Interrupt Enable Register) 
        .equ USBHS_SUSPES_Shift, 0   @ bitWidth 1 (Suspend Interrupt Enable)  
        .equ USBHS_MSOFES_Shift, 1   @ bitWidth 1 (Micro Start of Frame Interrupt Enable)  
        .equ USBHS_SOFES_Shift, 2   @ bitWidth 1 (Start of Frame Interrupt Enable)  
        .equ USBHS_EORSTES_Shift, 3   @ bitWidth 1 (End of Reset Interrupt Enable)  
        .equ USBHS_WAKEUPES_Shift, 4   @ bitWidth 1 (Wake-Up Interrupt Enable)  
        .equ USBHS_EORSMES_Shift, 5   @ bitWidth 1 (End of Resume Interrupt Enable)  
        .equ USBHS_UPRSMES_Shift, 6   @ bitWidth 1 (Upstream Resume Interrupt Enable)  
        .equ USBHS_PEP_0_Shift, 12   @ bitWidth 1 (Endpoint 0 Interrupt Enable)  
        .equ USBHS_PEP_1_Shift, 13   @ bitWidth 1 (Endpoint 1 Interrupt Enable)  
        .equ USBHS_PEP_2_Shift, 14   @ bitWidth 1 (Endpoint 2 Interrupt Enable)  
        .equ USBHS_PEP_3_Shift, 15   @ bitWidth 1 (Endpoint 3 Interrupt Enable)  
        .equ USBHS_PEP_4_Shift, 16   @ bitWidth 1 (Endpoint 4 Interrupt Enable)  
        .equ USBHS_PEP_5_Shift, 17   @ bitWidth 1 (Endpoint 5 Interrupt Enable)  
        .equ USBHS_PEP_6_Shift, 18   @ bitWidth 1 (Endpoint 6 Interrupt Enable)  
        .equ USBHS_PEP_7_Shift, 19   @ bitWidth 1 (Endpoint 7 Interrupt Enable)  
        .equ USBHS_PEP_8_Shift, 20   @ bitWidth 1 (Endpoint 8 Interrupt Enable)  
        .equ USBHS_PEP_9_Shift, 21   @ bitWidth 1 (Endpoint 9 Interrupt Enable)  
        .equ USBHS_PEP_10_Shift, 22   @ bitWidth 1 (Endpoint 10 Interrupt Enable)  
        .equ USBHS_PEP_11_Shift, 23   @ bitWidth 1 (Endpoint 11 Interrupt Enable)  
        .equ USBHS_DMA_1_Shift, 25   @ bitWidth 1 (DMA Channel 1 Interrupt Enable)  
        .equ USBHS_DMA_2_Shift, 26   @ bitWidth 1 (DMA Channel 2 Interrupt Enable)  
        .equ USBHS_DMA_3_Shift, 27   @ bitWidth 1 (DMA Channel 3 Interrupt Enable)  
        .equ USBHS_DMA_4_Shift, 28   @ bitWidth 1 (DMA Channel 4 Interrupt Enable)  
        .equ USBHS_DMA_5_Shift, 29   @ bitWidth 1 (DMA Channel 5 Interrupt Enable)  
        .equ USBHS_DMA_6_Shift, 30   @ bitWidth 1 (DMA Channel 6 Interrupt Enable)  
        .equ USBHS_DMA_7_Shift, 31   @ bitWidth 1 (DMA Channel 7 Interrupt Enable)  
 
    .equ USBHS_DEVEPT, USBHS_BASE + 0x001C @ (Device Endpoint Register) 
        .equ USBHS_EPEN0_Shift, 0   @ bitWidth 1 (Endpoint 0 Enable)  
        .equ USBHS_EPEN1_Shift, 1   @ bitWidth 1 (Endpoint 1 Enable)  
        .equ USBHS_EPEN2_Shift, 2   @ bitWidth 1 (Endpoint 2 Enable)  
        .equ USBHS_EPEN3_Shift, 3   @ bitWidth 1 (Endpoint 3 Enable)  
        .equ USBHS_EPEN4_Shift, 4   @ bitWidth 1 (Endpoint 4 Enable)  
        .equ USBHS_EPEN5_Shift, 5   @ bitWidth 1 (Endpoint 5 Enable)  
        .equ USBHS_EPEN6_Shift, 6   @ bitWidth 1 (Endpoint 6 Enable)  
        .equ USBHS_EPEN7_Shift, 7   @ bitWidth 1 (Endpoint 7 Enable)  
        .equ USBHS_EPEN8_Shift, 8   @ bitWidth 1 (Endpoint 8 Enable)  
        .equ USBHS_EPEN9_Shift, 9   @ bitWidth 1 (Endpoint 9 Enable)  
        .equ USBHS_EPRST0_Shift, 16   @ bitWidth 1 (Endpoint 0 Reset)  
        .equ USBHS_EPRST1_Shift, 17   @ bitWidth 1 (Endpoint 1 Reset)  
        .equ USBHS_EPRST2_Shift, 18   @ bitWidth 1 (Endpoint 2 Reset)  
        .equ USBHS_EPRST3_Shift, 19   @ bitWidth 1 (Endpoint 3 Reset)  
        .equ USBHS_EPRST4_Shift, 20   @ bitWidth 1 (Endpoint 4 Reset)  
        .equ USBHS_EPRST5_Shift, 21   @ bitWidth 1 (Endpoint 5 Reset)  
        .equ USBHS_EPRST6_Shift, 22   @ bitWidth 1 (Endpoint 6 Reset)  
        .equ USBHS_EPRST7_Shift, 23   @ bitWidth 1 (Endpoint 7 Reset)  
        .equ USBHS_EPRST8_Shift, 24   @ bitWidth 1 (Endpoint 8 Reset)  
        .equ USBHS_EPRST9_Shift, 25   @ bitWidth 1 (Endpoint 9 Reset)  
 
    .equ USBHS_DEVFNUM, USBHS_BASE + 0x0020 @ (Device Frame Number Register) 
        .equ USBHS_MFNUM_Shift, 0   @ bitWidth 3 (Micro Frame Number)  
        .equ USBHS_FNUM_Shift, 3   @ bitWidth 11 (Frame Number)  
        .equ USBHS_FNCERR_Shift, 15   @ bitWidth 1 (Frame Number CRC Error)  
 
    .equ USBHS_DEVEPTCFG[%s], USBHS_BASE + 0x100 @ (Device Endpoint Configuration Register n = 0 0) 
        .equ USBHS_ALLOC_Shift, 1   @ bitWidth 1 (Endpoint Memory Allocate)  
        .equ USBHS_EPBK_Shift, 2   @ bitWidth 2 (Endpoint Banks)  
        .equ USBHS_EPSIZE_Shift, 4   @ bitWidth 3 (Endpoint Size)  
        .equ USBHS_EPDIR_Shift, 8   @ bitWidth 1 (Endpoint Direction)  
        .equ USBHS_AUTOSW_Shift, 9   @ bitWidth 1 (Automatic Switch)  
        .equ USBHS_EPTYPE_Shift, 11   @ bitWidth 2 (Endpoint Type)  
        .equ USBHS_NBTRANS_Shift, 13   @ bitWidth 2 (Number of transactions per microframe for isochronous endpoint)  
 
    .equ USBHS_DEVEPTISR[%s], USBHS_BASE + 0x130 @ (Device Endpoint Status Register n = 0 0) 
        .equ USBHS_TXINI_Shift, 0   @ bitWidth 1 (Transmitted IN Data Interrupt)  
        .equ USBHS_RXOUTI_Shift, 1   @ bitWidth 1 (Received OUT Data Interrupt)  
        .equ USBHS_RXSTPI_Shift, 2   @ bitWidth 1 (Received SETUP Interrupt)  
        .equ USBHS_NAKOUTI_Shift, 3   @ bitWidth 1 (NAKed OUT Interrupt)  
        .equ USBHS_NAKINI_Shift, 4   @ bitWidth 1 (NAKed IN Interrupt)  
        .equ USBHS_OVERFI_Shift, 5   @ bitWidth 1 (Overflow Interrupt)  
        .equ USBHS_STALLEDI_Shift, 6   @ bitWidth 1 (STALLed Interrupt)  
        .equ USBHS_SHORTPACKET_Shift, 7   @ bitWidth 1 (Short Packet Interrupt)  
        .equ USBHS_DTSEQ_Shift, 8   @ bitWidth 2 (Data Toggle Sequence)  
        .equ USBHS_NBUSYBK_Shift, 12   @ bitWidth 2 (Number of Busy Banks)  
        .equ USBHS_CURRBK_Shift, 14   @ bitWidth 2 (Current Bank)  
        .equ USBHS_RWALL_Shift, 16   @ bitWidth 1 (Read/Write Allowed)  
        .equ USBHS_CTRLDIR_Shift, 17   @ bitWidth 1 (Control Direction)  
        .equ USBHS_CFGOK_Shift, 18   @ bitWidth 1 (Configuration OK Status)  
        .equ USBHS_BYCT_Shift, 20   @ bitWidth 11 (Byte Count)  
 
    .equ USBHS_DEVEPTICR[%s], USBHS_BASE + 0x160 @ (Device Endpoint Clear Register n = 0 0) 
        .equ USBHS_TXINIC_Shift, 0   @ bitWidth 1 (Transmitted IN Data Interrupt Clear)  
        .equ USBHS_RXOUTIC_Shift, 1   @ bitWidth 1 (Received OUT Data Interrupt Clear)  
        .equ USBHS_RXSTPIC_Shift, 2   @ bitWidth 1 (Received SETUP Interrupt Clear)  
        .equ USBHS_NAKOUTIC_Shift, 3   @ bitWidth 1 (NAKed OUT Interrupt Clear)  
        .equ USBHS_NAKINIC_Shift, 4   @ bitWidth 1 (NAKed IN Interrupt Clear)  
        .equ USBHS_OVERFIC_Shift, 5   @ bitWidth 1 (Overflow Interrupt Clear)  
        .equ USBHS_STALLEDIC_Shift, 6   @ bitWidth 1 (STALLed Interrupt Clear)  
        .equ USBHS_SHORTPACKETC_Shift, 7   @ bitWidth 1 (Short Packet Interrupt Clear)  
 
    .equ USBHS_DEVEPTIFR[%s], USBHS_BASE + 0x190 @ (Device Endpoint Set Register n = 0 0) 
        .equ USBHS_TXINIS_Shift, 0   @ bitWidth 1 (Transmitted IN Data Interrupt Set)  
        .equ USBHS_RXOUTIS_Shift, 1   @ bitWidth 1 (Received OUT Data Interrupt Set)  
        .equ USBHS_RXSTPIS_Shift, 2   @ bitWidth 1 (Received SETUP Interrupt Set)  
        .equ USBHS_NAKOUTIS_Shift, 3   @ bitWidth 1 (NAKed OUT Interrupt Set)  
        .equ USBHS_NAKINIS_Shift, 4   @ bitWidth 1 (NAKed IN Interrupt Set)  
        .equ USBHS_OVERFIS_Shift, 5   @ bitWidth 1 (Overflow Interrupt Set)  
        .equ USBHS_STALLEDIS_Shift, 6   @ bitWidth 1 (STALLed Interrupt Set)  
        .equ USBHS_SHORTPACKETS_Shift, 7   @ bitWidth 1 (Short Packet Interrupt Set)  
        .equ USBHS_NBUSYBKS_Shift, 12   @ bitWidth 1 (Number of Busy Banks Interrupt Set)  
 
    .equ USBHS_DEVEPTIMR[%s], USBHS_BASE + 0x1C0 @ (Device Endpoint Mask Register n = 0 0) 
        .equ USBHS_TXINE_Shift, 0   @ bitWidth 1 (Transmitted IN Data Interrupt)  
        .equ USBHS_RXOUTE_Shift, 1   @ bitWidth 1 (Received OUT Data Interrupt)  
        .equ USBHS_RXSTPE_Shift, 2   @ bitWidth 1 (Received SETUP Interrupt)  
        .equ USBHS_NAKOUTE_Shift, 3   @ bitWidth 1 (NAKed OUT Interrupt)  
        .equ USBHS_NAKINE_Shift, 4   @ bitWidth 1 (NAKed IN Interrupt)  
        .equ USBHS_OVERFE_Shift, 5   @ bitWidth 1 (Overflow Interrupt)  
        .equ USBHS_STALLEDE_Shift, 6   @ bitWidth 1 (STALLed Interrupt)  
        .equ USBHS_SHORTPACKETE_Shift, 7   @ bitWidth 1 (Short Packet Interrupt)  
        .equ USBHS_NBUSYBKE_Shift, 12   @ bitWidth 1 (Number of Busy Banks Interrupt)  
        .equ USBHS_KILLBK_Shift, 13   @ bitWidth 1 (Kill IN Bank)  
        .equ USBHS_FIFOCON_Shift, 14   @ bitWidth 1 (FIFO Control)  
        .equ USBHS_EPDISHDMA_Shift, 16   @ bitWidth 1 (Endpoint Interrupts Disable HDMA Request)  
        .equ USBHS_NYETDIS_Shift, 17   @ bitWidth 1 (NYET Token Disable)  
        .equ USBHS_RSTDT_Shift, 18   @ bitWidth 1 (Reset Data Toggle)  
        .equ USBHS_STALLRQ_Shift, 19   @ bitWidth 1 (STALL Request)  
 
    .equ USBHS_DEVEPTIER[%s], USBHS_BASE + 0x1F0 @ (Device Endpoint Enable Register n = 0 0) 
        .equ USBHS_TXINES_Shift, 0   @ bitWidth 1 (Transmitted IN Data Interrupt Enable)  
        .equ USBHS_RXOUTES_Shift, 1   @ bitWidth 1 (Received OUT Data Interrupt Enable)  
        .equ USBHS_RXSTPES_Shift, 2   @ bitWidth 1 (Received SETUP Interrupt Enable)  
        .equ USBHS_NAKOUTES_Shift, 3   @ bitWidth 1 (NAKed OUT Interrupt Enable)  
        .equ USBHS_NAKINES_Shift, 4   @ bitWidth 1 (NAKed IN Interrupt Enable)  
        .equ USBHS_OVERFES_Shift, 5   @ bitWidth 1 (Overflow Interrupt Enable)  
        .equ USBHS_STALLEDES_Shift, 6   @ bitWidth 1 (STALLed Interrupt Enable)  
        .equ USBHS_SHORTPACKETES_Shift, 7   @ bitWidth 1 (Short Packet Interrupt Enable)  
        .equ USBHS_NBUSYBKES_Shift, 12   @ bitWidth 1 (Number of Busy Banks Interrupt Enable)  
        .equ USBHS_KILLBKS_Shift, 13   @ bitWidth 1 (Kill IN Bank)  
        .equ USBHS_FIFOCONS_Shift, 14   @ bitWidth 1 (FIFO Control)  
        .equ USBHS_EPDISHDMAS_Shift, 16   @ bitWidth 1 (Endpoint Interrupts Disable HDMA Request Enable)  
        .equ USBHS_NYETDISS_Shift, 17   @ bitWidth 1 (NYET Token Disable Enable)  
        .equ USBHS_RSTDTS_Shift, 18   @ bitWidth 1 (Reset Data Toggle Enable)  
        .equ USBHS_STALLRQS_Shift, 19   @ bitWidth 1 (STALL Request Enable)  
 
    .equ USBHS_DEVEPTIDR[%s], USBHS_BASE + 0x220 @ (Device Endpoint Disable Register n = 0 0) 
        .equ USBHS_TXINEC_Shift, 0   @ bitWidth 1 (Transmitted IN Interrupt Clear)  
        .equ USBHS_RXOUTEC_Shift, 1   @ bitWidth 1 (Received OUT Data Interrupt Clear)  
        .equ USBHS_RXSTPEC_Shift, 2   @ bitWidth 1 (Received SETUP Interrupt Clear)  
        .equ USBHS_NAKOUTEC_Shift, 3   @ bitWidth 1 (NAKed OUT Interrupt Clear)  
        .equ USBHS_NAKINEC_Shift, 4   @ bitWidth 1 (NAKed IN Interrupt Clear)  
        .equ USBHS_OVERFEC_Shift, 5   @ bitWidth 1 (Overflow Interrupt Clear)  
        .equ USBHS_STALLEDEC_Shift, 6   @ bitWidth 1 (STALLed Interrupt Clear)  
        .equ USBHS_SHORTPACKETEC_Shift, 7   @ bitWidth 1 (Shortpacket Interrupt Clear)  
        .equ USBHS_NBUSYBKEC_Shift, 12   @ bitWidth 1 (Number of Busy Banks Interrupt Clear)  
        .equ USBHS_FIFOCONC_Shift, 14   @ bitWidth 1 (FIFO Control Clear)  
        .equ USBHS_EPDISHDMAC_Shift, 16   @ bitWidth 1 (Endpoint Interrupts Disable HDMA Request Clear)  
        .equ USBHS_NYETDISC_Shift, 17   @ bitWidth 1 (NYET Token Disable Clear)  
        .equ USBHS_STALLRQC_Shift, 19   @ bitWidth 1 (STALL Request Clear)  
 
    .equ USBHS_HSTCTRL, USBHS_BASE + 0x0400 @ (Host General Control Register) 
        .equ USBHS_SOFE_Shift, 8   @ bitWidth 1 (Start of Frame Generation Enable)  
        .equ USBHS_RESET_Shift, 9   @ bitWidth 1 (Send USB Reset)  
        .equ USBHS_RESUME_Shift, 10   @ bitWidth 1 (Send USB Resume)  
        .equ USBHS_SPDCONF_Shift, 12   @ bitWidth 2 (Mode Configuration)  
 
    .equ USBHS_HSTISR, USBHS_BASE + 0x0404 @ (Host Global Interrupt Status Register) 
        .equ USBHS_DCONNI_Shift, 0   @ bitWidth 1 (Device Connection Interrupt)  
        .equ USBHS_DDISCI_Shift, 1   @ bitWidth 1 (Device Disconnection Interrupt)  
        .equ USBHS_RSTI_Shift, 2   @ bitWidth 1 (USB Reset Sent Interrupt)  
        .equ USBHS_RSMEDI_Shift, 3   @ bitWidth 1 (Downstream Resume Sent Interrupt)  
        .equ USBHS_RXRSMI_Shift, 4   @ bitWidth 1 (Upstream Resume Received Interrupt)  
        .equ USBHS_HSOFI_Shift, 5   @ bitWidth 1 (Host Start of Frame Interrupt)  
        .equ USBHS_HWUPI_Shift, 6   @ bitWidth 1 (Host Wake-Up Interrupt)  
        .equ USBHS_PEP_0_Shift, 8   @ bitWidth 1 (Pipe 0 Interrupt)  
        .equ USBHS_PEP_1_Shift, 9   @ bitWidth 1 (Pipe 1 Interrupt)  
        .equ USBHS_PEP_2_Shift, 10   @ bitWidth 1 (Pipe 2 Interrupt)  
        .equ USBHS_PEP_3_Shift, 11   @ bitWidth 1 (Pipe 3 Interrupt)  
        .equ USBHS_PEP_4_Shift, 12   @ bitWidth 1 (Pipe 4 Interrupt)  
        .equ USBHS_PEP_5_Shift, 13   @ bitWidth 1 (Pipe 5 Interrupt)  
        .equ USBHS_PEP_6_Shift, 14   @ bitWidth 1 (Pipe 6 Interrupt)  
        .equ USBHS_PEP_7_Shift, 15   @ bitWidth 1 (Pipe 7 Interrupt)  
        .equ USBHS_PEP_8_Shift, 16   @ bitWidth 1 (Pipe 8 Interrupt)  
        .equ USBHS_PEP_9_Shift, 17   @ bitWidth 1 (Pipe 9 Interrupt)  
        .equ USBHS_PEP_10_Shift, 18   @ bitWidth 1 (Pipe 10 Interrupt)  
        .equ USBHS_PEP_11_Shift, 19   @ bitWidth 1 (Pipe 11 Interrupt)  
        .equ USBHS_DMA_1_Shift, 25   @ bitWidth 1 (DMA Channel 1 Interrupt)  
        .equ USBHS_DMA_2_Shift, 26   @ bitWidth 1 (DMA Channel 2 Interrupt)  
        .equ USBHS_DMA_3_Shift, 27   @ bitWidth 1 (DMA Channel 3 Interrupt)  
        .equ USBHS_DMA_4_Shift, 28   @ bitWidth 1 (DMA Channel 4 Interrupt)  
        .equ USBHS_DMA_5_Shift, 29   @ bitWidth 1 (DMA Channel 5 Interrupt)  
        .equ USBHS_DMA_6_Shift, 30   @ bitWidth 1 (DMA Channel 6 Interrupt)  
        .equ USBHS_DMA_7_Shift, 31   @ bitWidth 1 (DMA Channel 7 Interrupt)  
 
    .equ USBHS_HSTICR, USBHS_BASE + 0x0408 @ (Host Global Interrupt Clear Register) 
        .equ USBHS_DCONNIC_Shift, 0   @ bitWidth 1 (Device Connection Interrupt Clear)  
        .equ USBHS_DDISCIC_Shift, 1   @ bitWidth 1 (Device Disconnection Interrupt Clear)  
        .equ USBHS_RSTIC_Shift, 2   @ bitWidth 1 (USB Reset Sent Interrupt Clear)  
        .equ USBHS_RSMEDIC_Shift, 3   @ bitWidth 1 (Downstream Resume Sent Interrupt Clear)  
        .equ USBHS_RXRSMIC_Shift, 4   @ bitWidth 1 (Upstream Resume Received Interrupt Clear)  
        .equ USBHS_HSOFIC_Shift, 5   @ bitWidth 1 (Host Start of Frame Interrupt Clear)  
        .equ USBHS_HWUPIC_Shift, 6   @ bitWidth 1 (Host Wake-Up Interrupt Clear)  
 
    .equ USBHS_HSTIFR, USBHS_BASE + 0x040C @ (Host Global Interrupt Set Register) 
        .equ USBHS_DCONNIS_Shift, 0   @ bitWidth 1 (Device Connection Interrupt Set)  
        .equ USBHS_DDISCIS_Shift, 1   @ bitWidth 1 (Device Disconnection Interrupt Set)  
        .equ USBHS_RSTIS_Shift, 2   @ bitWidth 1 (USB Reset Sent Interrupt Set)  
        .equ USBHS_RSMEDIS_Shift, 3   @ bitWidth 1 (Downstream Resume Sent Interrupt Set)  
        .equ USBHS_RXRSMIS_Shift, 4   @ bitWidth 1 (Upstream Resume Received Interrupt Set)  
        .equ USBHS_HSOFIS_Shift, 5   @ bitWidth 1 (Host Start of Frame Interrupt Set)  
        .equ USBHS_HWUPIS_Shift, 6   @ bitWidth 1 (Host Wake-Up Interrupt Set)  
        .equ USBHS_DMA_1_Shift, 25   @ bitWidth 1 (DMA Channel 1 Interrupt Set)  
        .equ USBHS_DMA_2_Shift, 26   @ bitWidth 1 (DMA Channel 2 Interrupt Set)  
        .equ USBHS_DMA_3_Shift, 27   @ bitWidth 1 (DMA Channel 3 Interrupt Set)  
        .equ USBHS_DMA_4_Shift, 28   @ bitWidth 1 (DMA Channel 4 Interrupt Set)  
        .equ USBHS_DMA_5_Shift, 29   @ bitWidth 1 (DMA Channel 5 Interrupt Set)  
        .equ USBHS_DMA_6_Shift, 30   @ bitWidth 1 (DMA Channel 6 Interrupt Set)  
        .equ USBHS_DMA_7_Shift, 31   @ bitWidth 1 (DMA Channel 7 Interrupt Set)  
 
    .equ USBHS_HSTIMR, USBHS_BASE + 0x0410 @ (Host Global Interrupt Mask Register) 
        .equ USBHS_DCONNIE_Shift, 0   @ bitWidth 1 (Device Connection Interrupt Enable)  
        .equ USBHS_DDISCIE_Shift, 1   @ bitWidth 1 (Device Disconnection Interrupt Enable)  
        .equ USBHS_RSTIE_Shift, 2   @ bitWidth 1 (USB Reset Sent Interrupt Enable)  
        .equ USBHS_RSMEDIE_Shift, 3   @ bitWidth 1 (Downstream Resume Sent Interrupt Enable)  
        .equ USBHS_RXRSMIE_Shift, 4   @ bitWidth 1 (Upstream Resume Received Interrupt Enable)  
        .equ USBHS_HSOFIE_Shift, 5   @ bitWidth 1 (Host Start of Frame Interrupt Enable)  
        .equ USBHS_HWUPIE_Shift, 6   @ bitWidth 1 (Host Wake-Up Interrupt Enable)  
        .equ USBHS_PEP_0_Shift, 8   @ bitWidth 1 (Pipe 0 Interrupt Enable)  
        .equ USBHS_PEP_1_Shift, 9   @ bitWidth 1 (Pipe 1 Interrupt Enable)  
        .equ USBHS_PEP_2_Shift, 10   @ bitWidth 1 (Pipe 2 Interrupt Enable)  
        .equ USBHS_PEP_3_Shift, 11   @ bitWidth 1 (Pipe 3 Interrupt Enable)  
        .equ USBHS_PEP_4_Shift, 12   @ bitWidth 1 (Pipe 4 Interrupt Enable)  
        .equ USBHS_PEP_5_Shift, 13   @ bitWidth 1 (Pipe 5 Interrupt Enable)  
        .equ USBHS_PEP_6_Shift, 14   @ bitWidth 1 (Pipe 6 Interrupt Enable)  
        .equ USBHS_PEP_7_Shift, 15   @ bitWidth 1 (Pipe 7 Interrupt Enable)  
        .equ USBHS_PEP_8_Shift, 16   @ bitWidth 1 (Pipe 8 Interrupt Enable)  
        .equ USBHS_PEP_9_Shift, 17   @ bitWidth 1 (Pipe 9 Interrupt Enable)  
        .equ USBHS_PEP_10_Shift, 18   @ bitWidth 1 (Pipe 10 Interrupt Enable)  
        .equ USBHS_PEP_11_Shift, 19   @ bitWidth 1 (Pipe 11 Interrupt Enable)  
        .equ USBHS_DMA_1_Shift, 25   @ bitWidth 1 (DMA Channel 1 Interrupt Enable)  
        .equ USBHS_DMA_2_Shift, 26   @ bitWidth 1 (DMA Channel 2 Interrupt Enable)  
        .equ USBHS_DMA_3_Shift, 27   @ bitWidth 1 (DMA Channel 3 Interrupt Enable)  
        .equ USBHS_DMA_4_Shift, 28   @ bitWidth 1 (DMA Channel 4 Interrupt Enable)  
        .equ USBHS_DMA_5_Shift, 29   @ bitWidth 1 (DMA Channel 5 Interrupt Enable)  
        .equ USBHS_DMA_6_Shift, 30   @ bitWidth 1 (DMA Channel 6 Interrupt Enable)  
        .equ USBHS_DMA_7_Shift, 31   @ bitWidth 1 (DMA Channel 7 Interrupt Enable)  
 
    .equ USBHS_HSTIDR, USBHS_BASE + 0x0414 @ (Host Global Interrupt Disable Register) 
        .equ USBHS_DCONNIEC_Shift, 0   @ bitWidth 1 (Device Connection Interrupt Disable)  
        .equ USBHS_DDISCIEC_Shift, 1   @ bitWidth 1 (Device Disconnection Interrupt Disable)  
        .equ USBHS_RSTIEC_Shift, 2   @ bitWidth 1 (USB Reset Sent Interrupt Disable)  
        .equ USBHS_RSMEDIEC_Shift, 3   @ bitWidth 1 (Downstream Resume Sent Interrupt Disable)  
        .equ USBHS_RXRSMIEC_Shift, 4   @ bitWidth 1 (Upstream Resume Received Interrupt Disable)  
        .equ USBHS_HSOFIEC_Shift, 5   @ bitWidth 1 (Host Start of Frame Interrupt Disable)  
        .equ USBHS_HWUPIEC_Shift, 6   @ bitWidth 1 (Host Wake-Up Interrupt Disable)  
        .equ USBHS_PEP_0_Shift, 8   @ bitWidth 1 (Pipe 0 Interrupt Disable)  
        .equ USBHS_PEP_1_Shift, 9   @ bitWidth 1 (Pipe 1 Interrupt Disable)  
        .equ USBHS_PEP_2_Shift, 10   @ bitWidth 1 (Pipe 2 Interrupt Disable)  
        .equ USBHS_PEP_3_Shift, 11   @ bitWidth 1 (Pipe 3 Interrupt Disable)  
        .equ USBHS_PEP_4_Shift, 12   @ bitWidth 1 (Pipe 4 Interrupt Disable)  
        .equ USBHS_PEP_5_Shift, 13   @ bitWidth 1 (Pipe 5 Interrupt Disable)  
        .equ USBHS_PEP_6_Shift, 14   @ bitWidth 1 (Pipe 6 Interrupt Disable)  
        .equ USBHS_PEP_7_Shift, 15   @ bitWidth 1 (Pipe 7 Interrupt Disable)  
        .equ USBHS_PEP_8_Shift, 16   @ bitWidth 1 (Pipe 8 Interrupt Disable)  
        .equ USBHS_PEP_9_Shift, 17   @ bitWidth 1 (Pipe 9 Interrupt Disable)  
        .equ USBHS_PEP_10_Shift, 18   @ bitWidth 1 (Pipe 10 Interrupt Disable)  
        .equ USBHS_PEP_11_Shift, 19   @ bitWidth 1 (Pipe 11 Interrupt Disable)  
        .equ USBHS_DMA_1_Shift, 25   @ bitWidth 1 (DMA Channel 1 Interrupt Disable)  
        .equ USBHS_DMA_2_Shift, 26   @ bitWidth 1 (DMA Channel 2 Interrupt Disable)  
        .equ USBHS_DMA_3_Shift, 27   @ bitWidth 1 (DMA Channel 3 Interrupt Disable)  
        .equ USBHS_DMA_4_Shift, 28   @ bitWidth 1 (DMA Channel 4 Interrupt Disable)  
        .equ USBHS_DMA_5_Shift, 29   @ bitWidth 1 (DMA Channel 5 Interrupt Disable)  
        .equ USBHS_DMA_6_Shift, 30   @ bitWidth 1 (DMA Channel 6 Interrupt Disable)  
        .equ USBHS_DMA_7_Shift, 31   @ bitWidth 1 (DMA Channel 7 Interrupt Disable)  
 
    .equ USBHS_HSTIER, USBHS_BASE + 0x0418 @ (Host Global Interrupt Enable Register) 
        .equ USBHS_DCONNIES_Shift, 0   @ bitWidth 1 (Device Connection Interrupt Enable)  
        .equ USBHS_DDISCIES_Shift, 1   @ bitWidth 1 (Device Disconnection Interrupt Enable)  
        .equ USBHS_RSTIES_Shift, 2   @ bitWidth 1 (USB Reset Sent Interrupt Enable)  
        .equ USBHS_RSMEDIES_Shift, 3   @ bitWidth 1 (Downstream Resume Sent Interrupt Enable)  
        .equ USBHS_RXRSMIES_Shift, 4   @ bitWidth 1 (Upstream Resume Received Interrupt Enable)  
        .equ USBHS_HSOFIES_Shift, 5   @ bitWidth 1 (Host Start of Frame Interrupt Enable)  
        .equ USBHS_HWUPIES_Shift, 6   @ bitWidth 1 (Host Wake-Up Interrupt Enable)  
        .equ USBHS_PEP_0_Shift, 8   @ bitWidth 1 (Pipe 0 Interrupt Enable)  
        .equ USBHS_PEP_1_Shift, 9   @ bitWidth 1 (Pipe 1 Interrupt Enable)  
        .equ USBHS_PEP_2_Shift, 10   @ bitWidth 1 (Pipe 2 Interrupt Enable)  
        .equ USBHS_PEP_3_Shift, 11   @ bitWidth 1 (Pipe 3 Interrupt Enable)  
        .equ USBHS_PEP_4_Shift, 12   @ bitWidth 1 (Pipe 4 Interrupt Enable)  
        .equ USBHS_PEP_5_Shift, 13   @ bitWidth 1 (Pipe 5 Interrupt Enable)  
        .equ USBHS_PEP_6_Shift, 14   @ bitWidth 1 (Pipe 6 Interrupt Enable)  
        .equ USBHS_PEP_7_Shift, 15   @ bitWidth 1 (Pipe 7 Interrupt Enable)  
        .equ USBHS_PEP_8_Shift, 16   @ bitWidth 1 (Pipe 8 Interrupt Enable)  
        .equ USBHS_PEP_9_Shift, 17   @ bitWidth 1 (Pipe 9 Interrupt Enable)  
        .equ USBHS_PEP_10_Shift, 18   @ bitWidth 1 (Pipe 10 Interrupt Enable)  
        .equ USBHS_PEP_11_Shift, 19   @ bitWidth 1 (Pipe 11 Interrupt Enable)  
        .equ USBHS_DMA_1_Shift, 25   @ bitWidth 1 (DMA Channel 1 Interrupt Enable)  
        .equ USBHS_DMA_2_Shift, 26   @ bitWidth 1 (DMA Channel 2 Interrupt Enable)  
        .equ USBHS_DMA_3_Shift, 27   @ bitWidth 1 (DMA Channel 3 Interrupt Enable)  
        .equ USBHS_DMA_4_Shift, 28   @ bitWidth 1 (DMA Channel 4 Interrupt Enable)  
        .equ USBHS_DMA_5_Shift, 29   @ bitWidth 1 (DMA Channel 5 Interrupt Enable)  
        .equ USBHS_DMA_6_Shift, 30   @ bitWidth 1 (DMA Channel 6 Interrupt Enable)  
        .equ USBHS_DMA_7_Shift, 31   @ bitWidth 1 (DMA Channel 7 Interrupt Enable)  
 
    .equ USBHS_HSTPIP, USBHS_BASE + 0x0041C @ (Host Pipe Register) 
        .equ USBHS_PEN0_Shift, 0   @ bitWidth 1 (Pipe 0 Enable)  
        .equ USBHS_PEN1_Shift, 1   @ bitWidth 1 (Pipe 1 Enable)  
        .equ USBHS_PEN2_Shift, 2   @ bitWidth 1 (Pipe 2 Enable)  
        .equ USBHS_PEN3_Shift, 3   @ bitWidth 1 (Pipe 3 Enable)  
        .equ USBHS_PEN4_Shift, 4   @ bitWidth 1 (Pipe 4 Enable)  
        .equ USBHS_PEN5_Shift, 5   @ bitWidth 1 (Pipe 5 Enable)  
        .equ USBHS_PEN6_Shift, 6   @ bitWidth 1 (Pipe 6 Enable)  
        .equ USBHS_PEN7_Shift, 7   @ bitWidth 1 (Pipe 7 Enable)  
        .equ USBHS_PEN8_Shift, 8   @ bitWidth 1 (Pipe 8 Enable)  
        .equ USBHS_PRST0_Shift, 16   @ bitWidth 1 (Pipe 0 Reset)  
        .equ USBHS_PRST1_Shift, 17   @ bitWidth 1 (Pipe 1 Reset)  
        .equ USBHS_PRST2_Shift, 18   @ bitWidth 1 (Pipe 2 Reset)  
        .equ USBHS_PRST3_Shift, 19   @ bitWidth 1 (Pipe 3 Reset)  
        .equ USBHS_PRST4_Shift, 20   @ bitWidth 1 (Pipe 4 Reset)  
        .equ USBHS_PRST5_Shift, 21   @ bitWidth 1 (Pipe 5 Reset)  
        .equ USBHS_PRST6_Shift, 22   @ bitWidth 1 (Pipe 6 Reset)  
        .equ USBHS_PRST7_Shift, 23   @ bitWidth 1 (Pipe 7 Reset)  
        .equ USBHS_PRST8_Shift, 24   @ bitWidth 1 (Pipe 8 Reset)  
 
    .equ USBHS_HSTFNUM, USBHS_BASE + 0x0420 @ (Host Frame Number Register) 
        .equ USBHS_MFNUM_Shift, 0   @ bitWidth 3 (Micro Frame Number)  
        .equ USBHS_FNUM_Shift, 3   @ bitWidth 11 (Frame Number)  
        .equ USBHS_FLENHIGH_Shift, 16   @ bitWidth 8 (Frame Length)  
 
    .equ USBHS_HSTADDR1, USBHS_BASE + 0x0424 @ (Host Address 1 Register) 
        .equ USBHS_HSTADDRP0_Shift, 0   @ bitWidth 7 (USB Host Address)  
        .equ USBHS_HSTADDRP1_Shift, 8   @ bitWidth 7 (USB Host Address)  
        .equ USBHS_HSTADDRP2_Shift, 16   @ bitWidth 7 (USB Host Address)  
        .equ USBHS_HSTADDRP3_Shift, 24   @ bitWidth 7 (USB Host Address)  
 
    .equ USBHS_HSTADDR2, USBHS_BASE + 0x0428 @ (Host Address 2 Register) 
        .equ USBHS_HSTADDRP4_Shift, 0   @ bitWidth 7 (USB Host Address)  
        .equ USBHS_HSTADDRP5_Shift, 8   @ bitWidth 7 (USB Host Address)  
        .equ USBHS_HSTADDRP6_Shift, 16   @ bitWidth 7 (USB Host Address)  
        .equ USBHS_HSTADDRP7_Shift, 24   @ bitWidth 7 (USB Host Address)  
 
    .equ USBHS_HSTADDR3, USBHS_BASE + 0x042C @ (Host Address 3 Register) 
        .equ USBHS_HSTADDRP8_Shift, 0   @ bitWidth 7 (USB Host Address)  
        .equ USBHS_HSTADDRP9_Shift, 8   @ bitWidth 7 (USB Host Address)  
 
    .equ USBHS_HSTPIPCFG[%s], USBHS_BASE + 0x500 @ (Host Pipe Configuration Register n = 0 0) 
        .equ USBHS_ALLOC_Shift, 1   @ bitWidth 1 (Pipe Memory Allocate)  
        .equ USBHS_PBK_Shift, 2   @ bitWidth 2 (Pipe Banks)  
        .equ USBHS_PSIZE_Shift, 4   @ bitWidth 3 (Pipe Size)  
        .equ USBHS_PTOKEN_Shift, 8   @ bitWidth 2 (Pipe Token)  
        .equ USBHS_AUTOSW_Shift, 10   @ bitWidth 1 (Automatic Switch)  
        .equ USBHS_PTYPE_Shift, 12   @ bitWidth 2 (Pipe Type)  
        .equ USBHS_PEPNUM_Shift, 16   @ bitWidth 4 (Pipe Endpoint Number)  
        .equ USBHS_INTFRQ_Shift, 24   @ bitWidth 8 (Pipe Interrupt Request Frequency)  
 
    .equ USBHS_HSTPIPISR[%s], USBHS_BASE + 0x530 @ (Host Pipe Status Register n = 0 0) 
        .equ USBHS_RXINI_Shift, 0   @ bitWidth 1 (Received IN Data Interrupt)  
        .equ USBHS_TXOUTI_Shift, 1   @ bitWidth 1 (Transmitted OUT Data Interrupt)  
        .equ USBHS_TXSTPI_Shift, 2   @ bitWidth 1 (Transmitted SETUP Interrupt)  
        .equ USBHS_PERRI_Shift, 3   @ bitWidth 1 (Pipe Error Interrupt)  
        .equ USBHS_NAKEDI_Shift, 4   @ bitWidth 1 (NAKed Interrupt)  
        .equ USBHS_OVERFI_Shift, 5   @ bitWidth 1 (Overflow Interrupt)  
        .equ USBHS_RXSTALLDI_Shift, 6   @ bitWidth 1 (Received STALLed Interrupt)  
        .equ USBHS_SHORTPACKETI_Shift, 7   @ bitWidth 1 (Short Packet Interrupt)  
        .equ USBHS_DTSEQ_Shift, 8   @ bitWidth 2 (Data Toggle Sequence)  
        .equ USBHS_NBUSYBK_Shift, 12   @ bitWidth 2 (Number of Busy Banks)  
        .equ USBHS_CURRBK_Shift, 14   @ bitWidth 2 (Current Bank)  
        .equ USBHS_RWALL_Shift, 16   @ bitWidth 1 (Read/Write Allowed)  
        .equ USBHS_CFGOK_Shift, 18   @ bitWidth 1 (Configuration OK Status)  
        .equ USBHS_PBYCT_Shift, 20   @ bitWidth 11 (Pipe Byte Count)  
 
    .equ USBHS_HSTPIPICR[%s], USBHS_BASE + 0x560 @ (Host Pipe Clear Register n = 0 0) 
        .equ USBHS_RXINIC_Shift, 0   @ bitWidth 1 (Received IN Data Interrupt Clear)  
        .equ USBHS_TXOUTIC_Shift, 1   @ bitWidth 1 (Transmitted OUT Data Interrupt Clear)  
        .equ USBHS_TXSTPIC_Shift, 2   @ bitWidth 1 (Transmitted SETUP Interrupt Clear)  
        .equ USBHS_NAKEDIC_Shift, 4   @ bitWidth 1 (NAKed Interrupt Clear)  
        .equ USBHS_OVERFIC_Shift, 5   @ bitWidth 1 (Overflow Interrupt Clear)  
        .equ USBHS_RXSTALLDIC_Shift, 6   @ bitWidth 1 (Received STALLed Interrupt Clear)  
        .equ USBHS_SHORTPACKETIC_Shift, 7   @ bitWidth 1 (Short Packet Interrupt Clear)  
 
    .equ USBHS_HSTPIPIFR[%s], USBHS_BASE + 0x590 @ (Host Pipe Set Register n = 0 0) 
        .equ USBHS_RXINIS_Shift, 0   @ bitWidth 1 (Received IN Data Interrupt Set)  
        .equ USBHS_TXOUTIS_Shift, 1   @ bitWidth 1 (Transmitted OUT Data Interrupt Set)  
        .equ USBHS_TXSTPIS_Shift, 2   @ bitWidth 1 (Transmitted SETUP Interrupt Set)  
        .equ USBHS_PERRIS_Shift, 3   @ bitWidth 1 (Pipe Error Interrupt Set)  
        .equ USBHS_NAKEDIS_Shift, 4   @ bitWidth 1 (NAKed Interrupt Set)  
        .equ USBHS_OVERFIS_Shift, 5   @ bitWidth 1 (Overflow Interrupt Set)  
        .equ USBHS_RXSTALLDIS_Shift, 6   @ bitWidth 1 (Received STALLed Interrupt Set)  
        .equ USBHS_SHORTPACKETIS_Shift, 7   @ bitWidth 1 (Short Packet Interrupt Set)  
        .equ USBHS_NBUSYBKS_Shift, 12   @ bitWidth 1 (Number of Busy Banks Set)  
 
    .equ USBHS_HSTPIPIMR[%s], USBHS_BASE + 0x5C0 @ (Host Pipe Mask Register n = 0 0) 
        .equ USBHS_RXINE_Shift, 0   @ bitWidth 1 (Received IN Data Interrupt Enable)  
        .equ USBHS_TXOUTE_Shift, 1   @ bitWidth 1 (Transmitted OUT Data Interrupt Enable)  
        .equ USBHS_TXSTPE_Shift, 2   @ bitWidth 1 (Transmitted SETUP Interrupt Enable)  
        .equ USBHS_PERRE_Shift, 3   @ bitWidth 1 (Pipe Error Interrupt Enable)  
        .equ USBHS_NAKEDE_Shift, 4   @ bitWidth 1 (NAKed Interrupt Enable)  
        .equ USBHS_OVERFIE_Shift, 5   @ bitWidth 1 (Overflow Interrupt Enable)  
        .equ USBHS_RXSTALLDE_Shift, 6   @ bitWidth 1 (Received STALLed Interrupt Enable)  
        .equ USBHS_SHORTPACKETIE_Shift, 7   @ bitWidth 1 (Short Packet Interrupt Enable)  
        .equ USBHS_NBUSYBKE_Shift, 12   @ bitWidth 1 (Number of Busy Banks Interrupt Enable)  
        .equ USBHS_FIFOCON_Shift, 14   @ bitWidth 1 (FIFO Control)  
        .equ USBHS_PDISHDMA_Shift, 16   @ bitWidth 1 (Pipe Interrupts Disable HDMA Request Enable)  
        .equ USBHS_PFREEZE_Shift, 17   @ bitWidth 1 (Pipe Freeze)  
        .equ USBHS_RSTDT_Shift, 18   @ bitWidth 1 (Reset Data Toggle)  
 
    .equ USBHS_HSTPIPIER[%s], USBHS_BASE + 0x5F0 @ (Host Pipe Enable Register n = 0 0) 
        .equ USBHS_RXINES_Shift, 0   @ bitWidth 1 (Received IN Data Interrupt Enable)  
        .equ USBHS_TXOUTES_Shift, 1   @ bitWidth 1 (Transmitted OUT Data Interrupt Enable)  
        .equ USBHS_TXSTPES_Shift, 2   @ bitWidth 1 (Transmitted SETUP Interrupt Enable)  
        .equ USBHS_PERRES_Shift, 3   @ bitWidth 1 (Pipe Error Interrupt Enable)  
        .equ USBHS_NAKEDES_Shift, 4   @ bitWidth 1 (NAKed Interrupt Enable)  
        .equ USBHS_OVERFIES_Shift, 5   @ bitWidth 1 (Overflow Interrupt Enable)  
        .equ USBHS_RXSTALLDES_Shift, 6   @ bitWidth 1 (Received STALLed Interrupt Enable)  
        .equ USBHS_SHORTPACKETIES_Shift, 7   @ bitWidth 1 (Short Packet Interrupt Enable)  
        .equ USBHS_NBUSYBKES_Shift, 12   @ bitWidth 1 (Number of Busy Banks Enable)  
        .equ USBHS_PDISHDMAS_Shift, 16   @ bitWidth 1 (Pipe Interrupts Disable HDMA Request Enable)  
        .equ USBHS_PFREEZES_Shift, 17   @ bitWidth 1 (Pipe Freeze Enable)  
        .equ USBHS_RSTDTS_Shift, 18   @ bitWidth 1 (Reset Data Toggle Enable)  
 
    .equ USBHS_HSTPIPIDR[%s], USBHS_BASE + 0x620 @ (Host Pipe Disable Register n = 0 0) 
        .equ USBHS_RXINEC_Shift, 0   @ bitWidth 1 (Received IN Data Interrupt Disable)  
        .equ USBHS_TXOUTEC_Shift, 1   @ bitWidth 1 (Transmitted OUT Data Interrupt Disable)  
        .equ USBHS_TXSTPEC_Shift, 2   @ bitWidth 1 (Transmitted SETUP Interrupt Disable)  
        .equ USBHS_PERREC_Shift, 3   @ bitWidth 1 (Pipe Error Interrupt Disable)  
        .equ USBHS_NAKEDEC_Shift, 4   @ bitWidth 1 (NAKed Interrupt Disable)  
        .equ USBHS_OVERFIEC_Shift, 5   @ bitWidth 1 (Overflow Interrupt Disable)  
        .equ USBHS_RXSTALLDEC_Shift, 6   @ bitWidth 1 (Received STALLed Interrupt Disable)  
        .equ USBHS_SHORTPACKETIEC_Shift, 7   @ bitWidth 1 (Short Packet Interrupt Disable)  
        .equ USBHS_NBUSYBKEC_Shift, 12   @ bitWidth 1 (Number of Busy Banks Disable)  
        .equ USBHS_FIFOCONC_Shift, 14   @ bitWidth 1 (FIFO Control Disable)  
        .equ USBHS_PDISHDMAC_Shift, 16   @ bitWidth 1 (Pipe Interrupts Disable HDMA Request Disable)  
        .equ USBHS_PFREEZEC_Shift, 17   @ bitWidth 1 (Pipe Freeze Disable)  
 
    .equ USBHS_HSTPIPINRQ[%s], USBHS_BASE + 0x650 @ (Host Pipe IN Request Register n = 0 0) 
        .equ USBHS_INRQ_Shift, 0   @ bitWidth 8 (IN Request Number before Freeze)  
        .equ USBHS_INMODE_Shift, 8   @ bitWidth 1 (IN Request Mode)  
 
    .equ USBHS_HSTPIPERR[%s], USBHS_BASE + 0x680 @ (Host Pipe Error Register n = 0 0) 
        .equ USBHS_DATATGL_Shift, 0   @ bitWidth 1 (Data Toggle Error)  
        .equ USBHS_DATAPID_Shift, 1   @ bitWidth 1 (Data PID Error)  
        .equ USBHS_PID_Shift, 2   @ bitWidth 1 (Data PID Error)  
        .equ USBHS_TIMEOUT_Shift, 3   @ bitWidth 1 (Time-Out Error)  
        .equ USBHS_CRC16_Shift, 4   @ bitWidth 1 (CRC16 Error)  
        .equ USBHS_COUNTER_Shift, 5   @ bitWidth 2 (Error Counter)  
 
    .equ USBHS_CTRL, USBHS_BASE + 0x0800 @ (General Control Register) 
        .equ USBHS_RDERRE_Shift, 4   @ bitWidth 1 (Remote Device Connection Error Interrupt Enable)  
        .equ USBHS_VBUSHWC_Shift, 8   @ bitWidth 1 (VBUS Hardware Control)  
        .equ USBHS_FRZCLK_Shift, 14   @ bitWidth 1 (Freeze USB Clock)  
        .equ USBHS_USBE_Shift, 15   @ bitWidth 1 (USBHS Enable)  
        .equ USBHS_UIMOD_Shift, 25   @ bitWidth 1 (USBHS Mode)  
 
    .equ USBHS_SR, USBHS_BASE + 0x0804 @ (General Status Register) 
        .equ USBHS_RDERRI_Shift, 4   @ bitWidth 1 (Remote Device Connection Error Interrupt Host mode only)  
        .equ USBHS_SPEED_Shift, 12   @ bitWidth 2 (Speed Status Device mode only)  
        .equ USBHS_CLKUSABLE_Shift, 14   @ bitWidth 1 (UTMI Clock Usable)  
 
    .equ USBHS_SCR, USBHS_BASE + 0x0808 @ (General Status Clear Register) 
        .equ USBHS_RDERRIC_Shift, 4   @ bitWidth 1 (Remote Device Connection Error Interrupt Clear)  
 
    .equ USBHS_SFR, USBHS_BASE + 0x080C @ (General Status Set Register) 
        .equ USBHS_RDERRIS_Shift, 4   @ bitWidth 1 (Remote Device Connection Error Interrupt Set)  
        .equ USBHS_VBUSRQS_Shift, 9   @ bitWidth 1 (VBUS Request Set)  
 

@=========================== UTMI ===========================@
.equ UTMI_BASE, 0x400E0400 @ (USB Transmitter Interface Macrocell) 
    .equ UTMI_OHCIICR, UTMI_BASE + 0x10 @ (OHCI Interrupt Configuration Register) 
        .equ UTMI_RES0_Shift, 0   @ bitWidth 1 (USB PORTx Reset)  
        .equ UTMI_ARIE_Shift, 4   @ bitWidth 1 (OHCI Asynchronous Resume Interrupt Enable)  
        .equ UTMI_APPSTART_Shift, 5   @ bitWidth 1 ()  
        .equ UTMI_UDPPUDIS_Shift, 23   @ bitWidth 1 (USB Device Pull-up Disable)  
 
    .equ UTMI_CKTRIM, UTMI_BASE + 0x30 @ (UTMI Clock Trimming Register) 
        .equ UTMI_FREQ_Shift, 0   @ bitWidth 2 (UTMI Reference Clock Frequency)  
 

@=========================== WDT ===========================@
.equ WDT_BASE, 0x400E1850 @ (Watchdog Timer) 
    .equ WDT_CR, WDT_BASE + 0x00 @ (Control Register) 
        .equ WDT_WDRSTT_Shift, 0   @ bitWidth 1 (Watchdog Restart)  
        .equ WDT_KEY_Shift, 24   @ bitWidth 8 (Password)  
 
    .equ WDT_MR, WDT_BASE + 0x04 @ (Mode Register) 
        .equ WDT_WDV_Shift, 0   @ bitWidth 12 (Watchdog Counter Value)  
        .equ WDT_WDFIEN_Shift, 12   @ bitWidth 1 (Watchdog Fault Interrupt Enable)  
        .equ WDT_WDRSTEN_Shift, 13   @ bitWidth 1 (Watchdog Reset Enable)  
        .equ WDT_WDDIS_Shift, 15   @ bitWidth 1 (Watchdog Disable)  
        .equ WDT_WDD_Shift, 16   @ bitWidth 12 (Watchdog Delta Value)  
        .equ WDT_WDDBGHLT_Shift, 28   @ bitWidth 1 (Watchdog Debug Halt)  
        .equ WDT_WDIDLEHLT_Shift, 29   @ bitWidth 1 (Watchdog Idle Halt)  
 
    .equ WDT_SR, WDT_BASE + 0x08 @ (Status Register) 
        .equ WDT_WDUNF_Shift, 0   @ bitWidth 1 (Watchdog Underflow cleared on read)  
        .equ WDT_WDERR_Shift, 1   @ bitWidth 1 (Watchdog Error cleared on read)  
 

@=========================== XDMAC ===========================@
.equ XDMAC_BASE, 0x40078000 @ (Extensible DMA Controller) 
    .equ XDMAC_GTYPE, XDMAC_BASE + 0x00 @ (Global Type Register) 
        .equ XDMAC_NB_CH_Shift, 0   @ bitWidth 5 (Number of Channels Minus One)  
        .equ XDMAC_FIFO_SZ_Shift, 5   @ bitWidth 11 (Number of Bytes)  
        .equ XDMAC_NB_REQ_Shift, 16   @ bitWidth 7 (Number of Peripheral Requests Minus One)  
 
    .equ XDMAC_GCFG, XDMAC_BASE + 0x04 @ (Global Configuration Register) 
        .equ XDMAC_CGDISREG_Shift, 0   @ bitWidth 1 (Configuration Registers Clock Gating Disable)  
        .equ XDMAC_CGDISPIPE_Shift, 1   @ bitWidth 1 (Pipeline Clock Gating Disable)  
        .equ XDMAC_CGDISFIFO_Shift, 2   @ bitWidth 1 (FIFO Clock Gating Disable)  
        .equ XDMAC_CGDISIF_Shift, 3   @ bitWidth 1 (Bus Interface Clock Gating Disable)  
        .equ XDMAC_BXKBEN_Shift, 8   @ bitWidth 1 (Boundary X Kilobyte Enable)  
 
    .equ XDMAC_GWAC, XDMAC_BASE + 0x08 @ (Global Weighted Arbiter Configuration Register) 
        .equ XDMAC_PW0_Shift, 0   @ bitWidth 4 (Pool Weight 0)  
        .equ XDMAC_PW1_Shift, 4   @ bitWidth 4 (Pool Weight 1)  
        .equ XDMAC_PW2_Shift, 8   @ bitWidth 4 (Pool Weight 2)  
        .equ XDMAC_PW3_Shift, 12   @ bitWidth 4 (Pool Weight 3)  
 
    .equ XDMAC_GIE, XDMAC_BASE + 0x0C @ (Global Interrupt Enable Register) 
        .equ XDMAC_IE0_Shift, 0   @ bitWidth 1 (XDMAC Channel 0 Interrupt Enable Bit)  
        .equ XDMAC_IE1_Shift, 1   @ bitWidth 1 (XDMAC Channel 1 Interrupt Enable Bit)  
        .equ XDMAC_IE2_Shift, 2   @ bitWidth 1 (XDMAC Channel 2 Interrupt Enable Bit)  
        .equ XDMAC_IE3_Shift, 3   @ bitWidth 1 (XDMAC Channel 3 Interrupt Enable Bit)  
        .equ XDMAC_IE4_Shift, 4   @ bitWidth 1 (XDMAC Channel 4 Interrupt Enable Bit)  
        .equ XDMAC_IE5_Shift, 5   @ bitWidth 1 (XDMAC Channel 5 Interrupt Enable Bit)  
        .equ XDMAC_IE6_Shift, 6   @ bitWidth 1 (XDMAC Channel 6 Interrupt Enable Bit)  
        .equ XDMAC_IE7_Shift, 7   @ bitWidth 1 (XDMAC Channel 7 Interrupt Enable Bit)  
        .equ XDMAC_IE8_Shift, 8   @ bitWidth 1 (XDMAC Channel 8 Interrupt Enable Bit)  
        .equ XDMAC_IE9_Shift, 9   @ bitWidth 1 (XDMAC Channel 9 Interrupt Enable Bit)  
        .equ XDMAC_IE10_Shift, 10   @ bitWidth 1 (XDMAC Channel 10 Interrupt Enable Bit)  
        .equ XDMAC_IE11_Shift, 11   @ bitWidth 1 (XDMAC Channel 11 Interrupt Enable Bit)  
        .equ XDMAC_IE12_Shift, 12   @ bitWidth 1 (XDMAC Channel 12 Interrupt Enable Bit)  
        .equ XDMAC_IE13_Shift, 13   @ bitWidth 1 (XDMAC Channel 13 Interrupt Enable Bit)  
        .equ XDMAC_IE14_Shift, 14   @ bitWidth 1 (XDMAC Channel 14 Interrupt Enable Bit)  
        .equ XDMAC_IE15_Shift, 15   @ bitWidth 1 (XDMAC Channel 15 Interrupt Enable Bit)  
        .equ XDMAC_IE16_Shift, 16   @ bitWidth 1 (XDMAC Channel 16 Interrupt Enable Bit)  
        .equ XDMAC_IE17_Shift, 17   @ bitWidth 1 (XDMAC Channel 17 Interrupt Enable Bit)  
        .equ XDMAC_IE18_Shift, 18   @ bitWidth 1 (XDMAC Channel 18 Interrupt Enable Bit)  
        .equ XDMAC_IE19_Shift, 19   @ bitWidth 1 (XDMAC Channel 19 Interrupt Enable Bit)  
        .equ XDMAC_IE20_Shift, 20   @ bitWidth 1 (XDMAC Channel 20 Interrupt Enable Bit)  
        .equ XDMAC_IE21_Shift, 21   @ bitWidth 1 (XDMAC Channel 21 Interrupt Enable Bit)  
        .equ XDMAC_IE22_Shift, 22   @ bitWidth 1 (XDMAC Channel 22 Interrupt Enable Bit)  
        .equ XDMAC_IE23_Shift, 23   @ bitWidth 1 (XDMAC Channel 23 Interrupt Enable Bit)  
 
    .equ XDMAC_GID, XDMAC_BASE + 0x10 @ (Global Interrupt Disable Register) 
        .equ XDMAC_ID0_Shift, 0   @ bitWidth 1 (XDMAC Channel 0 Interrupt Disable Bit)  
        .equ XDMAC_ID1_Shift, 1   @ bitWidth 1 (XDMAC Channel 1 Interrupt Disable Bit)  
        .equ XDMAC_ID2_Shift, 2   @ bitWidth 1 (XDMAC Channel 2 Interrupt Disable Bit)  
        .equ XDMAC_ID3_Shift, 3   @ bitWidth 1 (XDMAC Channel 3 Interrupt Disable Bit)  
        .equ XDMAC_ID4_Shift, 4   @ bitWidth 1 (XDMAC Channel 4 Interrupt Disable Bit)  
        .equ XDMAC_ID5_Shift, 5   @ bitWidth 1 (XDMAC Channel 5 Interrupt Disable Bit)  
        .equ XDMAC_ID6_Shift, 6   @ bitWidth 1 (XDMAC Channel 6 Interrupt Disable Bit)  
        .equ XDMAC_ID7_Shift, 7   @ bitWidth 1 (XDMAC Channel 7 Interrupt Disable Bit)  
        .equ XDMAC_ID8_Shift, 8   @ bitWidth 1 (XDMAC Channel 8 Interrupt Disable Bit)  
        .equ XDMAC_ID9_Shift, 9   @ bitWidth 1 (XDMAC Channel 9 Interrupt Disable Bit)  
        .equ XDMAC_ID10_Shift, 10   @ bitWidth 1 (XDMAC Channel 10 Interrupt Disable Bit)  
        .equ XDMAC_ID11_Shift, 11   @ bitWidth 1 (XDMAC Channel 11 Interrupt Disable Bit)  
        .equ XDMAC_ID12_Shift, 12   @ bitWidth 1 (XDMAC Channel 12 Interrupt Disable Bit)  
        .equ XDMAC_ID13_Shift, 13   @ bitWidth 1 (XDMAC Channel 13 Interrupt Disable Bit)  
        .equ XDMAC_ID14_Shift, 14   @ bitWidth 1 (XDMAC Channel 14 Interrupt Disable Bit)  
        .equ XDMAC_ID15_Shift, 15   @ bitWidth 1 (XDMAC Channel 15 Interrupt Disable Bit)  
        .equ XDMAC_ID16_Shift, 16   @ bitWidth 1 (XDMAC Channel 16 Interrupt Disable Bit)  
        .equ XDMAC_ID17_Shift, 17   @ bitWidth 1 (XDMAC Channel 17 Interrupt Disable Bit)  
        .equ XDMAC_ID18_Shift, 18   @ bitWidth 1 (XDMAC Channel 18 Interrupt Disable Bit)  
        .equ XDMAC_ID19_Shift, 19   @ bitWidth 1 (XDMAC Channel 19 Interrupt Disable Bit)  
        .equ XDMAC_ID20_Shift, 20   @ bitWidth 1 (XDMAC Channel 20 Interrupt Disable Bit)  
        .equ XDMAC_ID21_Shift, 21   @ bitWidth 1 (XDMAC Channel 21 Interrupt Disable Bit)  
        .equ XDMAC_ID22_Shift, 22   @ bitWidth 1 (XDMAC Channel 22 Interrupt Disable Bit)  
        .equ XDMAC_ID23_Shift, 23   @ bitWidth 1 (XDMAC Channel 23 Interrupt Disable Bit)  
 
    .equ XDMAC_GIM, XDMAC_BASE + 0x14 @ (Global Interrupt Mask Register) 
        .equ XDMAC_IM0_Shift, 0   @ bitWidth 1 (XDMAC Channel 0 Interrupt Mask Bit)  
        .equ XDMAC_IM1_Shift, 1   @ bitWidth 1 (XDMAC Channel 1 Interrupt Mask Bit)  
        .equ XDMAC_IM2_Shift, 2   @ bitWidth 1 (XDMAC Channel 2 Interrupt Mask Bit)  
        .equ XDMAC_IM3_Shift, 3   @ bitWidth 1 (XDMAC Channel 3 Interrupt Mask Bit)  
        .equ XDMAC_IM4_Shift, 4   @ bitWidth 1 (XDMAC Channel 4 Interrupt Mask Bit)  
        .equ XDMAC_IM5_Shift, 5   @ bitWidth 1 (XDMAC Channel 5 Interrupt Mask Bit)  
        .equ XDMAC_IM6_Shift, 6   @ bitWidth 1 (XDMAC Channel 6 Interrupt Mask Bit)  
        .equ XDMAC_IM7_Shift, 7   @ bitWidth 1 (XDMAC Channel 7 Interrupt Mask Bit)  
        .equ XDMAC_IM8_Shift, 8   @ bitWidth 1 (XDMAC Channel 8 Interrupt Mask Bit)  
        .equ XDMAC_IM9_Shift, 9   @ bitWidth 1 (XDMAC Channel 9 Interrupt Mask Bit)  
        .equ XDMAC_IM10_Shift, 10   @ bitWidth 1 (XDMAC Channel 10 Interrupt Mask Bit)  
        .equ XDMAC_IM11_Shift, 11   @ bitWidth 1 (XDMAC Channel 11 Interrupt Mask Bit)  
        .equ XDMAC_IM12_Shift, 12   @ bitWidth 1 (XDMAC Channel 12 Interrupt Mask Bit)  
        .equ XDMAC_IM13_Shift, 13   @ bitWidth 1 (XDMAC Channel 13 Interrupt Mask Bit)  
        .equ XDMAC_IM14_Shift, 14   @ bitWidth 1 (XDMAC Channel 14 Interrupt Mask Bit)  
        .equ XDMAC_IM15_Shift, 15   @ bitWidth 1 (XDMAC Channel 15 Interrupt Mask Bit)  
        .equ XDMAC_IM16_Shift, 16   @ bitWidth 1 (XDMAC Channel 16 Interrupt Mask Bit)  
        .equ XDMAC_IM17_Shift, 17   @ bitWidth 1 (XDMAC Channel 17 Interrupt Mask Bit)  
        .equ XDMAC_IM18_Shift, 18   @ bitWidth 1 (XDMAC Channel 18 Interrupt Mask Bit)  
        .equ XDMAC_IM19_Shift, 19   @ bitWidth 1 (XDMAC Channel 19 Interrupt Mask Bit)  
        .equ XDMAC_IM20_Shift, 20   @ bitWidth 1 (XDMAC Channel 20 Interrupt Mask Bit)  
        .equ XDMAC_IM21_Shift, 21   @ bitWidth 1 (XDMAC Channel 21 Interrupt Mask Bit)  
        .equ XDMAC_IM22_Shift, 22   @ bitWidth 1 (XDMAC Channel 22 Interrupt Mask Bit)  
        .equ XDMAC_IM23_Shift, 23   @ bitWidth 1 (XDMAC Channel 23 Interrupt Mask Bit)  
 
    .equ XDMAC_GIS, XDMAC_BASE + 0x18 @ (Global Interrupt Status Register) 
        .equ XDMAC_IS0_Shift, 0   @ bitWidth 1 (XDMAC Channel 0 Interrupt Status Bit)  
        .equ XDMAC_IS1_Shift, 1   @ bitWidth 1 (XDMAC Channel 1 Interrupt Status Bit)  
        .equ XDMAC_IS2_Shift, 2   @ bitWidth 1 (XDMAC Channel 2 Interrupt Status Bit)  
        .equ XDMAC_IS3_Shift, 3   @ bitWidth 1 (XDMAC Channel 3 Interrupt Status Bit)  
        .equ XDMAC_IS4_Shift, 4   @ bitWidth 1 (XDMAC Channel 4 Interrupt Status Bit)  
        .equ XDMAC_IS5_Shift, 5   @ bitWidth 1 (XDMAC Channel 5 Interrupt Status Bit)  
        .equ XDMAC_IS6_Shift, 6   @ bitWidth 1 (XDMAC Channel 6 Interrupt Status Bit)  
        .equ XDMAC_IS7_Shift, 7   @ bitWidth 1 (XDMAC Channel 7 Interrupt Status Bit)  
        .equ XDMAC_IS8_Shift, 8   @ bitWidth 1 (XDMAC Channel 8 Interrupt Status Bit)  
        .equ XDMAC_IS9_Shift, 9   @ bitWidth 1 (XDMAC Channel 9 Interrupt Status Bit)  
        .equ XDMAC_IS10_Shift, 10   @ bitWidth 1 (XDMAC Channel 10 Interrupt Status Bit)  
        .equ XDMAC_IS11_Shift, 11   @ bitWidth 1 (XDMAC Channel 11 Interrupt Status Bit)  
        .equ XDMAC_IS12_Shift, 12   @ bitWidth 1 (XDMAC Channel 12 Interrupt Status Bit)  
        .equ XDMAC_IS13_Shift, 13   @ bitWidth 1 (XDMAC Channel 13 Interrupt Status Bit)  
        .equ XDMAC_IS14_Shift, 14   @ bitWidth 1 (XDMAC Channel 14 Interrupt Status Bit)  
        .equ XDMAC_IS15_Shift, 15   @ bitWidth 1 (XDMAC Channel 15 Interrupt Status Bit)  
        .equ XDMAC_IS16_Shift, 16   @ bitWidth 1 (XDMAC Channel 16 Interrupt Status Bit)  
        .equ XDMAC_IS17_Shift, 17   @ bitWidth 1 (XDMAC Channel 17 Interrupt Status Bit)  
        .equ XDMAC_IS18_Shift, 18   @ bitWidth 1 (XDMAC Channel 18 Interrupt Status Bit)  
        .equ XDMAC_IS19_Shift, 19   @ bitWidth 1 (XDMAC Channel 19 Interrupt Status Bit)  
        .equ XDMAC_IS20_Shift, 20   @ bitWidth 1 (XDMAC Channel 20 Interrupt Status Bit)  
        .equ XDMAC_IS21_Shift, 21   @ bitWidth 1 (XDMAC Channel 21 Interrupt Status Bit)  
        .equ XDMAC_IS22_Shift, 22   @ bitWidth 1 (XDMAC Channel 22 Interrupt Status Bit)  
        .equ XDMAC_IS23_Shift, 23   @ bitWidth 1 (XDMAC Channel 23 Interrupt Status Bit)  
 
    .equ XDMAC_GE, XDMAC_BASE + 0x1C @ (Global Channel Enable Register) 
        .equ XDMAC_EN0_Shift, 0   @ bitWidth 1 (XDMAC Channel 0 Enable Bit)  
        .equ XDMAC_EN1_Shift, 1   @ bitWidth 1 (XDMAC Channel 1 Enable Bit)  
        .equ XDMAC_EN2_Shift, 2   @ bitWidth 1 (XDMAC Channel 2 Enable Bit)  
        .equ XDMAC_EN3_Shift, 3   @ bitWidth 1 (XDMAC Channel 3 Enable Bit)  
        .equ XDMAC_EN4_Shift, 4   @ bitWidth 1 (XDMAC Channel 4 Enable Bit)  
        .equ XDMAC_EN5_Shift, 5   @ bitWidth 1 (XDMAC Channel 5 Enable Bit)  
        .equ XDMAC_EN6_Shift, 6   @ bitWidth 1 (XDMAC Channel 6 Enable Bit)  
        .equ XDMAC_EN7_Shift, 7   @ bitWidth 1 (XDMAC Channel 7 Enable Bit)  
        .equ XDMAC_EN8_Shift, 8   @ bitWidth 1 (XDMAC Channel 8 Enable Bit)  
        .equ XDMAC_EN9_Shift, 9   @ bitWidth 1 (XDMAC Channel 9 Enable Bit)  
        .equ XDMAC_EN10_Shift, 10   @ bitWidth 1 (XDMAC Channel 10 Enable Bit)  
        .equ XDMAC_EN11_Shift, 11   @ bitWidth 1 (XDMAC Channel 11 Enable Bit)  
        .equ XDMAC_EN12_Shift, 12   @ bitWidth 1 (XDMAC Channel 12 Enable Bit)  
        .equ XDMAC_EN13_Shift, 13   @ bitWidth 1 (XDMAC Channel 13 Enable Bit)  
        .equ XDMAC_EN14_Shift, 14   @ bitWidth 1 (XDMAC Channel 14 Enable Bit)  
        .equ XDMAC_EN15_Shift, 15   @ bitWidth 1 (XDMAC Channel 15 Enable Bit)  
        .equ XDMAC_EN16_Shift, 16   @ bitWidth 1 (XDMAC Channel 16 Enable Bit)  
        .equ XDMAC_EN17_Shift, 17   @ bitWidth 1 (XDMAC Channel 17 Enable Bit)  
        .equ XDMAC_EN18_Shift, 18   @ bitWidth 1 (XDMAC Channel 18 Enable Bit)  
        .equ XDMAC_EN19_Shift, 19   @ bitWidth 1 (XDMAC Channel 19 Enable Bit)  
        .equ XDMAC_EN20_Shift, 20   @ bitWidth 1 (XDMAC Channel 20 Enable Bit)  
        .equ XDMAC_EN21_Shift, 21   @ bitWidth 1 (XDMAC Channel 21 Enable Bit)  
        .equ XDMAC_EN22_Shift, 22   @ bitWidth 1 (XDMAC Channel 22 Enable Bit)  
        .equ XDMAC_EN23_Shift, 23   @ bitWidth 1 (XDMAC Channel 23 Enable Bit)  
 
    .equ XDMAC_GD, XDMAC_BASE + 0x20 @ (Global Channel Disable Register) 
        .equ XDMAC_DI0_Shift, 0   @ bitWidth 1 (XDMAC Channel 0 Disable Bit)  
        .equ XDMAC_DI1_Shift, 1   @ bitWidth 1 (XDMAC Channel 1 Disable Bit)  
        .equ XDMAC_DI2_Shift, 2   @ bitWidth 1 (XDMAC Channel 2 Disable Bit)  
        .equ XDMAC_DI3_Shift, 3   @ bitWidth 1 (XDMAC Channel 3 Disable Bit)  
        .equ XDMAC_DI4_Shift, 4   @ bitWidth 1 (XDMAC Channel 4 Disable Bit)  
        .equ XDMAC_DI5_Shift, 5   @ bitWidth 1 (XDMAC Channel 5 Disable Bit)  
        .equ XDMAC_DI6_Shift, 6   @ bitWidth 1 (XDMAC Channel 6 Disable Bit)  
        .equ XDMAC_DI7_Shift, 7   @ bitWidth 1 (XDMAC Channel 7 Disable Bit)  
        .equ XDMAC_DI8_Shift, 8   @ bitWidth 1 (XDMAC Channel 8 Disable Bit)  
        .equ XDMAC_DI9_Shift, 9   @ bitWidth 1 (XDMAC Channel 9 Disable Bit)  
        .equ XDMAC_DI10_Shift, 10   @ bitWidth 1 (XDMAC Channel 10 Disable Bit)  
        .equ XDMAC_DI11_Shift, 11   @ bitWidth 1 (XDMAC Channel 11 Disable Bit)  
        .equ XDMAC_DI12_Shift, 12   @ bitWidth 1 (XDMAC Channel 12 Disable Bit)  
        .equ XDMAC_DI13_Shift, 13   @ bitWidth 1 (XDMAC Channel 13 Disable Bit)  
        .equ XDMAC_DI14_Shift, 14   @ bitWidth 1 (XDMAC Channel 14 Disable Bit)  
        .equ XDMAC_DI15_Shift, 15   @ bitWidth 1 (XDMAC Channel 15 Disable Bit)  
        .equ XDMAC_DI16_Shift, 16   @ bitWidth 1 (XDMAC Channel 16 Disable Bit)  
        .equ XDMAC_DI17_Shift, 17   @ bitWidth 1 (XDMAC Channel 17 Disable Bit)  
        .equ XDMAC_DI18_Shift, 18   @ bitWidth 1 (XDMAC Channel 18 Disable Bit)  
        .equ XDMAC_DI19_Shift, 19   @ bitWidth 1 (XDMAC Channel 19 Disable Bit)  
        .equ XDMAC_DI20_Shift, 20   @ bitWidth 1 (XDMAC Channel 20 Disable Bit)  
        .equ XDMAC_DI21_Shift, 21   @ bitWidth 1 (XDMAC Channel 21 Disable Bit)  
        .equ XDMAC_DI22_Shift, 22   @ bitWidth 1 (XDMAC Channel 22 Disable Bit)  
        .equ XDMAC_DI23_Shift, 23   @ bitWidth 1 (XDMAC Channel 23 Disable Bit)  
 
    .equ XDMAC_GS, XDMAC_BASE + 0x24 @ (Global Channel Status Register) 
        .equ XDMAC_ST0_Shift, 0   @ bitWidth 1 (XDMAC Channel 0 Status Bit)  
        .equ XDMAC_ST1_Shift, 1   @ bitWidth 1 (XDMAC Channel 1 Status Bit)  
        .equ XDMAC_ST2_Shift, 2   @ bitWidth 1 (XDMAC Channel 2 Status Bit)  
        .equ XDMAC_ST3_Shift, 3   @ bitWidth 1 (XDMAC Channel 3 Status Bit)  
        .equ XDMAC_ST4_Shift, 4   @ bitWidth 1 (XDMAC Channel 4 Status Bit)  
        .equ XDMAC_ST5_Shift, 5   @ bitWidth 1 (XDMAC Channel 5 Status Bit)  
        .equ XDMAC_ST6_Shift, 6   @ bitWidth 1 (XDMAC Channel 6 Status Bit)  
        .equ XDMAC_ST7_Shift, 7   @ bitWidth 1 (XDMAC Channel 7 Status Bit)  
        .equ XDMAC_ST8_Shift, 8   @ bitWidth 1 (XDMAC Channel 8 Status Bit)  
        .equ XDMAC_ST9_Shift, 9   @ bitWidth 1 (XDMAC Channel 9 Status Bit)  
        .equ XDMAC_ST10_Shift, 10   @ bitWidth 1 (XDMAC Channel 10 Status Bit)  
        .equ XDMAC_ST11_Shift, 11   @ bitWidth 1 (XDMAC Channel 11 Status Bit)  
        .equ XDMAC_ST12_Shift, 12   @ bitWidth 1 (XDMAC Channel 12 Status Bit)  
        .equ XDMAC_ST13_Shift, 13   @ bitWidth 1 (XDMAC Channel 13 Status Bit)  
        .equ XDMAC_ST14_Shift, 14   @ bitWidth 1 (XDMAC Channel 14 Status Bit)  
        .equ XDMAC_ST15_Shift, 15   @ bitWidth 1 (XDMAC Channel 15 Status Bit)  
        .equ XDMAC_ST16_Shift, 16   @ bitWidth 1 (XDMAC Channel 16 Status Bit)  
        .equ XDMAC_ST17_Shift, 17   @ bitWidth 1 (XDMAC Channel 17 Status Bit)  
        .equ XDMAC_ST18_Shift, 18   @ bitWidth 1 (XDMAC Channel 18 Status Bit)  
        .equ XDMAC_ST19_Shift, 19   @ bitWidth 1 (XDMAC Channel 19 Status Bit)  
        .equ XDMAC_ST20_Shift, 20   @ bitWidth 1 (XDMAC Channel 20 Status Bit)  
        .equ XDMAC_ST21_Shift, 21   @ bitWidth 1 (XDMAC Channel 21 Status Bit)  
        .equ XDMAC_ST22_Shift, 22   @ bitWidth 1 (XDMAC Channel 22 Status Bit)  
        .equ XDMAC_ST23_Shift, 23   @ bitWidth 1 (XDMAC Channel 23 Status Bit)  
 
    .equ XDMAC_GRS, XDMAC_BASE + 0x28 @ (Global Channel Read Suspend Register) 
        .equ XDMAC_RS0_Shift, 0   @ bitWidth 1 (XDMAC Channel 0 Read Suspend Bit)  
        .equ XDMAC_RS1_Shift, 1   @ bitWidth 1 (XDMAC Channel 1 Read Suspend Bit)  
        .equ XDMAC_RS2_Shift, 2   @ bitWidth 1 (XDMAC Channel 2 Read Suspend Bit)  
        .equ XDMAC_RS3_Shift, 3   @ bitWidth 1 (XDMAC Channel 3 Read Suspend Bit)  
        .equ XDMAC_RS4_Shift, 4   @ bitWidth 1 (XDMAC Channel 4 Read Suspend Bit)  
        .equ XDMAC_RS5_Shift, 5   @ bitWidth 1 (XDMAC Channel 5 Read Suspend Bit)  
        .equ XDMAC_RS6_Shift, 6   @ bitWidth 1 (XDMAC Channel 6 Read Suspend Bit)  
        .equ XDMAC_RS7_Shift, 7   @ bitWidth 1 (XDMAC Channel 7 Read Suspend Bit)  
        .equ XDMAC_RS8_Shift, 8   @ bitWidth 1 (XDMAC Channel 8 Read Suspend Bit)  
        .equ XDMAC_RS9_Shift, 9   @ bitWidth 1 (XDMAC Channel 9 Read Suspend Bit)  
        .equ XDMAC_RS10_Shift, 10   @ bitWidth 1 (XDMAC Channel 10 Read Suspend Bit)  
        .equ XDMAC_RS11_Shift, 11   @ bitWidth 1 (XDMAC Channel 11 Read Suspend Bit)  
        .equ XDMAC_RS12_Shift, 12   @ bitWidth 1 (XDMAC Channel 12 Read Suspend Bit)  
        .equ XDMAC_RS13_Shift, 13   @ bitWidth 1 (XDMAC Channel 13 Read Suspend Bit)  
        .equ XDMAC_RS14_Shift, 14   @ bitWidth 1 (XDMAC Channel 14 Read Suspend Bit)  
        .equ XDMAC_RS15_Shift, 15   @ bitWidth 1 (XDMAC Channel 15 Read Suspend Bit)  
        .equ XDMAC_RS16_Shift, 16   @ bitWidth 1 (XDMAC Channel 16 Read Suspend Bit)  
        .equ XDMAC_RS17_Shift, 17   @ bitWidth 1 (XDMAC Channel 17 Read Suspend Bit)  
        .equ XDMAC_RS18_Shift, 18   @ bitWidth 1 (XDMAC Channel 18 Read Suspend Bit)  
        .equ XDMAC_RS19_Shift, 19   @ bitWidth 1 (XDMAC Channel 19 Read Suspend Bit)  
        .equ XDMAC_RS20_Shift, 20   @ bitWidth 1 (XDMAC Channel 20 Read Suspend Bit)  
        .equ XDMAC_RS21_Shift, 21   @ bitWidth 1 (XDMAC Channel 21 Read Suspend Bit)  
        .equ XDMAC_RS22_Shift, 22   @ bitWidth 1 (XDMAC Channel 22 Read Suspend Bit)  
        .equ XDMAC_RS23_Shift, 23   @ bitWidth 1 (XDMAC Channel 23 Read Suspend Bit)  
 
    .equ XDMAC_GWS, XDMAC_BASE + 0x2C @ (Global Channel Write Suspend Register) 
        .equ XDMAC_WS0_Shift, 0   @ bitWidth 1 (XDMAC Channel 0 Write Suspend Bit)  
        .equ XDMAC_WS1_Shift, 1   @ bitWidth 1 (XDMAC Channel 1 Write Suspend Bit)  
        .equ XDMAC_WS2_Shift, 2   @ bitWidth 1 (XDMAC Channel 2 Write Suspend Bit)  
        .equ XDMAC_WS3_Shift, 3   @ bitWidth 1 (XDMAC Channel 3 Write Suspend Bit)  
        .equ XDMAC_WS4_Shift, 4   @ bitWidth 1 (XDMAC Channel 4 Write Suspend Bit)  
        .equ XDMAC_WS5_Shift, 5   @ bitWidth 1 (XDMAC Channel 5 Write Suspend Bit)  
        .equ XDMAC_WS6_Shift, 6   @ bitWidth 1 (XDMAC Channel 6 Write Suspend Bit)  
        .equ XDMAC_WS7_Shift, 7   @ bitWidth 1 (XDMAC Channel 7 Write Suspend Bit)  
        .equ XDMAC_WS8_Shift, 8   @ bitWidth 1 (XDMAC Channel 8 Write Suspend Bit)  
        .equ XDMAC_WS9_Shift, 9   @ bitWidth 1 (XDMAC Channel 9 Write Suspend Bit)  
        .equ XDMAC_WS10_Shift, 10   @ bitWidth 1 (XDMAC Channel 10 Write Suspend Bit)  
        .equ XDMAC_WS11_Shift, 11   @ bitWidth 1 (XDMAC Channel 11 Write Suspend Bit)  
        .equ XDMAC_WS12_Shift, 12   @ bitWidth 1 (XDMAC Channel 12 Write Suspend Bit)  
        .equ XDMAC_WS13_Shift, 13   @ bitWidth 1 (XDMAC Channel 13 Write Suspend Bit)  
        .equ XDMAC_WS14_Shift, 14   @ bitWidth 1 (XDMAC Channel 14 Write Suspend Bit)  
        .equ XDMAC_WS15_Shift, 15   @ bitWidth 1 (XDMAC Channel 15 Write Suspend Bit)  
        .equ XDMAC_WS16_Shift, 16   @ bitWidth 1 (XDMAC Channel 16 Write Suspend Bit)  
        .equ XDMAC_WS17_Shift, 17   @ bitWidth 1 (XDMAC Channel 17 Write Suspend Bit)  
        .equ XDMAC_WS18_Shift, 18   @ bitWidth 1 (XDMAC Channel 18 Write Suspend Bit)  
        .equ XDMAC_WS19_Shift, 19   @ bitWidth 1 (XDMAC Channel 19 Write Suspend Bit)  
        .equ XDMAC_WS20_Shift, 20   @ bitWidth 1 (XDMAC Channel 20 Write Suspend Bit)  
        .equ XDMAC_WS21_Shift, 21   @ bitWidth 1 (XDMAC Channel 21 Write Suspend Bit)  
        .equ XDMAC_WS22_Shift, 22   @ bitWidth 1 (XDMAC Channel 22 Write Suspend Bit)  
        .equ XDMAC_WS23_Shift, 23   @ bitWidth 1 (XDMAC Channel 23 Write Suspend Bit)  
 
    .equ XDMAC_GRWS, XDMAC_BASE + 0x30 @ (Global Channel Read Write Suspend Register) 
        .equ XDMAC_RWS0_Shift, 0   @ bitWidth 1 (XDMAC Channel 0 Read Write Suspend Bit)  
        .equ XDMAC_RWS1_Shift, 1   @ bitWidth 1 (XDMAC Channel 1 Read Write Suspend Bit)  
        .equ XDMAC_RWS2_Shift, 2   @ bitWidth 1 (XDMAC Channel 2 Read Write Suspend Bit)  
        .equ XDMAC_RWS3_Shift, 3   @ bitWidth 1 (XDMAC Channel 3 Read Write Suspend Bit)  
        .equ XDMAC_RWS4_Shift, 4   @ bitWidth 1 (XDMAC Channel 4 Read Write Suspend Bit)  
        .equ XDMAC_RWS5_Shift, 5   @ bitWidth 1 (XDMAC Channel 5 Read Write Suspend Bit)  
        .equ XDMAC_RWS6_Shift, 6   @ bitWidth 1 (XDMAC Channel 6 Read Write Suspend Bit)  
        .equ XDMAC_RWS7_Shift, 7   @ bitWidth 1 (XDMAC Channel 7 Read Write Suspend Bit)  
        .equ XDMAC_RWS8_Shift, 8   @ bitWidth 1 (XDMAC Channel 8 Read Write Suspend Bit)  
        .equ XDMAC_RWS9_Shift, 9   @ bitWidth 1 (XDMAC Channel 9 Read Write Suspend Bit)  
        .equ XDMAC_RWS10_Shift, 10   @ bitWidth 1 (XDMAC Channel 10 Read Write Suspend Bit)  
        .equ XDMAC_RWS11_Shift, 11   @ bitWidth 1 (XDMAC Channel 11 Read Write Suspend Bit)  
        .equ XDMAC_RWS12_Shift, 12   @ bitWidth 1 (XDMAC Channel 12 Read Write Suspend Bit)  
        .equ XDMAC_RWS13_Shift, 13   @ bitWidth 1 (XDMAC Channel 13 Read Write Suspend Bit)  
        .equ XDMAC_RWS14_Shift, 14   @ bitWidth 1 (XDMAC Channel 14 Read Write Suspend Bit)  
        .equ XDMAC_RWS15_Shift, 15   @ bitWidth 1 (XDMAC Channel 15 Read Write Suspend Bit)  
        .equ XDMAC_RWS16_Shift, 16   @ bitWidth 1 (XDMAC Channel 16 Read Write Suspend Bit)  
        .equ XDMAC_RWS17_Shift, 17   @ bitWidth 1 (XDMAC Channel 17 Read Write Suspend Bit)  
        .equ XDMAC_RWS18_Shift, 18   @ bitWidth 1 (XDMAC Channel 18 Read Write Suspend Bit)  
        .equ XDMAC_RWS19_Shift, 19   @ bitWidth 1 (XDMAC Channel 19 Read Write Suspend Bit)  
        .equ XDMAC_RWS20_Shift, 20   @ bitWidth 1 (XDMAC Channel 20 Read Write Suspend Bit)  
        .equ XDMAC_RWS21_Shift, 21   @ bitWidth 1 (XDMAC Channel 21 Read Write Suspend Bit)  
        .equ XDMAC_RWS22_Shift, 22   @ bitWidth 1 (XDMAC Channel 22 Read Write Suspend Bit)  
        .equ XDMAC_RWS23_Shift, 23   @ bitWidth 1 (XDMAC Channel 23 Read Write Suspend Bit)  
 
    .equ XDMAC_GRWR, XDMAC_BASE + 0x34 @ (Global Channel Read Write Resume Register) 
        .equ XDMAC_RWR0_Shift, 0   @ bitWidth 1 (XDMAC Channel 0 Read Write Resume Bit)  
        .equ XDMAC_RWR1_Shift, 1   @ bitWidth 1 (XDMAC Channel 1 Read Write Resume Bit)  
        .equ XDMAC_RWR2_Shift, 2   @ bitWidth 1 (XDMAC Channel 2 Read Write Resume Bit)  
        .equ XDMAC_RWR3_Shift, 3   @ bitWidth 1 (XDMAC Channel 3 Read Write Resume Bit)  
        .equ XDMAC_RWR4_Shift, 4   @ bitWidth 1 (XDMAC Channel 4 Read Write Resume Bit)  
        .equ XDMAC_RWR5_Shift, 5   @ bitWidth 1 (XDMAC Channel 5 Read Write Resume Bit)  
        .equ XDMAC_RWR6_Shift, 6   @ bitWidth 1 (XDMAC Channel 6 Read Write Resume Bit)  
        .equ XDMAC_RWR7_Shift, 7   @ bitWidth 1 (XDMAC Channel 7 Read Write Resume Bit)  
        .equ XDMAC_RWR8_Shift, 8   @ bitWidth 1 (XDMAC Channel 8 Read Write Resume Bit)  
        .equ XDMAC_RWR9_Shift, 9   @ bitWidth 1 (XDMAC Channel 9 Read Write Resume Bit)  
        .equ XDMAC_RWR10_Shift, 10   @ bitWidth 1 (XDMAC Channel 10 Read Write Resume Bit)  
        .equ XDMAC_RWR11_Shift, 11   @ bitWidth 1 (XDMAC Channel 11 Read Write Resume Bit)  
        .equ XDMAC_RWR12_Shift, 12   @ bitWidth 1 (XDMAC Channel 12 Read Write Resume Bit)  
        .equ XDMAC_RWR13_Shift, 13   @ bitWidth 1 (XDMAC Channel 13 Read Write Resume Bit)  
        .equ XDMAC_RWR14_Shift, 14   @ bitWidth 1 (XDMAC Channel 14 Read Write Resume Bit)  
        .equ XDMAC_RWR15_Shift, 15   @ bitWidth 1 (XDMAC Channel 15 Read Write Resume Bit)  
        .equ XDMAC_RWR16_Shift, 16   @ bitWidth 1 (XDMAC Channel 16 Read Write Resume Bit)  
        .equ XDMAC_RWR17_Shift, 17   @ bitWidth 1 (XDMAC Channel 17 Read Write Resume Bit)  
        .equ XDMAC_RWR18_Shift, 18   @ bitWidth 1 (XDMAC Channel 18 Read Write Resume Bit)  
        .equ XDMAC_RWR19_Shift, 19   @ bitWidth 1 (XDMAC Channel 19 Read Write Resume Bit)  
        .equ XDMAC_RWR20_Shift, 20   @ bitWidth 1 (XDMAC Channel 20 Read Write Resume Bit)  
        .equ XDMAC_RWR21_Shift, 21   @ bitWidth 1 (XDMAC Channel 21 Read Write Resume Bit)  
        .equ XDMAC_RWR22_Shift, 22   @ bitWidth 1 (XDMAC Channel 22 Read Write Resume Bit)  
        .equ XDMAC_RWR23_Shift, 23   @ bitWidth 1 (XDMAC Channel 23 Read Write Resume Bit)  
 
    .equ XDMAC_GSWR, XDMAC_BASE + 0x38 @ (Global Channel Software Request Register) 
        .equ XDMAC_SWREQ0_Shift, 0   @ bitWidth 1 (XDMAC Channel 0 Software Request Bit)  
        .equ XDMAC_SWREQ1_Shift, 1   @ bitWidth 1 (XDMAC Channel 1 Software Request Bit)  
        .equ XDMAC_SWREQ2_Shift, 2   @ bitWidth 1 (XDMAC Channel 2 Software Request Bit)  
        .equ XDMAC_SWREQ3_Shift, 3   @ bitWidth 1 (XDMAC Channel 3 Software Request Bit)  
        .equ XDMAC_SWREQ4_Shift, 4   @ bitWidth 1 (XDMAC Channel 4 Software Request Bit)  
        .equ XDMAC_SWREQ5_Shift, 5   @ bitWidth 1 (XDMAC Channel 5 Software Request Bit)  
        .equ XDMAC_SWREQ6_Shift, 6   @ bitWidth 1 (XDMAC Channel 6 Software Request Bit)  
        .equ XDMAC_SWREQ7_Shift, 7   @ bitWidth 1 (XDMAC Channel 7 Software Request Bit)  
        .equ XDMAC_SWREQ8_Shift, 8   @ bitWidth 1 (XDMAC Channel 8 Software Request Bit)  
        .equ XDMAC_SWREQ9_Shift, 9   @ bitWidth 1 (XDMAC Channel 9 Software Request Bit)  
        .equ XDMAC_SWREQ10_Shift, 10   @ bitWidth 1 (XDMAC Channel 10 Software Request Bit)  
        .equ XDMAC_SWREQ11_Shift, 11   @ bitWidth 1 (XDMAC Channel 11 Software Request Bit)  
        .equ XDMAC_SWREQ12_Shift, 12   @ bitWidth 1 (XDMAC Channel 12 Software Request Bit)  
        .equ XDMAC_SWREQ13_Shift, 13   @ bitWidth 1 (XDMAC Channel 13 Software Request Bit)  
        .equ XDMAC_SWREQ14_Shift, 14   @ bitWidth 1 (XDMAC Channel 14 Software Request Bit)  
        .equ XDMAC_SWREQ15_Shift, 15   @ bitWidth 1 (XDMAC Channel 15 Software Request Bit)  
        .equ XDMAC_SWREQ16_Shift, 16   @ bitWidth 1 (XDMAC Channel 16 Software Request Bit)  
        .equ XDMAC_SWREQ17_Shift, 17   @ bitWidth 1 (XDMAC Channel 17 Software Request Bit)  
        .equ XDMAC_SWREQ18_Shift, 18   @ bitWidth 1 (XDMAC Channel 18 Software Request Bit)  
        .equ XDMAC_SWREQ19_Shift, 19   @ bitWidth 1 (XDMAC Channel 19 Software Request Bit)  
        .equ XDMAC_SWREQ20_Shift, 20   @ bitWidth 1 (XDMAC Channel 20 Software Request Bit)  
        .equ XDMAC_SWREQ21_Shift, 21   @ bitWidth 1 (XDMAC Channel 21 Software Request Bit)  
        .equ XDMAC_SWREQ22_Shift, 22   @ bitWidth 1 (XDMAC Channel 22 Software Request Bit)  
        .equ XDMAC_SWREQ23_Shift, 23   @ bitWidth 1 (XDMAC Channel 23 Software Request Bit)  
 
    .equ XDMAC_GSWS, XDMAC_BASE + 0x3C @ (Global Channel Software Request Status Register) 
        .equ XDMAC_SWRS0_Shift, 0   @ bitWidth 1 (XDMAC Channel 0 Software Request Status Bit)  
        .equ XDMAC_SWRS1_Shift, 1   @ bitWidth 1 (XDMAC Channel 1 Software Request Status Bit)  
        .equ XDMAC_SWRS2_Shift, 2   @ bitWidth 1 (XDMAC Channel 2 Software Request Status Bit)  
        .equ XDMAC_SWRS3_Shift, 3   @ bitWidth 1 (XDMAC Channel 3 Software Request Status Bit)  
        .equ XDMAC_SWRS4_Shift, 4   @ bitWidth 1 (XDMAC Channel 4 Software Request Status Bit)  
        .equ XDMAC_SWRS5_Shift, 5   @ bitWidth 1 (XDMAC Channel 5 Software Request Status Bit)  
        .equ XDMAC_SWRS6_Shift, 6   @ bitWidth 1 (XDMAC Channel 6 Software Request Status Bit)  
        .equ XDMAC_SWRS7_Shift, 7   @ bitWidth 1 (XDMAC Channel 7 Software Request Status Bit)  
        .equ XDMAC_SWRS8_Shift, 8   @ bitWidth 1 (XDMAC Channel 8 Software Request Status Bit)  
        .equ XDMAC_SWRS9_Shift, 9   @ bitWidth 1 (XDMAC Channel 9 Software Request Status Bit)  
        .equ XDMAC_SWRS10_Shift, 10   @ bitWidth 1 (XDMAC Channel 10 Software Request Status Bit)  
        .equ XDMAC_SWRS11_Shift, 11   @ bitWidth 1 (XDMAC Channel 11 Software Request Status Bit)  
        .equ XDMAC_SWRS12_Shift, 12   @ bitWidth 1 (XDMAC Channel 12 Software Request Status Bit)  
        .equ XDMAC_SWRS13_Shift, 13   @ bitWidth 1 (XDMAC Channel 13 Software Request Status Bit)  
        .equ XDMAC_SWRS14_Shift, 14   @ bitWidth 1 (XDMAC Channel 14 Software Request Status Bit)  
        .equ XDMAC_SWRS15_Shift, 15   @ bitWidth 1 (XDMAC Channel 15 Software Request Status Bit)  
        .equ XDMAC_SWRS16_Shift, 16   @ bitWidth 1 (XDMAC Channel 16 Software Request Status Bit)  
        .equ XDMAC_SWRS17_Shift, 17   @ bitWidth 1 (XDMAC Channel 17 Software Request Status Bit)  
        .equ XDMAC_SWRS18_Shift, 18   @ bitWidth 1 (XDMAC Channel 18 Software Request Status Bit)  
        .equ XDMAC_SWRS19_Shift, 19   @ bitWidth 1 (XDMAC Channel 19 Software Request Status Bit)  
        .equ XDMAC_SWRS20_Shift, 20   @ bitWidth 1 (XDMAC Channel 20 Software Request Status Bit)  
        .equ XDMAC_SWRS21_Shift, 21   @ bitWidth 1 (XDMAC Channel 21 Software Request Status Bit)  
        .equ XDMAC_SWRS22_Shift, 22   @ bitWidth 1 (XDMAC Channel 22 Software Request Status Bit)  
        .equ XDMAC_SWRS23_Shift, 23   @ bitWidth 1 (XDMAC Channel 23 Software Request Status Bit)  
 
    .equ XDMAC_GSWF, XDMAC_BASE + 0x40 @ (Global Channel Software Flush Request Register) 
        .equ XDMAC_SWF0_Shift, 0   @ bitWidth 1 (XDMAC Channel 0 Software Flush Request Bit)  
        .equ XDMAC_SWF1_Shift, 1   @ bitWidth 1 (XDMAC Channel 1 Software Flush Request Bit)  
        .equ XDMAC_SWF2_Shift, 2   @ bitWidth 1 (XDMAC Channel 2 Software Flush Request Bit)  
        .equ XDMAC_SWF3_Shift, 3   @ bitWidth 1 (XDMAC Channel 3 Software Flush Request Bit)  
        .equ XDMAC_SWF4_Shift, 4   @ bitWidth 1 (XDMAC Channel 4 Software Flush Request Bit)  
        .equ XDMAC_SWF5_Shift, 5   @ bitWidth 1 (XDMAC Channel 5 Software Flush Request Bit)  
        .equ XDMAC_SWF6_Shift, 6   @ bitWidth 1 (XDMAC Channel 6 Software Flush Request Bit)  
        .equ XDMAC_SWF7_Shift, 7   @ bitWidth 1 (XDMAC Channel 7 Software Flush Request Bit)  
        .equ XDMAC_SWF8_Shift, 8   @ bitWidth 1 (XDMAC Channel 8 Software Flush Request Bit)  
        .equ XDMAC_SWF9_Shift, 9   @ bitWidth 1 (XDMAC Channel 9 Software Flush Request Bit)  
        .equ XDMAC_SWF10_Shift, 10   @ bitWidth 1 (XDMAC Channel 10 Software Flush Request Bit)  
        .equ XDMAC_SWF11_Shift, 11   @ bitWidth 1 (XDMAC Channel 11 Software Flush Request Bit)  
        .equ XDMAC_SWF12_Shift, 12   @ bitWidth 1 (XDMAC Channel 12 Software Flush Request Bit)  
        .equ XDMAC_SWF13_Shift, 13   @ bitWidth 1 (XDMAC Channel 13 Software Flush Request Bit)  
        .equ XDMAC_SWF14_Shift, 14   @ bitWidth 1 (XDMAC Channel 14 Software Flush Request Bit)  
        .equ XDMAC_SWF15_Shift, 15   @ bitWidth 1 (XDMAC Channel 15 Software Flush Request Bit)  
        .equ XDMAC_SWF16_Shift, 16   @ bitWidth 1 (XDMAC Channel 16 Software Flush Request Bit)  
        .equ XDMAC_SWF17_Shift, 17   @ bitWidth 1 (XDMAC Channel 17 Software Flush Request Bit)  
        .equ XDMAC_SWF18_Shift, 18   @ bitWidth 1 (XDMAC Channel 18 Software Flush Request Bit)  
        .equ XDMAC_SWF19_Shift, 19   @ bitWidth 1 (XDMAC Channel 19 Software Flush Request Bit)  
        .equ XDMAC_SWF20_Shift, 20   @ bitWidth 1 (XDMAC Channel 20 Software Flush Request Bit)  
        .equ XDMAC_SWF21_Shift, 21   @ bitWidth 1 (XDMAC Channel 21 Software Flush Request Bit)  
        .equ XDMAC_SWF22_Shift, 22   @ bitWidth 1 (XDMAC Channel 22 Software Flush Request Bit)  
        .equ XDMAC_SWF23_Shift, 23   @ bitWidth 1 (XDMAC Channel 23 Software Flush Request Bit)  
 

@=========================== LOCKBIT ===========================@
.equ LOCKBIT_BASE, 0 @ () 
    .equ LOCKBIT_WORD0, LOCKBIT_BASE + 0x0 @ (Lock Bits Word 0) 
        .equ LOCKBIT_LOCK_REGION_0_Shift, 0   @ bitWidth 1 (Lock Region 0)  
        .equ LOCKBIT_LOCK_REGION_1_Shift, 1   @ bitWidth 1 (Lock Region 1)  
        .equ LOCKBIT_LOCK_REGION_2_Shift, 2   @ bitWidth 1 (Lock Region 2)  
        .equ LOCKBIT_LOCK_REGION_3_Shift, 3   @ bitWidth 1 (Lock Region 3)  
        .equ LOCKBIT_LOCK_REGION_4_Shift, 4   @ bitWidth 1 (Lock Region 4)  
        .equ LOCKBIT_LOCK_REGION_5_Shift, 5   @ bitWidth 1 (Lock Region 5)  
        .equ LOCKBIT_LOCK_REGION_6_Shift, 6   @ bitWidth 1 (Lock Region 6)  
        .equ LOCKBIT_LOCK_REGION_7_Shift, 7   @ bitWidth 1 (Lock Region 7)  
        .equ LOCKBIT_LOCK_REGION_8_Shift, 8   @ bitWidth 1 (Lock Region 8)  
        .equ LOCKBIT_LOCK_REGION_9_Shift, 9   @ bitWidth 1 (Lock Region 9)  
        .equ LOCKBIT_LOCK_REGION_10_Shift, 10   @ bitWidth 1 (Lock Region 10)  
        .equ LOCKBIT_LOCK_REGION_11_Shift, 11   @ bitWidth 1 (Lock Region 11)  
        .equ LOCKBIT_LOCK_REGION_12_Shift, 12   @ bitWidth 1 (Lock Region 12)  
        .equ LOCKBIT_LOCK_REGION_13_Shift, 13   @ bitWidth 1 (Lock Region 13)  
        .equ LOCKBIT_LOCK_REGION_14_Shift, 14   @ bitWidth 1 (Lock Region 14)  
        .equ LOCKBIT_LOCK_REGION_15_Shift, 15   @ bitWidth 1 (Lock Region 15)  
        .equ LOCKBIT_LOCK_REGION_16_Shift, 16   @ bitWidth 1 (Lock Region 16)  
        .equ LOCKBIT_LOCK_REGION_17_Shift, 17   @ bitWidth 1 (Lock Region 17)  
        .equ LOCKBIT_LOCK_REGION_18_Shift, 18   @ bitWidth 1 (Lock Region 18)  
        .equ LOCKBIT_LOCK_REGION_19_Shift, 19   @ bitWidth 1 (Lock Region 19)  
        .equ LOCKBIT_LOCK_REGION_20_Shift, 20   @ bitWidth 1 (Lock Region 20)  
        .equ LOCKBIT_LOCK_REGION_21_Shift, 21   @ bitWidth 1 (Lock Region 21)  
        .equ LOCKBIT_LOCK_REGION_22_Shift, 22   @ bitWidth 1 (Lock Region 22)  
        .equ LOCKBIT_LOCK_REGION_23_Shift, 23   @ bitWidth 1 (Lock Region 23)  
        .equ LOCKBIT_LOCK_REGION_24_Shift, 24   @ bitWidth 1 (Lock Region 24)  
        .equ LOCKBIT_LOCK_REGION_25_Shift, 25   @ bitWidth 1 (Lock Region 25)  
        .equ LOCKBIT_LOCK_REGION_26_Shift, 26   @ bitWidth 1 (Lock Region 26)  
        .equ LOCKBIT_LOCK_REGION_27_Shift, 27   @ bitWidth 1 (Lock Region 27)  
        .equ LOCKBIT_LOCK_REGION_28_Shift, 28   @ bitWidth 1 (Lock Region 28)  
        .equ LOCKBIT_LOCK_REGION_29_Shift, 29   @ bitWidth 1 (Lock Region 29)  
        .equ LOCKBIT_LOCK_REGION_30_Shift, 30   @ bitWidth 1 (Lock Region 30)  
        .equ LOCKBIT_LOCK_REGION_31_Shift, 31   @ bitWidth 1 (Lock Region 31)  
 

@=========================== SCnSCB ===========================@
.equ SCnSCB_BASE, 0xE000E000 @ (System control not in SCB) 
    .equ SCnSCB_ICTR, SCnSCB_BASE + 0x00000004 @ (Interrupt Controller Type Register) 
        .equ SCnSCB_INTLINESNUM_Shift, 0   @ bitWidth 4 (Total number of interrupt lines supported by an implementation, defined in groups of 32)  
 
    .equ SCnSCB_ACTLR, SCnSCB_BASE + 0x00000008 @ (Auxiliary Control Register) 
        .equ SCnSCB_DISFOLD_Shift, 2   @ bitWidth 1 (Disables folding of IT instructions)  
        .equ SCnSCB_FPEXCODIS_Shift, 10   @ bitWidth 1 (Disables FPU exception outputs)  
        .equ SCnSCB_DISRAMODE_Shift, 11   @ bitWidth 1 (Disables dynamic read allocate mode for Write-Back Write-Allocate memory regions)  
        .equ SCnSCB_DISITMATBFLUSH_Shift, 12   @ bitWidth 1 (Disables ITM and DWT ATB flush)  
        .equ SCnSCB_DISBTACREAD_Shift, 13   @ bitWidth 1 ()  
        .equ SCnSCB_DISBTACALLOC_Shift, 14   @ bitWidth 1 ()  
        .equ SCnSCB_DISCRITAXIRUR_Shift, 15   @ bitWidth 1 ()  
        .equ SCnSCB_DISDI_Shift, 16   @ bitWidth 5 ()  
        .equ SCnSCB_DISISSCH1_Shift, 21   @ bitWidth 5 ()  
        .equ SCnSCB_DISDYNADD_Shift, 26   @ bitWidth 1 (Disables dynamic allocation of ADD and SUB instructions)  
        .equ SCnSCB_DISCRITAXIRUW_Shift, 27   @ bitWidth 1 (Disable critical AXI read-under-write)  
        .equ SCnSCB_DISFPUISSOPT_Shift, 28   @ bitWidth 1 (Disables dynamic allocation of ADD and SUB instructions)  
 

@=========================== SCB ===========================@
.equ SCB_BASE, 0xE000ED00 @ (System Control Block) 
    .equ SCB_CPUID, SCB_BASE + 0x00000000 @ (CPUID Base Register) 
        .equ SCB_REVISION_Shift, 0   @ bitWidth 4 (Indicates patch release: 0x0 = Patch 0)  
        .equ SCB_PARTNO_Shift, 4   @ bitWidth 12 (Indicates part number)  
        .equ SCB_ARCHITECTURE_Shift, 16   @ bitWidth 4 (Indicates architecture. Reads as 0xF)  
        .equ SCB_VARIANT_Shift, 20   @ bitWidth 4 (Indicates processor revision: 0x2 = Revision 2)  
        .equ SCB_IMPLEMENTER_Shift, 24   @ bitWidth 8 (Implementer code)  
 
    .equ SCB_ICSR, SCB_BASE + 0x00000004 @ (Interrupt Control and State Register) 
        .equ SCB_VECTACTIVE_Shift, 0   @ bitWidth 9 (Active exception number)  
        .equ SCB_RETTOBASE_Shift, 11   @ bitWidth 1 (Indicates whether there is an active exception other than the exception indicated by the current value of the IPSR)  
        .equ SCB_VECTPENDING_Shift, 12   @ bitWidth 6 (Exception number of the highest priority pending enabled exception)  
        .equ SCB_ISRPENDING_Shift, 22   @ bitWidth 1 (Is external interrupt, generated by the NVIC, pending)  
        .equ SCB_ISRPREEMPT_Shift, 23   @ bitWidth 1 (Indicates whether a pending exception will be serviced on exit from debug halt state)  
        .equ SCB_PENDSTCLR_Shift, 25   @ bitWidth 1 (Removes the pending status of the SysTick exception)  
        .equ SCB_PENDSTSET_Shift, 26   @ bitWidth 1 (Sets the SysTick exception as pending, or reads the current state of the exception)  
        .equ SCB_PENDSVCLR_Shift, 27   @ bitWidth 1 (Removes the pending status of the PendSV exception)  
        .equ SCB_PENDSVSET_Shift, 28   @ bitWidth 1 (Sets the PendSV exception as pending, or reads the current state of the exception)  
        .equ SCB_NMIPENDSET_Shift, 31   @ bitWidth 1 (Makes the NMI exception active, or reads the state of the exception)  
 
    .equ SCB_VTOR, SCB_BASE + 0x00000008 @ (Vector Table Offset Register) 
        .equ SCB_TBLOFF_Shift, 7   @ bitWidth 25 (Bits[31:7] of the vector table address)  
 
    .equ SCB_AIRCR, SCB_BASE + 0x0000000c @ (Application Interrupt and Reset Control Register) 
        .equ SCB_VECTRESET_Shift, 0   @ bitWidth 1 (Writing 1 to this bit causes a local system reset)  
        .equ SCB_VECTCLRACTIVE_Shift, 1   @ bitWidth 1 (Clears all active state information for fixed and configurable exceptions)  
        .equ SCB_SYSRESETREQ_Shift, 2   @ bitWidth 1 (System Reset Request)  
        .equ SCB_PRIGROUP_Shift, 8   @ bitWidth 3 (Interrupt priority grouping field. This field determines the split of group priority from subpriority.)  
        .equ SCB_ENDIANNESS_Shift, 15   @ bitWidth 1 (Memory system endianness)  
        .equ SCB_VECTKEY_Shift, 16   @ bitWidth 16 (Vector key)  
 
    .equ SCB_SCR, SCB_BASE + 0x00000010 @ (System Control Register) 
        .equ SCB_SLEEPONEXIT_Shift, 1   @ bitWidth 1 (Determines whether, on an exit from an ISR that returns to the base level of execution priority, the processor enters a sleep state)  
        .equ SCB_SLEEPDEEP_Shift, 2   @ bitWidth 1 (Provides a qualifying hint indicating that waking from sleep might take longer)  
        .equ SCB_SEVONPEND_Shift, 4   @ bitWidth 1 (Determines whether an interrupt transition from inactive state to pending state is a wakeup event)  
 
    .equ SCB_CCR, SCB_BASE + 0x00000014 @ (Configuration and Control Register) 
        .equ SCB_NONBASETHRDENA_Shift, 0   @ bitWidth 1 (Controls whether the processor can enter Thread mode with exceptions active)  
        .equ SCB_USERSETMPEND_Shift, 1   @ bitWidth 1 (Enables unprivileged software access to the STIR)  
        .equ SCB_UNALIGN_TRP_Shift, 3   @ bitWidth 1 (Enables unaligned access traps)  
        .equ SCB_DIV_0_TRP_Shift, 4   @ bitWidth 1 (Enables faulting or halting when the processor executes an SDIV or UDIV instruction with a divisor of 0)  
        .equ SCB_BFHFNMIGN_Shift, 8   @ bitWidth 1 (Enables handlers with priority -1 or -2 to ignore data BusFaults caused by load and store instructions.)  
        .equ SCB_STKALIGN_Shift, 9   @ bitWidth 1 (Indicates stack alignment on exception entry)  
        .equ SCB_DC_Shift, 16   @ bitWidth 1 (Cache enable bit)  
        .equ SCB_IC_Shift, 17   @ bitWidth 1 (Instruction cache enable bi)  
        .equ SCB_BP_Shift, 18   @ bitWidth 1 (Branch prediction enable bi)  
 
    .equ SCB_SHPR1, SCB_BASE + 0x00000018 @ (System Handler Priority Register 1) 
        .equ SCB_PRI_4_Shift, 0   @ bitWidth 8 (Priority of system handler 4, MemManage)  
        .equ SCB_PRI_5_Shift, 8   @ bitWidth 8 (Priority of system handler 5, BusFault)  
        .equ SCB_PRI_6_Shift, 16   @ bitWidth 8 (Priority of system handler 6, UsageFault)  
 
    .equ SCB_SHPR2, SCB_BASE + 0x0000001c @ (System Handler Priority Register 2) 
        .equ SCB_PRI_11_Shift, 24   @ bitWidth 8 (Priority of system handler 11, SVCall)  
 
    .equ SCB_SHPR3, SCB_BASE + 0x00000020 @ (System Handler Priority Register 3) 
        .equ SCB_PRI_12_Shift, 0   @ bitWidth 8 (Priority of system handler 12, SysTick)  
        .equ SCB_PRI_14_Shift, 16   @ bitWidth 8 (Priority of system handler 14, PendSV)  
        .equ SCB_PRI_15_Shift, 24   @ bitWidth 8 (Priority of system handler 15, SysTick exception)  
 
    .equ SCB_SHCSR, SCB_BASE + 0x00000024 @ (System Handler Control and State Register) 
        .equ SCB_MEMFAULTACT_Shift, 0   @ bitWidth 1 ()  
        .equ SCB_BUSFAULTACT_Shift, 1   @ bitWidth 1 ()  
        .equ SCB_USGFAULTACT_Shift, 3   @ bitWidth 1 ()  
        .equ SCB_SVCALLACT_Shift, 7   @ bitWidth 1 ()  
        .equ SCB_MONITORACT_Shift, 8   @ bitWidth 1 ()  
        .equ SCB_PENDSVACT_Shift, 10   @ bitWidth 1 ()  
        .equ SCB_SYSTICKACT_Shift, 11   @ bitWidth 1 ()  
        .equ SCB_USGFAULTPENDED_Shift, 12   @ bitWidth 1 ()  
        .equ SCB_MEMFAULTPENDED_Shift, 13   @ bitWidth 1 ()  
        .equ SCB_BUSFAULTPENDED_Shift, 14   @ bitWidth 1 ()  
        .equ SCB_SVCALLPENDED_Shift, 15   @ bitWidth 1 ()  
        .equ SCB_MEMFAULTENA_Shift, 16   @ bitWidth 1 ()  
        .equ SCB_BUSFAULTENA_Shift, 17   @ bitWidth 1 ()  
        .equ SCB_USGFAULTENA_Shift, 18   @ bitWidth 1 ()  
 
    .equ SCB_CFSR, SCB_BASE + 0x00000028 @ (Configurable Fault Status Registers) 
        .equ SCB_IACCVIOL_Shift, 0   @ bitWidth 1 ()  
        .equ SCB_DACCVIOL_Shift, 1   @ bitWidth 1 ()  
        .equ SCB_MUNSTKERR_Shift, 3   @ bitWidth 1 ()  
        .equ SCB_MSTKERR_Shift, 4   @ bitWidth 1 ()  
        .equ SCB_MLSPERR_Shift, 5   @ bitWidth 1 ()  
        .equ SCB_MMARVALID_Shift, 7   @ bitWidth 1 ()  
        .equ SCB_IBUSERR_Shift, 8   @ bitWidth 1 ()  
        .equ SCB_PRECISERR_Shift, 9   @ bitWidth 1 ()  
        .equ SCB_IMPRECISERR_Shift, 10   @ bitWidth 1 ()  
        .equ SCB_UNSTKERR_Shift, 11   @ bitWidth 1 ()  
        .equ SCB_STKERR_Shift, 12   @ bitWidth 1 ()  
        .equ SCB_LSPERR_Shift, 13   @ bitWidth 1 ()  
        .equ SCB_BFARVALID_Shift, 15   @ bitWidth 1 ()  
        .equ SCB_UNDEFINSTR_Shift, 16   @ bitWidth 1 ()  
        .equ SCB_INVSTATE_Shift, 17   @ bitWidth 1 ()  
        .equ SCB_INVPC_Shift, 18   @ bitWidth 1 ()  
        .equ SCB_NOCP_Shift, 19   @ bitWidth 1 ()  
        .equ SCB_UNALIGNED_Shift, 24   @ bitWidth 1 ()  
        .equ SCB_DIVBYZERO_Shift, 25   @ bitWidth 1 ()  
 
    .equ SCB_HFSR, SCB_BASE + 0x0000002c @ (HardFault Status register) 
        .equ SCB_VECTTBL_Shift, 1   @ bitWidth 1 (Indicates when a fault has occurred because of a vector table read error on exception processing)  
        .equ SCB_FORCED_Shift, 30   @ bitWidth 1 (Indicates that a fault with configurable priority has been escalated to a HardFault exception)  
        .equ SCB_DEBUGEVT_Shift, 31   @ bitWidth 1 (Indicates when a Debug event has occurred)  
 
    .equ SCB_DFSR, SCB_BASE + 0x00000030 @ (Debug Fault Status Register) 
        .equ SCB_HALTED_Shift, 0   @ bitWidth 1 (debug event generated by)  
        .equ SCB_BKPT_Shift, 1   @ bitWidth 1 (debug event generated by BKPT instruction execution or a breakpoint match in FPB)  
        .equ SCB_DWTTRAP_Shift, 2   @ bitWidth 1 (debug event generated by the DWT)  
        .equ SCB_VCATCH_Shift, 3   @ bitWidth 1 (triggering of a Vector catch)  
        .equ SCB_EXTERNAL_Shift, 4   @ bitWidth 1 (debug event generated because of the assertion of an external debug request)  
 
    .equ SCB_MMFAR, SCB_BASE + 0x00000034 @ (MemManage Fault Address Register) 
        .equ SCB_ADDRESS_Shift, 0   @ bitWidth 32 (Data address for an MPU fault)  
 
    .equ SCB_BFAR, SCB_BASE + 0x00000038 @ (BusFault Address Register) 
        .equ SCB_ADDRESS_Shift, 0   @ bitWidth 32 (Data address for a precise bus fault)  
 
    .equ SCB_AFSR, SCB_BASE + 0x0000003C @ (Auxiliary Fault Status Register) 
 
    .equ SCB_CLIDR, SCB_BASE + 0x00000078 @ (Cache Level ID Register) 
        .equ SCB_LoC_Shift, 24   @ bitWidth 3 (Level of Coherency)  
        .equ SCB_LoU_Shift, 27   @ bitWidth 3 (Level of Unification)  
 
    .equ SCB_CTR, SCB_BASE + 0x0000007c @ (Cache Type Register) 
        .equ SCB_IMINLINE_Shift, 0   @ bitWidth 4 (Smallest cache line of all the instruction caches under the control of the processor)  
        .equ SCB_DMINLINE_Shift, 16   @ bitWidth 4 (Smallest cache line of all the data and unified caches under the core control)  
        .equ SCB_ERG_Shift, 20   @ bitWidth 4 (Exclusives Reservation Granule)  
        .equ SCB_CWG_Shift, 24   @ bitWidth 4 (Cache Writeback Granule)  
        .equ SCB_FORMAT_Shift, 29   @ bitWidth 3 (Register format)  
 
    .equ SCB_CCSIDR, SCB_BASE + 0x00000080 @ (Cache Size ID Register) 
        .equ SCB_LineSize_Shift, 0   @ bitWidth 3 (number of words in each cache line)  
        .equ SCB_Associativity_Shift, 3   @ bitWidth 9 (number of ways)  
        .equ SCB_NumSets_Shift, 12   @ bitWidth 16 (number of sets)  
        .equ SCB_WA_Shift, 28   @ bitWidth 1 (Write allocation support)  
        .equ SCB_RA_Shift, 29   @ bitWidth 1 (Read allocation support)  
        .equ SCB_WB_Shift, 30   @ bitWidth 1 (Write-Back support)  
        .equ SCB_WT_Shift, 31   @ bitWidth 1 (Write-Through support)  
 
    .equ SCB_CSSELR, SCB_BASE + 0x00000084 @ (Cache Size Selection Register) 
        .equ SCB_IND_Shift, 0   @ bitWidth 1 (selection of instruction or data cache)  
        .equ SCB_LEVEL_Shift, 1   @ bitWidth 3 (cache level selected)  
 
    .equ SCB_CPACR, SCB_BASE + 0x00000088 @ (Coprocessor Access Control Register) 
        .equ SCB_CP10_Shift, 20   @ bitWidth 2 (Access privileges for coprocessor 10.)  
        .equ SCB_CP11_Shift, 22   @ bitWidth 2 (Access privileges for coprocessor 11.)  
 
    .equ SCB_STIR, SCB_BASE + 0x00000200 @ (Software Trigger Interrupt Register) 
        .equ SCB_INTID_Shift, 0   @ bitWidth 9 (Interrupt ID of the interrupt to trigger, in the range 0-239. For example, a value of 0x03 specifies interrupt IRQ3.)  
 
    .equ SCB_MVFR0, SCB_BASE + 0x00000240 @ (Media and VFP Feature Register 0) 
 
    .equ SCB_MVFR1, SCB_BASE + 0x00000244 @ (Media and VFP Feature Register 1) 
 
    .equ SCB_MVFR2, SCB_BASE + 0x00000248 @ (Media and VFP Feature Register 2) 
 

@=========================== SysTick ===========================@
.equ SysTick_BASE, 0xE000E010 @ (System timer) 
    .equ SysTick_CSR, SysTick_BASE + 0x00000000 @ (Control and Status Register) 
        .equ SysTick_ENABLE_Shift, 0   @ bitWidth 1 (Enables the counter)  
        .equ SysTick_TICKINT_Shift, 1   @ bitWidth 1 (Enables SysTick exception request)  
        .equ SysTick_CLKSOURCE_Shift, 2   @ bitWidth 1 (Indicates the clock source)  
        .equ SysTick_COUNTFLAG_Shift, 16   @ bitWidth 1 (Returns 1 if timer counted to 0 since last time this was read)  
 
    .equ SysTick_RVR, SysTick_BASE + 0x00000004 @ (Reload Value Register) 
        .equ SysTick_RELOAD_Shift, 0   @ bitWidth 24 (Value to load into the SysTick Current Value Register when the counter reaches 0)  
 
    .equ SysTick_CVR, SysTick_BASE + 0x00000008 @ (Current Value Register) 
        .equ SysTick_CURRENT_Shift, 0   @ bitWidth 24 (Current value at the time the register is accessed)  
 
    .equ SysTick_CALIB, SysTick_BASE + 0x0000000c @ (Calibration Value Register) 
        .equ SysTick_TENMS_Shift, 0   @ bitWidth 24 (Reload value to use for 10ms timing)  
        .equ SysTick_SKEW_Shift, 30   @ bitWidth 1 (Indicates whether the TENMS value is exact)  
        .equ SysTick_NOREF_Shift, 31   @ bitWidth 1 (Indicates whether the device provides a reference clock to the processor)  
 

@=========================== NVIC ===========================@
.equ NVIC_BASE, 0xE000E100 @ (Nested Vectored Interrupt Controller) 
    .equ NVIC_ISER[%s], NVIC_BASE + 0x00000000 @ (Interrupt Set Enable Register n) 
        .equ NVIC_SETENA_Shift, 0   @ bitWidth 32 (Interrupt set enable bits)  
 
    .equ NVIC_ICER[%s], NVIC_BASE + 0x00000080 @ (Interrupt Clear Enable Register n) 
        .equ NVIC_CLRENA_Shift, 0   @ bitWidth 32 (Interrupt clear-enable bits)  
 
    .equ NVIC_ISPR[%s], NVIC_BASE + 0x00000100 @ (Interrupt Set Pending Register n) 
        .equ NVIC_SETPEND_Shift, 0   @ bitWidth 32 (Interrupt set-pending bits)  
 
    .equ NVIC_ICPR[%s], NVIC_BASE + 0x00000180 @ (Interrupt Clear Pending Register n) 
        .equ NVIC_CLRPEND_Shift, 0   @ bitWidth 32 (Interrupt clear-pending bits)  
 
    .equ NVIC_IABR[%s], NVIC_BASE + 0x00000200 @ (Interrupt Active bit Register n) 
        .equ NVIC_ACTIVE_Shift, 0   @ bitWidth 32 (Interrupt active flags)  
 
    .equ NVIC_IP[%s], NVIC_BASE + 0x00000300 @ (Interrupt Priority Register 8Bit wide n) 
        .equ NVIC_PRI0_Shift, 0   @ bitWidth 8 (Priority of interrupt 0)  
 
    .equ NVIC_STIR, NVIC_BASE + 0x00000e00 @ (Software Trigger Interrupt Register) 
        .equ NVIC_INTID_Shift, 0   @ bitWidth 9 (Interrupt ID of the interrupt to trigger, in the range 0-239. For example, a value of 0x03 specifies interrupt IRQ3.)  
 

@=========================== MPU ===========================@
.equ MPU_BASE, 0xE000ED90 @ (Memory Protection Unit) 
    .equ MPU_TYPE, MPU_BASE + 0x00000000 @ (MPU Type Register) 
        .equ MPU_SEPARATE_Shift, 0   @ bitWidth 1 (Indicates support for unified or separate instruction and date memory maps.)  
        .equ MPU_DREGION_Shift, 8   @ bitWidth 8 (Indicates the number of supported MPU instruction regions.)  
        .equ MPU_IREGION_Shift, 16   @ bitWidth 8 (Indicates the number of supported MPU data regions.)  
 
    .equ MPU_CTRL, MPU_BASE + 0x00000004 @ (MPU Control Register) 
        .equ MPU_ENABLE_Shift, 0   @ bitWidth 1 (Enables the MPU)  
        .equ MPU_HFNMIENA_Shift, 1   @ bitWidth 1 (Enables the operation of MPU during hard fault, NMI, and FAULTMASK handlers.)  
        .equ MPU_PRIVDEFENA_Shift, 2   @ bitWidth 1 (Enables privileged software access to the default memory map.)  
 
    .equ MPU_RNR, MPU_BASE + 0x00000008 @ (MPU Region Number Register) 
        .equ MPU_REGION_Shift, 0   @ bitWidth 8 (Indicates the MPU region referenced by the MPU_RBAR and MPU_RASR registers.)  
 
    .equ MPU_RBAR, MPU_BASE + 0x0000000C @ (MPU Region Base Address Register) 
        .equ MPU_REGION_Shift, 0   @ bitWidth 4 (MPU region field.)  
        .equ MPU_VALID_Shift, 4   @ bitWidth 1 (MPU Region Number valid bit.)  
        .equ MPU_ADDR_Shift, 5   @ bitWidth 27 (Region base address field.)  
 
    .equ MPU_RASR, MPU_BASE + 0x00000010 @ (MPU Region Attribute and Size Register) 
        .equ MPU_ENABLE_Shift, 0   @ bitWidth 1 (Region enable bit.)  
        .equ MPU_SIZE_Shift, 1   @ bitWidth 5 (Specifies the size of the MPU protection region.)  
        .equ MPU_SRD_Shift, 8   @ bitWidth 8 (Subregion disable bits.)  
        .equ MPU_B_Shift, 16   @ bitWidth 1 (MPU access permission attributes.)  
        .equ MPU_C_Shift, 17   @ bitWidth 1 (MPU access permission attributes.)  
        .equ MPU_S_Shift, 18   @ bitWidth 1 (Shareable bit.)  
        .equ MPU_TEX_Shift, 19   @ bitWidth 3 (MPU access permission attributes.)  
        .equ MPU_AP_Shift, 24   @ bitWidth 3 (Access permission field.)  
        .equ MPU_XN_Shift, 28   @ bitWidth 1 (Instruction access disable bit.)  
 
    .equ MPU_RBAR_A1, MPU_BASE + 0x00000014 @ (MPU Alias 1 Region Base Address Register) 
 
    .equ MPU_RASR_A1, MPU_BASE + 0x00000018 @ (MPU Alias 1 Region Attribute and Size Register) 
 
    .equ MPU_RBAR_A2, MPU_BASE + 0x0000001c @ (MPU Alias 2 Region Base Address Register) 
 
    .equ MPU_RASR_A2, MPU_BASE + 0x00000020 @ (MPU Alias 2 Region Attribute and Size Register) 
 
    .equ MPU_RBAR_A3, MPU_BASE + 0x00000024 @ (MPU Alias 3 Region Base Address Register) 
 
    .equ MPU_RASR_A3, MPU_BASE + 0x00000028 @ (MPU Alias 3 Region Attribute and Size Register) 
 

@=========================== FPU ===========================@
.equ FPU_BASE, 0xE000EF30 @ (Floating Point Unit) 
    .equ FPU_FPCCR, FPU_BASE + 0x00000004 @ (Floating-point Context Control Register) 
        .equ FPU_LSPACT_Shift, 0   @ bitWidth 1 (Lazy state preservation is active. Floating-point stack frame has been allocated but saving state to it has been deferred.)  
        .equ FPU_USER_Shift, 1   @ bitWidth 1 (Privilege level was user when the floating-point stack frame was allocated.)  
        .equ FPU_THREAD_Shift, 3   @ bitWidth 1 (Mode was Thread Mode when the floating-point stack frame was allocated.)  
        .equ FPU_HFRDY_Shift, 4   @ bitWidth 1 (Priority permitted setting the HardFault handler to the pending state when the floating-point stack frame was allocated.)  
        .equ FPU_MMRDY_Shift, 5   @ bitWidth 1 (MemManage is enabled and priority permitted setting the MemManage handler to the pending state when the floating-point stack frame was allocated.)  
        .equ FPU_BFRDY_Shift, 6   @ bitWidth 1 (BusFault is enabled and priority permitted setting the BusFault handler to the pending state when the floating-point stack frame was allocated.)  
        .equ FPU_MONRDY_Shift, 8   @ bitWidth 1 (DebugMonitor is enabled and priority permits setting MON_PEND when the floating-point stack frame was allocated.)  
        .equ FPU_LSPEN_Shift, 30   @ bitWidth 1 (Enable automatic lazy state preservation for floating-point context.)  
        .equ FPU_ASPEN_Shift, 31   @ bitWidth 1 (Enables CONTROL.FPCA setting on execution of a floating-point instruction. This results in automatic hardware state preservation and restoration, for floating-point context, on exception entry and exit.)  
 
    .equ FPU_FPCAR, FPU_BASE + 0x00000008 @ (Floating-point Context Address Register) 
        .equ FPU_ADDRESS_Shift, 3   @ bitWidth 29 (The location of the unpopulated floating-point register space allocated on an exception stack frame.)  
 
    .equ FPU_FPDSCR, FPU_BASE + 0x0000000C @ (Floating-point Default Status Control Register) 
        .equ FPU_RMode_Shift, 22   @ bitWidth 2 (Default value for FPSCR.RMode.)  
        .equ FPU_FZ_Shift, 24   @ bitWidth 1 (Default value for FPSCR.FZ.)  
        .equ FPU_DN_Shift, 25   @ bitWidth 1 (Default value for FPSCR.DN.)  
        .equ FPU_AHP_Shift, 26   @ bitWidth 1 (Default value for FPSCR.AHP.)  
 
    .equ FPU_MVFR0, FPU_BASE + 0x00000010 @ (Media and VFP Feature Register 0) 
        .equ FPU_A_SIMD_registers_Shift, 0   @ bitWidth 4 (Indicates the size of the FP register bank)  
        .equ FPU_Single_precision_Shift, 4   @ bitWidth 4 (Indicates the hardware support for FP single-precision operations)  
        .equ FPU_Double_precision_Shift, 8   @ bitWidth 4 (Indicates the hardware support for FP double-precision operations)  
        .equ FPU_FP_excep_trapping_Shift, 12   @ bitWidth 4 (Indicates whether the FP hardware implementation supports exception trapping)  
        .equ FPU_Divide_Shift, 16   @ bitWidth 4 (Indicates the hardware support for FP divide operations)  
        .equ FPU_Square_root_Shift, 20   @ bitWidth 4 (Indicates the hardware support for FP square root operations)  
        .equ FPU_Short_vectors_Shift, 24   @ bitWidth 4 (Indicates the hardware support for FP short vectors)  
        .equ FPU_FP_rounding_modes_Shift, 28   @ bitWidth 4 (Indicates the rounding modes supported by the FP floating-point hardware)  
 
    .equ FPU_MVFR1, FPU_BASE + 0x00000014 @ (Media and VFP Feature Register 1) 
        .equ FPU_FtZ_mode_Shift, 0   @ bitWidth 4 (Indicates whether the FP hardware implementation supports only the Flush-to-Zero mode of operation)  
        .equ FPU_D_NaN_mode_Shift, 4   @ bitWidth 4 (Indicates whether the FP hardware implementation supports only the Default NaN mode)  
        .equ FPU_FP_HPFP_Shift, 24   @ bitWidth 4 (Floating Point Half-Precision and double-precision)  
        .equ FPU_FP_fused_MAC_Shift, 28   @ bitWidth 4 (Indicates whether the FP supports fused multiply accumulate operations)  
 
    .equ FPU_MVFR2, FPU_BASE + 0x00000018 @ (Media and VFP Feature Register 2) 
        .equ FPU_VFP_Misc_Shift, 4   @ bitWidth 4 (Indicates the hardware support for FP miscellaneous features)  
 
